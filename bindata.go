// Code generated by go-bindata.
// sources:
// template/delete.tmpl
// template/delete_column.tmpl
// template/insert.tmpl
// template/insert_column.tmpl
// template/select.tmpl
// template/select_column.tmpl
// template/table.tmpl
// template/update.tmpl
// template/update_column.tmpl
// DO NOT EDIT!

package sqlla

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateDeleteTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x93\xc1\x8e\xd3\x30\x10\x86\xcf\xf1\x53\x0c\x16\x48\x89\x36\xf5\x03\x80\x7a\x61\x9b\xd5\x1e\xc2\xb2\x6d\x2a\x71\x40\x1c\xb2\xc9\xa4\x58\xeb\x3a\x8d\xed\x50\x56\xc6\xef\x8e\x6c\xa7\x6d\xd0\xaa\x68\x6f\xd1\x78\xe6\xff\x7f\x7f\x9e\x58\x0b\x2d\x76\x5c\x22\xd0\x15\x0a\x34\x48\xc1\x39\x62\xed\x02\xde\x37\xf5\x1e\xc5\x43\xbd\x47\xf8\xb8\x04\x16\x3e\xfe\x80\xe9\x6f\x7d\x39\x7c\x95\xfd\x11\x15\x2c\xce\xfd\xbd\xd4\x46\x8d\x8d\xe9\x95\x9f\x38\x28\x2e\x4d\x07\xf4\x01\x8f\x1f\x74\xb5\x2e\x29\xa4\xaf\x45\xb6\xdc\x08\xcc\x82\x86\x79\x39\x20\x58\x3b\xf7\x75\x2e\x66\xaa\xd6\x25\x44\x69\xb0\x24\xb1\x76\x4a\xe3\x5c\xb5\x2e\x89\x23\xa4\x1b\x65\x03\xe9\xf0\x6a\xba\x5a\x97\x19\x44\x89\x34\xfb\x8f\xb6\x25\x89\x42\x33\x2a\x79\xbd\xc7\x92\x24\x19\x72\x92\x38\xef\x67\x2d\xa8\x5a\xee\x10\xd8\x6d\x2f\xc6\xbd\xd4\xe0\x9c\xb5\x60\x70\x7f\x10\xb5\x39\xa3\x8c\x87\x14\x58\x3c\x46\xd9\x7a\xb6\xd7\xc2\x9e\xad\x32\xd8\xf6\xd5\x20\xd2\x0c\x52\x6d\x14\x97\xbb\x1c\xbe\xff\xe0\xd2\xa0\xea\xea\x06\xad\xcb\x01\x95\xea\x55\xe6\x63\x1f\x7f\xa2\x42\x9d\xc3\x2f\x1d\xaa\x9e\xfb\xc0\x42\x91\x4d\x22\x24\xe1\x5d\x38\x7a\xb7\x04\xc9\x85\x1f\x3a\x5d\x96\xd2\xdc\x97\xc2\xa4\xbf\x19\x49\x86\x11\xd5\x8b\x17\xa1\xab\xa2\x2c\xb6\x05\xdc\x6d\xbe\x7e\x81\x19\x70\x1a\xe4\xa2\xab\x57\xa4\x34\x08\xc6\xb9\x9b\x25\x50\xf8\x76\x5f\x6c\x0a\x0a\x37\x53\x53\xd4\x9d\x0c\xa7\x36\xa0\x9f\x68\x8c\x2c\xb9\x88\x3c\x17\xc0\x3b\x60\xf7\xb5\x7e\x7c\xbe\x30\xd2\xc1\xb9\x0a\x0f\x3f\xf9\x9f\x9f\xb3\x7d\x02\x3d\x08\x51\xb3\xd5\x67\xcf\x69\x10\x6c\x83\x7a\x14\x66\x0e\x27\xd8\xe5\x50\xab\xdd\x85\x4e\xa0\x3e\x5b\x54\xe7\xd2\x8c\x9d\x56\x84\x79\xbf\xc7\xe7\xf8\x6e\x57\x96\xd5\x4f\xe8\x7f\x1b\xef\x38\x8a\xf6\x14\xf0\x0d\xdc\xe7\xcc\x4f\xb5\xf6\x89\x15\xbf\xb1\x49\x67\x99\x19\x63\x19\x89\xff\xd6\xb4\x3a\x97\x25\xfa\x1b\x00\x00\xff\xff\x4e\x09\x98\xb1\xb7\x03\x00\x00")

func templateDeleteTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateDeleteTmpl,
		"template/delete.tmpl",
	)
}

func templateDeleteTmpl() (*asset, error) {
	bytes, err := templateDeleteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/delete.tmpl", size: 951, mode: os.FileMode(420), modTime: time.Unix(1474694073, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateDelete_columnTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x91\x3f\x4f\xc3\x30\x10\xc5\x67\xfb\x53\x3c\x45\x0c\x89\x14\x59\x9d\x23\x65\x2a\xdd\x2a\x2a\x44\xc5\x82\x18\x0c\xbd\x8a\x48\x17\xdb\x71\xfe\xb4\xe0\xfa\xbb\xa3\x24\xd0\x52\x81\xc4\x64\xfb\xee\xfd\xee\xd9\xcf\x21\x60\x47\xfb\xca\x10\x92\x5b\x62\xea\x68\x69\xb9\xaf\x4d\x82\x18\x43\xc0\x4d\x5b\x6b\xe6\xad\x7e\x61\xba\xd3\x35\xa1\x28\xa1\x2e\xa7\x13\x3a\xbb\xd4\x35\xf1\xb4\x5b\xdb\x03\x79\xc4\x28\xf7\xbd\x79\x45\xda\xe0\x0f\x3e\xc6\xd9\xe4\xe1\x7e\x9d\x8d\x7d\xf5\x6b\xce\xb6\xea\x78\xd4\xa5\xc3\xd4\xdf\xbe\xbb\x6f\x32\x07\x1d\x9d\x6f\xa1\x94\x6a\x1b\x66\xad\x36\x8e\xbc\xee\xac\xcf\xfe\x71\x42\x90\x62\xd0\x1e\xd6\xe1\x1a\x94\xa2\xda\x83\xc9\xa4\xd3\xe0\x0c\x65\x89\xc5\x28\x16\xd6\xa1\x3c\x6b\x57\x4d\xaf\x59\x8a\x08\xe2\x96\x2e\xed\x89\x79\x5a\x3c\x4b\x11\xa5\x14\x87\x37\xf2\x53\x3c\x33\xb5\x3a\x3a\x7f\x75\xfd\x13\xc6\x52\xf5\x41\x3f\x9e\x18\x1e\x35\xf7\x54\x60\xc8\xb1\x71\x05\xac\xcb\x31\x87\x5f\x20\x39\x67\x13\x63\x12\xa5\x68\xd4\x6c\x50\x42\x3b\x47\x66\x97\x7e\x15\x72\x4c\x4b\x26\x85\xa7\xae\xf7\x06\x8d\x8c\x52\x86\x00\x32\xbb\xf1\x2b\x3e\x03\x00\x00\xff\xff\x61\xbe\x3a\x63\xde\x01\x00\x00")

func templateDelete_columnTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateDelete_columnTmpl,
		"template/delete_column.tmpl",
	)
}

func templateDelete_columnTmpl() (*asset, error) {
	bytes, err := templateDelete_columnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/delete_column.tmpl", size: 478, mode: os.FileMode(420), modTime: time.Unix(1474694701, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateInsertTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x55\xc1\x6e\xdb\x3a\x10\x3c\x93\x5f\xb1\x4f\x78\x05\x48\x44\xe1\x07\x38\xf0\xa5\x49\x80\x18\x70\xdd\x38\xf2\x2d\xc8\x41\xb6\x56\x86\x60\x9a\xb2\x48\x2a\x69\xc0\xf2\xdf\x0b\x8a\xb2\xa3\xda\x4e\x5a\x34\x37\x91\x5c\xee\xcc\xce\xec\x52\xce\x41\x81\x65\xa5\x10\x92\x89\x32\xa8\x6d\x02\xde\x53\xe7\x2e\xe1\xff\x55\xbe\x45\x39\xcb\xb7\x08\xa3\x31\x88\xee\xe3\x27\xd8\xfa\x3a\x6c\x77\x5f\xd3\xfa\x05\x35\x5c\x1e\xe2\x6b\x65\xac\x6e\x57\xb6\xd6\xe1\xc6\x4e\x57\xca\x96\x90\xcc\xf0\xe5\x8b\xc9\xe6\xd3\x04\xd8\x51\x12\xde\xdd\xb5\xaf\x3b\x04\xe7\x86\x78\xde\x47\x2e\xd9\x7c\x0a\x31\x25\x38\x4a\x9c\xeb\x59\x78\x9f\xcd\xa7\x94\x18\xb4\xdf\xf2\x1d\x31\x8d\x94\xb9\xc8\xba\x05\x25\xd7\xb5\x6c\xb7\xca\xc0\xe3\x93\xb1\xba\x52\x6b\xea\x29\x2d\x5b\xb5\x02\xd6\x9c\x80\x64\xf3\x29\x87\x88\xc4\xf8\x07\x14\x1c\x25\x1a\x6d\xab\xd5\xfb\x31\x8e\x12\x72\x26\xfd\x08\x9a\x94\x92\x9e\xe9\x08\x86\x54\x9d\x4f\x29\xf1\x81\x9e\x73\xa0\x73\xb5\x46\x10\x7b\xf2\xde\x3b\x07\x16\xb7\x3b\x99\xdb\x83\x31\xf1\x30\x01\x11\x8f\x51\x15\xc1\xa9\xf7\x6a\x3b\x30\xe3\xb0\xa8\xb3\x46\x32\x0e\x2c\x2a\x92\xc2\xe3\x53\xa5\x2c\xea\x32\x5f\xa1\xf3\x29\xa0\xd6\xb5\xe6\xa1\xca\xe7\x5c\x87\x55\xdc\x89\x4b\x03\x83\x58\x18\x07\x1c\x91\x75\x96\xf4\x40\xce\x53\x52\x95\x60\x53\xa8\x37\xc1\x76\x23\xd8\x31\x97\x1b\x2c\xf3\x56\xda\x48\xe9\xae\xae\x37\xa8\xf9\x55\x08\x0f\xaa\x35\x1d\x01\x18\x83\x15\x27\x71\xac\xe1\x94\x84\xec\x21\xe2\xbf\x31\xa8\x4a\x76\x77\xf6\x76\x24\xc9\x51\x31\x7d\x39\x94\x10\x1f\xc4\x25\x8d\x49\xe1\xd9\x44\x84\xd1\x18\x1a\x11\x9d\x10\x8b\xba\xd7\x27\x08\x43\xcf\x20\xfc\x11\xc0\x53\x4a\x9a\x16\xf5\x6b\xc8\x9b\x4c\x66\xd9\xed\xc3\x02\x26\xb3\xc5\x77\x18\xb4\x29\x24\x70\x01\x8d\xa1\x87\xfe\x89\x37\x2e\x20\xb9\x4a\x22\x31\x55\xc9\xbe\x05\xaa\x12\xc4\x5d\x6e\xee\x37\xdd\x50\xfc\x85\xad\xb7\x3f\x70\xc5\x8a\x65\xdf\x54\x37\x5f\x39\xb0\x13\x73\x06\xe6\x86\x11\x45\x69\xf0\x13\xe9\x8b\xa5\x78\x40\xd3\x4a\x7b\x9c\x36\xb6\x62\xd4\x23\x85\x5c\xaf\x87\x92\xf7\xed\xf7\x81\xca\x67\x7a\xea\xa0\x32\xd1\x6f\x88\x21\x5f\xb1\x14\x1d\xb3\x01\x96\x10\x82\x77\xaf\xc3\xef\x12\xfe\x23\x5e\x55\x1c\xb0\x22\xb4\x98\xe6\xa6\xef\xc9\x49\xf1\x99\x3a\xde\x5e\x90\xc1\x43\xe9\x3d\xe3\x22\x43\x89\x2b\xcb\xb8\xb8\xdf\xc4\x29\x67\x55\xc1\x45\x56\xa9\xb5\x44\x56\x2c\xbb\xea\x06\xee\xed\x73\x0d\xa4\xe9\x23\xa2\x11\x9e\x9e\x7f\x54\xcf\xcc\xe1\xdb\x74\x87\x42\x4e\x07\xf0\x83\x06\x79\xff\x6c\xdf\x1e\x34\xfc\x18\xf6\xa4\x7e\x05\x00\x00\xff\xff\xd9\x82\x0f\x74\x69\x06\x00\x00")

func templateInsertTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateInsertTmpl,
		"template/insert.tmpl",
	)
}

func templateInsertTmpl() (*asset, error) {
	bytes, err := templateInsertTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/insert.tmpl", size: 1641, mode: os.FileMode(420), modTime: time.Unix(1474701297, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateInsert_columnTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\xce\xb1\x6a\xc3\x30\x10\x06\xe0\xd9\x7a\x8a\x1f\xd1\xc1\x5e\xf4\x00\x05\x4f\x9e\x0a\x6e\xa1\xd4\x74\x29\x1d\xd4\xfa\x0c\x06\x49\xb6\x65\xc9\xa5\x5c\xef\xdd\x8b\x13\x92\x0c\x09\x64\xbb\x83\xfb\xbf\xfb\x99\xd1\xd3\x30\x06\x82\x7e\x0a\x2b\xc5\xd4\x4c\x2e\xfb\xa0\x21\xc2\x8c\x87\xd5\x5b\xe7\x3a\xfb\xe5\xe8\xc5\x7a\xc2\x63\x0d\x73\xd9\xfe\x90\xa6\xc6\x7a\x72\x87\xa9\x9d\x7e\x28\x42\x44\x0d\x39\x7c\xa3\x5c\x70\x23\x2f\x72\x7c\xf2\xf6\xda\x56\x78\xb7\x2e\x13\x33\xcc\x15\xd6\x8d\xc9\xed\xc7\xe5\xb6\x23\xa6\xfb\x9d\x4f\xf1\xea\x8e\x0a\x56\xc5\x62\x56\x4a\xcf\x76\xfe\xd0\x67\x5c\x44\x7f\xa2\xc6\xa6\x8a\x48\x29\xc7\x80\x45\x89\x52\xcc\xa0\xd0\xef\x95\xff\x03\x00\x00\xff\xff\x69\xeb\x49\xef\x06\x01\x00\x00")

func templateInsert_columnTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateInsert_columnTmpl,
		"template/insert_column.tmpl",
	)
}

func templateInsert_columnTmpl() (*asset, error) {
	bytes, err := templateInsert_columnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/insert_column.tmpl", size: 262, mode: os.FileMode(420), modTime: time.Unix(1474694073, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateSelectTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x55\x4d\x6f\xe3\x36\x10\x3d\x93\xbf\x62\x4a\xb4\x0b\x69\xa3\x10\x29\x50\xf4\xb0\x85\x0f\x6d\x9a\x60\xb7\xf0\xa6\xeb\x28\x45\x0f\x41\x0e\x5a\x8b\x72\x89\xd0\xa4\x45\xd2\xd1\x2e\x58\xfd\xf7\x62\x48\xc9\x56\xd6\xf9\xf0\xa1\x17\xc3\x12\x39\xef\xbd\x99\x79\x33\x0a\x01\x6a\xd1\x48\x2d\x80\x95\x42\x89\xa5\x67\xd0\xf7\x34\x84\x53\xf8\x7e\x59\xad\x85\xba\xaa\xd6\x02\xde\xcd\x80\xc7\x3f\xff\x82\x37\xe7\xf8\x3a\xfe\x9b\x9b\x4e\x58\x38\xdd\xdd\x37\xda\x79\xbb\x5d\x7a\x63\x31\x62\x63\xa5\xf6\x0d\xb0\x2b\xd1\xfd\xe0\xca\xc5\x9c\x41\x76\x08\x72\x23\xbd\x12\x79\xc4\x78\xa8\x2c\x54\x4a\x9d\x1b\xb5\x5d\x6b\x07\x33\xb8\xbd\x73\xde\x4a\xbd\x0a\x94\x84\x00\xb6\xd2\x2b\x01\x7c\x3c\xee\x7b\x16\xc2\xa0\xaa\xef\x59\x11\x02\x08\x5d\xa3\xf6\x9e\x52\xff\x75\x23\x20\x84\x69\x0a\x7d\x9f\xd2\x2b\x17\x73\x48\x2a\x21\xe1\x8e\x10\xe5\x62\x4e\xc9\x88\x3e\x52\x53\x62\x6c\x2d\x2c\x00\x8c\xcf\x4a\xae\xa5\x07\x80\xb7\x5b\xa9\xfd\xcf\x3f\x21\x5b\xb3\xd5\x4b\xc8\xda\x43\xc2\xc5\x3c\x87\xc4\x9a\xe5\x2f\xc8\x09\x94\x58\xe1\xb7\x56\x3f\x7f\x27\x50\x42\xda\x82\x12\xb2\x2f\x10\x3e\x31\x86\xbf\x5a\xaa\x82\x92\xfe\x45\x29\x23\x50\x0e\x73\x4c\x20\x53\x90\xf4\xbf\xa2\xab\xe5\x29\xdf\x19\xbc\x51\x3b\x95\x2d\x32\x3d\xd5\x91\x10\xc0\x8b\xf5\x46\x55\x7e\xe7\xa6\x74\xc8\x80\xa7\xe3\xa1\x45\x47\xc8\xbc\x31\x65\xab\xb2\x1c\xb2\x54\xf8\x02\x6e\xef\xa4\xf6\xc2\x36\xd5\x52\x84\xbe\x00\x61\xad\xb1\x39\x6a\x5c\x0e\xfc\xef\x66\x43\x93\x1c\xff\xc3\x48\x9d\xb5\xa3\xb2\x02\x58\x01\x2c\xa7\xa4\xfb\x47\x58\xe1\x0a\x78\x70\x31\x1e\x23\x5a\x1e\x5f\xf2\x81\x8e\x12\xd9\xc4\xa3\xef\x66\xa0\xa5\x42\xf8\x31\x6b\xc6\x0a\x7c\x15\x23\xb1\xda\x94\xb4\x5b\x61\xbf\x22\x08\x2b\x2f\xe6\x17\xe7\x37\xc0\xe0\x04\x46\x35\x27\xc0\xe0\xf2\xfa\xcf\x8f\x30\x75\x69\x84\x4f\x2a\x90\x81\xb1\x48\x90\x70\x4e\x66\xc0\xe0\xef\xf7\x17\xd7\x17\x08\x93\x2e\x21\xcf\xfe\xb8\xe5\xd1\x8c\x11\x64\x6c\xcc\x44\xe7\x04\x66\xfe\xe1\xe3\x87\x24\xc7\x79\xbb\x34\xfa\x81\x5f\x1a\xbb\xae\xfc\x5f\x52\xfb\xec\xed\x10\x5b\xc0\x8f\x67\x79\xca\x64\x6c\x6c\x42\x00\xf6\x0b\x4b\x45\xd2\x52\xa5\x5e\x9f\x82\x6c\x80\xbf\xaf\xdc\xa7\xfb\x7d\xff\x5c\xcc\xad\x8c\xc3\x34\x64\x38\xf1\x7b\xf6\x42\x73\xbf\x71\xfc\x64\x6f\xf4\x7d\x96\xf3\x11\x83\x23\xfe\xa7\xfb\xd4\xc6\x67\x76\x07\x46\xb8\xc7\x17\x2f\xa5\x50\xf5\x28\x88\xe2\x72\x8a\xbe\xc3\x1d\x73\x8c\xf3\x4a\xa9\x57\x4a\x64\xf5\x67\x70\xad\x52\x15\xff\xfd\xb7\x94\xcc\xe3\x4c\xa7\x0e\xdc\x39\x0d\x66\x93\x0d\x36\x74\xae\x80\xca\xae\xa6\x86\x7b\xdd\x6a\x07\x64\x83\xe1\x87\x66\x99\x0e\x81\xea\xcf\x7c\x81\xf8\xd7\xa6\xcb\x26\x44\x9c\xf3\x7c\xdf\x50\x5e\x2e\x2b\x9d\x59\xd3\xe5\x47\x6e\x87\x5f\x95\xfa\x26\xf3\xdb\xbb\x17\x73\xb7\x71\xf0\xd6\xd5\xbd\x78\xfa\xe6\xd9\x60\xb3\xff\xbb\x46\x8f\x47\xd1\x9a\x6e\x1f\x3e\x56\xe6\xb0\x2c\x47\xa1\x91\x5a\x34\xc2\x02\x42\xf2\x73\x65\x9c\x40\x1d\x8d\x19\xde\x5c\x89\x2f\x71\x9b\x63\xec\x44\xf0\x58\x67\x97\x53\xf2\x04\xcd\x21\x0f\x12\x61\xf1\x66\x50\x6d\x36\x42\xd7\x99\x75\x05\xd8\x38\x8f\xe3\x65\xbb\x9f\xc0\x63\x6c\x8b\x0a\xdc\xd0\x39\x7c\xd0\xc2\xbe\x66\x5c\xfc\xe4\xa2\x9d\x0e\x2e\x51\x32\x64\xe6\x52\x66\x94\x3c\xf9\x09\x7e\x63\x4d\x87\xb3\x97\x49\x5d\x8b\x2f\x69\xcf\x39\x38\xcb\x11\x4c\xea\x15\xb2\xa5\xc8\x61\xef\x93\xbd\x35\xad\xe9\x52\x25\x76\xf3\xd9\xf7\xf4\xbf\x00\x00\x00\xff\xff\x26\x7f\x88\xa5\x8d\x08\x00\x00")

func templateSelectTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateSelectTmpl,
		"template/select.tmpl",
	)
}

func templateSelectTmpl() (*asset, error) {
	bytes, err := templateSelectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/select.tmpl", size: 2189, mode: os.FileMode(420), modTime: time.Unix(1474694073, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateSelect_columnTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x53\xcf\x6b\xdb\x30\x18\x3d\x5b\x7f\xc5\xc3\xec\x60\xd3\x54\x74\x30\x76\x08\xf8\xd0\xa6\x39\x04\xda\xa5\x6b\xc2\x60\x94\x1e\xb4\xe4\x0b\x33\x51\x6c\x59\xfe\xd1\x76\xaa\xfe\xf7\x21\x39\x6e\xe3\x2c\xd0\x8c\xf6\x64\x59\xdf\xf7\xf4\xf4\xbd\xa7\x67\x0c\x96\xb4\x4a\x33\x42\x38\x23\x49\x8b\x6a\x94\xcb\x7a\x93\x85\xb0\xd6\x18\x7c\x2a\x37\x42\xca\xb9\xf8\x25\xe9\x9b\xd8\x10\x86\x09\xf8\xeb\xdf\x33\xaa\x7c\x24\x36\x24\xfd\xea\x2a\x7f\x20\x0d\x6b\xd9\xaa\xce\x16\x88\x0a\x1c\xc0\x5b\xdb\x92\xcc\xbe\x5f\xc5\xae\xce\xff\x39\x67\x9e\x56\xd2\xf5\x45\x8d\xaf\xcf\x9f\x54\x87\x1c\x80\x1e\x95\x2e\xc1\x39\x2f\x0b\x29\x05\x9f\x2a\xd2\xa2\xca\x75\xfc\x06\x13\x0c\x0b\x1a\xa1\x91\x2b\xf4\x81\x2c\x48\x57\x90\x94\x45\xfe\xe0\x18\x49\x82\x33\xd7\x1c\xe4\x0a\xc9\x4b\xef\xb8\xa8\x85\x64\x81\x05\xc9\x92\x5e\xcb\x1e\x73\x77\x76\xcf\x02\xcb\x58\xf0\xf0\x9b\xb4\x97\xa7\x45\x8d\x1f\x95\xee\x5d\xff\x19\x6e\x2b\xfd\x43\x3b\x23\x9a\x1f\x42\xd6\x34\x44\x33\xc0\x54\x0d\x91\xab\x01\x5a\xf1\x87\x08\x5f\xb4\xb1\x36\xb4\x2c\x28\x78\x4b\x90\x40\x28\x45\xd9\x32\xda\x6e\x0c\xe0\x3f\x31\x0b\x34\x55\xb5\xce\x50\x30\xcb\x3e\xc6\x80\x49\x76\xc8\x82\xc6\xeb\xbf\xb7\x7d\x8c\x01\x07\x04\xba\xae\x65\x95\x1e\xa9\x52\x39\xec\x26\xbf\xbb\xdf\x63\x37\x8d\xbf\x17\xe7\x3c\x6e\x85\x6c\x19\xae\xc5\x9a\x26\x59\x67\x75\xe4\x6c\x6e\xca\x18\x27\xf8\x1c\x7f\x94\xce\xc6\x20\x5d\x81\x4f\xca\x9b\x35\x4e\xff\xe3\xe1\xdf\xac\x5b\xfe\x48\xad\x91\x66\xd5\xd7\x2f\xef\x7b\xda\x4e\xd5\x3d\x4d\x22\xb5\xde\xb9\x2b\x7f\x23\x69\x5b\x7a\xa7\x20\xb3\xcc\x98\x53\x50\xb6\x74\x49\x3e\x7a\xa2\xa9\x5e\x92\xbe\x78\x3a\xc0\x63\x6d\x94\xbb\x62\x17\x27\xb7\x3e\x66\xaa\x82\xb7\xb0\x04\x21\xa6\xb7\x97\xe3\x5b\x5c\xfc\xc4\xae\x5b\x3e\xbc\xdb\x9e\xee\x55\x9d\x97\x0b\x1f\xd0\x0e\x7c\xe2\xd0\xe7\xb3\x51\xd8\x8b\x6f\xaf\x7a\x39\x6e\xcb\xac\x67\xad\x31\x9d\x04\x7f\x03\x00\x00\xff\xff\x09\x09\xc3\x45\x20\x05\x00\x00")

func templateSelect_columnTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateSelect_columnTmpl,
		"template/select_column.tmpl",
	)
}

func templateSelect_columnTmpl() (*asset, error) {
	bytes, err := templateSelect_columnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/select_column.tmpl", size: 1312, mode: os.FileMode(420), modTime: time.Unix(1474694701, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateTableTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\x4d\x4b\x03\x31\x10\x86\xcf\x99\x5f\x31\x04\x0f\xed\xa1\xdb\xbb\xe0\x41\xf4\x22\x94\xa2\x54\xf1\x1c\xb3\xe3\x36\x34\x1f\xdb\x64\xd6\x22\x31\xff\x5d\x92\x16\x51\xdc\xdb\xc3\x4c\xde\x27\x2f\x33\x2a\x7d\x50\x03\x61\xce\xd8\x3d\x9e\x79\xab\x1c\x61\x29\x00\xc6\x8d\x21\x32\x2e\x40\xc8\xc4\xd1\xf8\x21\xc9\x33\xea\xe0\x3f\x24\x80\xc8\x19\xa3\xf2\x03\x61\x77\xdb\xf7\x86\x4d\xf0\xca\x5e\x24\x09\x57\xa5\x80\x90\xd5\x8b\xa5\xc8\xf6\x98\x7c\x8f\x6d\x3a\x18\xde\x4f\x6f\x9d\x0e\x6e\xed\x94\x3e\x10\xad\x87\xb0\x4a\x47\x6b\x95\x84\x25\xe4\x8c\x57\x5a\x39\xb2\xad\xc9\xf5\x0d\x76\x0d\xbe\x90\xc3\x5d\x1d\x37\xda\x84\x13\xc5\x6a\xe3\xcf\xb1\xd5\xff\x15\x29\x65\xf7\xb4\xc1\xc4\x71\xd2\x8c\x19\xc4\x69\x4f\x91\xb0\xf9\xbb\xd7\xca\x50\x00\xde\x27\xaf\x71\x4b\xa7\xda\xf0\x9f\xff\xd9\xb0\xbd\x78\x16\x4b\x9c\x12\xc5\x6a\xcc\x20\x8e\xb5\xcf\xcc\x6f\xb9\x80\x88\xc4\x53\xf4\x78\xac\xf6\x9c\x91\xc9\x8d\x56\x31\xa1\xdc\x91\x25\xcd\xb2\x5d\xe2\xef\xe6\x65\xec\x15\xd3\xdc\xe6\xc1\x27\x8a\xb3\x99\x7b\xb2\xf4\x93\xf9\x0e\x00\x00\xff\xff\xa2\x1a\xbc\xdb\xc0\x01\x00\x00")

func templateTableTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateTableTmpl,
		"template/table.tmpl",
	)
}

func templateTableTmpl() (*asset, error) {
	bytes, err := templateTableTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/table.tmpl", size: 448, mode: os.FileMode(420), modTime: time.Unix(1474696881, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateUpdateTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x55\x5d\x4f\xeb\x38\x10\x7d\xb6\x7f\xc5\xac\xc5\x4a\x89\x08\xfe\x01\x45\x7d\x60\xa1\x2b\x1e\xba\x88\x92\x22\x1e\x10\x5a\x85\x66\xca\x8d\xea\xe6\xc3\x76\xe8\x45\xbe\xfe\xef\x57\xb6\x13\x1a\x68\x0b\x08\xdd\xb7\xc6\x1e\xcf\x39\x73\xce\xcc\xd4\x18\xc8\x71\x59\x94\x08\xec\xb6\xce\x33\x8d\x0c\xac\x35\x06\x8e\x16\xd9\x1a\xc5\x55\xb6\x46\x18\x8d\x81\xfb\x1f\xbf\x40\x57\xe7\xee\xd8\xff\x9a\x56\x1b\x94\x60\x2d\x35\xe6\x04\x8e\x16\x55\xa9\xb4\x6c\x17\xba\x92\xee\x41\x2d\x8b\x52\x2f\x81\x5d\xe1\xe6\x6f\x95\xce\xa6\x0c\xa2\xdd\x1c\xf3\x42\x0b\x8c\xe1\xc4\x5a\xaa\x5f\x6a\x84\xb7\xb0\xd6\x06\x42\xe9\x6c\x0a\x21\x35\x18\x4a\x8c\xe9\xc8\x58\x9b\xce\xa6\x94\x28\xd4\xff\x65\x35\x51\x8d\x10\x19\x4f\xfd\x07\x25\xe7\x95\x68\xd7\xa5\x82\xfb\x07\xa5\x65\x51\x3e\x51\x4b\xe9\xb2\x2d\x17\x10\x35\x3b\x20\xe9\x6c\x1a\x43\x40\x8a\xe2\x0f\x28\x18\x4a\x24\xea\x56\x96\x87\x63\x0c\x25\x64\x4f\xfa\x11\x34\x09\x25\x1d\xd3\x11\x0c\xa9\x1a\x9b\x50\x62\x1d\x3d\x63\x40\x66\xe5\x13\x02\xef\xc9\x7b\x1b\x34\xae\x6b\x91\xe9\x57\x77\xc2\x25\x03\x1e\xae\xb1\xcc\x9d\x03\x87\x6a\x7b\x65\x16\xc3\xbc\x4a\x1b\x11\xc5\x10\x05\x45\x12\xb8\x7f\x28\x4a\x8d\x72\x99\x2d\xd0\xd8\x04\x50\xca\x4a\xc6\xae\xca\xe7\x4c\xba\xaf\x70\x12\x3e\x15\x0c\x62\x61\xec\x70\x78\xea\x2d\xe9\x80\x8c\xa5\xa4\x58\x82\x4e\xa0\x5a\x39\xfb\x15\x8f\xde\x73\xb9\xc0\x65\xd6\x0a\x1d\x28\x5d\x56\xd5\x0a\x65\x7c\xea\xc2\x9d\x6a\x8d\x27\x00\x63\xd0\x7c\x27\x2e\x6a\x62\x4a\x5c\x76\x17\xf1\xd7\x18\xca\x42\xf8\x37\xbd\x1d\x8c\xbd\x2b\xa6\x2b\x87\x12\x62\x9d\xb8\x4e\xf8\x4e\xd3\x04\xd4\xb3\x0a\x50\xa3\x31\x34\x3c\x58\xc2\xe7\x55\x27\x94\x53\x88\xee\x81\xfa\x14\xc9\x52\xb2\xf9\x81\x12\x55\x02\x9b\x37\x08\xfe\x94\x77\xe2\x7f\x33\x35\x25\x4d\x8b\xf2\xc5\x25\x64\xb7\xd7\x17\x67\xf3\x09\x0c\xa6\x00\xd2\xc9\x9c\xc1\x31\x6c\xab\xf4\x30\x81\x8e\x43\x62\x2c\x48\xec\x73\x1c\x8f\x81\xc1\xdd\xe5\xe4\x66\xe2\xde\x84\xa0\x80\xd1\x11\xe9\xc2\x80\x9d\xb2\x04\xb2\xba\xc6\x32\x8f\xbc\x68\x9b\x67\xc5\x39\x8f\x13\xc7\x3c\x34\xec\x09\x14\x4b\xe0\x97\x99\xba\x5e\x6d\x9b\x50\xed\x36\xc7\x77\xc6\x6b\xb0\x4d\xac\x8d\x62\xde\x67\xe0\x77\x8e\xb2\x83\xb8\x5e\x85\x72\x0f\xac\x15\xf7\x4c\xf1\x37\x81\xff\x16\x28\xf2\x9e\xd3\x47\x2b\x61\x30\x36\x93\x9f\xb8\x88\xf2\xc7\x6e\x68\x2f\xfe\x89\x21\xba\x7f\xd8\xa9\x70\x38\x3e\x5e\xc0\x04\x32\xf9\x34\xec\x83\xcf\x3b\xa0\x2c\xc4\xb6\x99\xfe\xef\xe7\x21\x7f\xe4\x9e\xc2\x20\xab\x73\xe1\xab\x79\x9a\x26\xc0\xef\xd9\x4a\x03\xcb\x1b\x9e\xa2\xc0\x85\x8e\x62\x7e\x26\x44\x94\x3f\x3a\x75\x9c\xbf\x28\x14\x7e\x71\xbf\xec\x11\x4a\x35\x82\xdf\xa0\x6a\x85\xfe\xe3\xfa\x74\x67\x87\xd4\xe9\xd8\x87\xe5\xb8\xff\xbf\x65\xcf\x3a\xda\x2e\x39\x87\xbb\xbb\x87\x3e\xa8\xfe\xf0\x5d\x5f\xba\xe7\xd4\x53\xfa\x1d\x00\x00\xff\xff\x93\x1a\xd5\x0c\x75\x07\x00\x00")

func templateUpdateTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateUpdateTmpl,
		"template/update.tmpl",
	)
}

func templateUpdateTmpl() (*asset, error) {
	bytes, err := templateUpdateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/update.tmpl", size: 1909, mode: os.FileMode(420), modTime: time.Unix(1474701408, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateUpdate_columnTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x52\xb1\x6e\x83\x30\x14\x9c\xf1\x57\x9c\x50\x07\x90\x90\x95\x19\x89\x29\xca\x96\x36\xaa\x92\xb6\x43\x94\xc1\x2d\x2f\x2a\x92\x01\x63\x0c\x49\xeb\xf8\xdf\x2b\x43\x9b\x14\xb5\x52\xd3\x09\xfc\xfc\xee\xde\x9d\xef\x59\x8b\x9c\xf6\x45\x45\x08\x1f\x54\x2e\x0c\xcd\x6b\xd9\x95\x55\x08\xe7\xac\xc5\x4d\x5b\x0a\x29\x37\xe2\x59\xd2\x9d\x28\x09\x69\x06\x7e\x39\x9d\x60\xea\xb9\x28\x49\x0e\x7f\xcb\xfa\x40\x1a\xce\xb1\x7d\x57\xbd\x20\x6a\xf0\x0b\xde\xb9\x71\xc8\xfa\x7e\x19\x63\x4d\xc6\x5a\xf0\x1f\x54\x9b\xc2\x48\xdf\x1a\xf5\x9e\x82\x6f\xde\xd4\x17\x38\xfe\x83\x13\x96\x05\x0d\x6f\xc9\xdc\x0a\xb5\x0d\xcf\xe4\xce\x85\x3b\x64\xe8\x59\xa0\xc9\x74\xba\x42\xc3\x1c\xbb\x5a\xe6\xd3\x2b\x69\xfa\xa7\xd0\x04\x74\x54\xba\x05\xe7\xbc\x6d\xa4\x14\x7c\xa5\x48\x0b\x53\xeb\x6b\x1c\xf4\x42\xa3\x56\x98\x02\x59\x50\xec\x21\xa9\x8a\x06\xe2\x18\x59\x86\x99\x6f\x0e\x6a\x85\xec\xdc\xbb\x68\x3a\x21\x59\xe0\x40\xb2\xa5\xcb\xf5\x80\xd9\xce\x76\x2c\x70\x8c\x05\x07\x6f\xc8\x47\x39\xa2\x16\x47\xa5\x27\xf2\x4f\xf0\xa5\xe2\x9d\xbe\x59\xb4\x8f\x42\x76\x94\xa2\x4f\xb0\x52\x29\x6a\x95\x60\x5c\x94\x14\x93\x77\x76\x3e\x80\x71\x40\x06\xa1\x14\x55\x79\xf4\x59\x48\x30\x7c\xe2\x69\x0a\xd6\x82\xaa\xdc\xaf\xcd\x47\x00\x00\x00\xff\xff\xc5\xca\xb5\x43\x8a\x02\x00\x00")

func templateUpdate_columnTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateUpdate_columnTmpl,
		"template/update_column.tmpl",
	)
}

func templateUpdate_columnTmpl() (*asset, error) {
	bytes, err := templateUpdate_columnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/update_column.tmpl", size: 650, mode: os.FileMode(420), modTime: time.Unix(1474694701, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/delete.tmpl": templateDeleteTmpl,
	"template/delete_column.tmpl": templateDelete_columnTmpl,
	"template/insert.tmpl": templateInsertTmpl,
	"template/insert_column.tmpl": templateInsert_columnTmpl,
	"template/select.tmpl": templateSelectTmpl,
	"template/select_column.tmpl": templateSelect_columnTmpl,
	"template/table.tmpl": templateTableTmpl,
	"template/update.tmpl": templateUpdateTmpl,
	"template/update_column.tmpl": templateUpdate_columnTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"delete.tmpl": &bintree{templateDeleteTmpl, map[string]*bintree{}},
		"delete_column.tmpl": &bintree{templateDelete_columnTmpl, map[string]*bintree{}},
		"insert.tmpl": &bintree{templateInsertTmpl, map[string]*bintree{}},
		"insert_column.tmpl": &bintree{templateInsert_columnTmpl, map[string]*bintree{}},
		"select.tmpl": &bintree{templateSelectTmpl, map[string]*bintree{}},
		"select_column.tmpl": &bintree{templateSelect_columnTmpl, map[string]*bintree{}},
		"table.tmpl": &bintree{templateTableTmpl, map[string]*bintree{}},
		"update.tmpl": &bintree{templateUpdateTmpl, map[string]*bintree{}},
		"update_column.tmpl": &bintree{templateUpdate_columnTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

