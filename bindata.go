// Code generated by go-bindata.
// sources:
// template/delete.tmpl
// template/delete_column.tmpl
// template/insert.tmpl
// template/insert_column.tmpl
// template/select.tmpl
// template/select_column.tmpl
// template/table.tmpl
// template/update.tmpl
// template/update_column.tmpl
// DO NOT EDIT!

package sqlla

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateDeleteTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x93\xd1\x6e\xd3\x30\x14\x86\xaf\xe3\xa7\x38\x58\x20\x25\x5a\xea\x07\x00\xf5\x86\x35\xd3\x2e\xc2\x58\x9b\x22\x2e\x10\x17\x59\x72\x52\xac\xb9\x4e\x63\x3b\x8c\xc9\xf3\xbb\x23\xdb\x69\x1b\x98\x8a\xb8\x8b\x8e\xcf\xf9\xfe\xdf\xbf\x4f\xac\x85\x16\x3b\x2e\x11\xe8\x0a\x05\x1a\xa4\xe0\x1c\xb1\x76\x01\x6f\x9b\x7a\x8f\xe2\xae\xde\x23\xbc\x5f\x02\x0b\x1f\x2f\x60\xfa\x6b\x5f\x86\x17\xf8\x22\x0d\x37\x02\x61\x71\xea\xef\xa5\x36\x6a\x6c\x4c\xaf\xfc\xc4\x41\x71\x69\x3a\xa0\x77\xf8\xf4\x4e\x57\xeb\x92\x42\xfa\x1a\xb2\xf5\x88\x2c\x30\xcc\xf3\x01\xc1\xda\xb9\xae\x73\xd1\x53\xb5\x2e\x21\xa2\xc1\x92\xe4\xef\x9e\x6a\x5d\x12\x47\x48\x37\xca\x06\xd2\xe1\x15\xa2\x5a\x97\x19\x44\x4e\x9a\xfd\x43\xc0\x92\x44\xa1\x19\x95\xbc\xdc\x63\x49\x92\x0c\x39\x49\x9c\xd7\xb3\x16\x54\x2d\x77\x08\xec\xba\x17\xe3\x5e\x6a\x70\xce\x5a\x30\xb8\x3f\x88\xda\x9c\xf2\x8c\x87\x14\x58\x3c\x46\xd9\xfa\x80\x2f\x99\x3d\x49\x65\xb0\xed\xab\x41\xa4\x19\xa4\xda\x28\x2e\x77\x39\x7c\xfb\xce\xa5\x41\xd5\xd5\x0d\x5a\x97\x03\x2a\xd5\xab\xcc\xdb\x7e\xfa\x81\x0a\x75\x0e\x3f\x75\xa8\xfa\xf0\x07\x16\x8a\x6c\x82\x90\x84\x77\xe1\xe8\xcd\x12\x24\x17\x7e\xe8\x78\x59\x4a\x73\x5f\x0a\x93\xfe\x66\x24\x19\x46\x54\xcf\x1e\x42\x57\x45\x59\x6c\x0b\xb8\xd9\x7c\xfe\xe4\x9d\xb2\xc9\x24\x0d\xb8\xa8\xea\x89\x94\x06\x60\x9c\xbb\x5a\x02\x85\xaf\xb7\xc5\xa6\xa0\x70\x35\x35\x45\xee\x24\x38\xb5\x01\xfd\x40\xa3\x65\xc9\x45\xcc\x73\x01\xbc\x03\x76\x5b\xeb\xfb\xc7\x73\x46\x3a\x28\x57\xe1\xf5\x27\xfd\xd3\x73\xb6\x0f\xa0\x07\x21\x6a\xb6\xfa\xe8\x73\x1a\x04\xdb\xa0\x1e\x85\x99\x87\x13\xe4\x72\xa8\xd5\xee\x9c\x4e\x48\x7d\xb6\xad\xce\xa5\x19\x3b\xae\x08\xf3\x7a\xf7\x8f\xf1\xdd\x2e\x6c\xac\x9f\xd0\x7f\x36\xde\x70\x14\xed\xd1\xe0\x7f\xe4\x3e\xcf\xfc\x58\x6b\x1f\x58\xf1\x0b\x9b\x74\xe6\x99\x31\x96\x91\xf8\x83\x4d\xab\x73\x5e\xa2\xdf\x01\x00\x00\xff\xff\xf6\x40\x0d\x3d\xbc\x03\x00\x00")

func templateDeleteTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateDeleteTmpl,
		"template/delete.tmpl",
	)
}

func templateDeleteTmpl() (*asset, error) {
	bytes, err := templateDeleteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/delete.tmpl", size: 956, mode: os.FileMode(420), modTime: time.Unix(1474802274, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateDelete_columnTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x91\xc1\x4b\xc3\x30\x18\xc5\xcf\xc9\x5f\xf1\x28\x1e\x5a\x28\x61\xe7\x42\x4f\x73\x37\x71\x88\xd3\x8b\x78\x88\xee\x1b\x16\xbe\xa6\x69\x9a\xce\x69\x9a\xff\x5d\xda\xce\xcd\xa1\xe0\xa9\xf4\x7b\xdf\xef\xbd\xe4\x25\x04\x6c\x69\x57\x19\x42\x72\x4d\x4c\x9e\x96\x0d\xf7\xb5\x49\x10\x63\x08\xb8\xea\x6a\xcd\xbc\xd1\x2f\x4c\xb7\xba\x26\x14\x25\xd4\xf9\x6f\x80\x6f\x96\xba\x26\xc6\x80\x07\xe3\x2b\xcf\x84\x18\xe5\xae\x37\xaf\x48\x5b\xfc\xc1\xc7\x38\x87\xdc\xdf\xdd\x64\xa3\xae\x7e\xf9\x6c\x8e\x2e\xe9\x7e\xd2\x37\x1f\xf6\x9b\xcc\x41\x07\xeb\x3a\x28\xa5\xba\x96\x59\xab\xb5\x25\xa7\x7d\xe3\xb2\x7f\x92\x10\xa4\xd8\x6b\x87\xc6\xe2\x12\x94\xa2\xda\x81\xc9\xa4\x93\x71\x86\xb2\xc4\x62\x5c\x16\x8d\x45\x79\xda\x5d\xb5\xbd\x66\x29\x22\x88\x3b\x3a\xcb\x13\xf3\xb4\x78\x96\x22\x4a\x29\xde\xdf\xc8\x4d\xf5\xcc\xd4\xea\x60\xdd\xc5\xf1\x07\x8c\xa3\xea\x93\x7e\x5c\x31\x3c\x6a\xee\xa9\xc0\x3e\xc7\xda\x16\x68\x6c\x8e\xb9\xfc\x02\xc9\xa9\x9b\x18\x93\x28\x45\xab\xe6\x80\x12\xda\x5a\x32\xdb\xf4\x38\xc8\x31\x7d\x32\x29\x1c\xf9\xde\x19\xb4\x32\x4a\x19\x02\xc8\x6c\xc7\xa7\xf8\x0a\x00\x00\xff\xff\x5f\x4d\xfe\x90\xde\x01\x00\x00")

func templateDelete_columnTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateDelete_columnTmpl,
		"template/delete_column.tmpl",
	)
}

func templateDelete_columnTmpl() (*asset, error) {
	bytes, err := templateDelete_columnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/delete_column.tmpl", size: 478, mode: os.FileMode(420), modTime: time.Unix(1474802274, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateInsertTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x55\xdd\x6e\xdb\x2e\x14\xbf\x86\xa7\x38\x7f\xeb\x3f\xc9\xa8\x29\x0f\x90\x2a\x37\x6b\x2b\x35\x52\x96\x35\x75\x76\x55\xf5\xc2\x8d\x8f\x23\x2b\x04\xc7\x80\xbb\x55\x94\x77\x9f\x30\x8e\xc7\xf2\xb5\x49\xbb\x0b\xe6\x70\xce\xef\x0b\x62\x2d\x14\x58\x56\x12\x21\x99\x4a\x8d\xca\x24\xe0\x1c\xb5\xf6\x1a\xfe\x5f\xe5\x5b\x14\xf3\x7c\x8b\x30\x9e\x00\xef\x7e\x7c\x80\xa9\x6f\xfd\x67\xf8\x80\x6f\xd2\x54\x46\x20\x5c\x0f\xf5\xb5\xd4\x46\xb5\x2b\x53\x2b\x7f\x62\xa7\x2a\x69\x4a\x48\xe6\xf8\xfd\x93\xce\x16\xb3\x04\xd2\x83\x26\xac\x3b\x6b\xde\x77\x08\xd6\xc6\xf3\x9c\x0b\x58\xb2\xc5\x0c\x42\x4b\xb0\x94\x1c\xd6\x64\x8b\x19\x25\x1a\xcd\x97\x7c\x47\x74\x23\x44\xce\xb3\x6e\x41\xc9\x6d\x2d\xda\xad\xd4\xf0\xfc\xa2\x8d\xaa\xe4\x9a\x3a\x4a\xcb\x56\xae\x20\x6d\x8e\x26\x65\x8b\x19\x83\x30\x2e\x65\x17\x70\x58\x4a\x14\x9a\x56\xc9\xf3\x35\x96\x92\x53\x20\xc7\xd0\x8c\x28\xe9\x91\x8e\x21\x86\x6a\xdd\x88\x12\xe7\xe1\x59\x0b\x2a\x97\x6b\x04\xbe\x07\xef\x9c\xb5\x60\x70\xbb\x13\xb9\x19\xdc\x09\x9b\x09\xf0\xb0\x8d\xb2\xf0\x76\x9d\xe3\x36\x20\x63\xb0\xac\xb3\x46\xa4\x0c\xd2\xa0\xc8\x08\x9e\x5f\x2a\x69\x50\x95\xf9\x0a\xad\x1b\x01\x2a\x55\x2b\xe6\x59\xbe\xe5\xca\xaf\xc2\x97\xb0\xd4\x10\xd5\xc2\xc4\xcf\xe1\x59\xe7\x4b\x3f\xc8\x3a\x4a\xaa\x12\xcc\x08\xea\x8d\xf7\x5e\xf3\xf4\x10\xcb\x1d\x96\x79\x2b\x4c\x80\xf4\x50\xd7\x1b\x54\xec\xc6\x97\x7b\xd5\x9a\x0e\x00\x4c\xc0\xf0\xa3\xba\xb4\x61\x94\xf8\xee\xbe\xe2\xbf\x09\xc8\x4a\x74\x67\xf6\x76\x24\xc9\x01\x99\x9e\x0e\x25\xc4\x79\x71\x49\xa3\x47\xf0\xa6\xc3\x84\xf1\x04\x1a\x1e\x9c\xe0\xcb\xba\xd7\xc7\x0b\x43\x4f\x4c\xf8\xe3\x00\x47\x29\x69\x5a\x54\xef\xbe\x6f\x32\x9d\x67\xf7\x4f\x4b\x98\xce\x97\x5f\x3b\x85\x7a\xe2\x90\xc0\x15\x34\x9a\x0e\xf9\x09\x27\xae\x20\xb9\x49\x02\x30\x59\x89\x3e\x02\x55\x09\xfc\x21\xd7\x8f\x9b\xee\x66\xfc\x85\xad\xf7\x3f\x70\x95\x16\xaf\x7d\xa8\xee\x3e\x33\x48\x8f\xcc\x89\xcc\xf5\xf7\x14\x85\xc6\x7f\x68\xaf\x1b\xc1\x9f\x50\xb7\xc2\x1c\xf6\x0d\x59\x0c\x82\x8c\x20\x57\xeb\x58\xf3\x3e\x7f\xa7\x64\x3e\xe2\x4d\xa2\x9b\x76\x98\xb3\xbd\xb5\x03\x93\xb8\x5e\x56\xe2\xb7\xfd\x1e\x91\xf3\xd2\x0f\x88\x3d\x9e\xe2\x95\x77\xd4\x22\xac\x9c\x73\x46\x4f\x60\x39\x1b\x8b\xf3\xe0\xfc\xa9\x62\x98\x15\x46\xf3\x59\xae\xfb\x50\x4f\x8b\x8b\x71\xbb\xd8\x37\x7e\x82\xa2\xe7\xd6\xb9\x94\xf1\x0c\x05\xae\x4c\xca\xf8\xe3\x26\x3c\x13\x69\x55\x30\x9e\x55\x72\x2d\x30\x2d\x5e\x3b\x76\x91\xfd\xfb\x5e\x91\x34\x34\x96\xcd\xd1\xd3\x4f\xf3\x89\x8b\xfc\xeb\x79\xf0\x44\x8e\x6f\xf0\x85\x84\x9d\xdf\xdb\xc7\x8b\xfa\xbf\x97\x3d\xa8\x9f\x01\x00\x00\xff\xff\x96\x1f\xc2\x54\xaf\x06\x00\x00")

func templateInsertTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateInsertTmpl,
		"template/insert.tmpl",
	)
}

func templateInsertTmpl() (*asset, error) {
	bytes, err := templateInsertTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/insert.tmpl", size: 1711, mode: os.FileMode(420), modTime: time.Unix(1474804672, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateInsert_columnTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\xce\xbb\x6a\xc4\x30\x10\x85\xe1\xda\x7a\x8a\x83\x48\x61\x37\x7a\x80\x80\x2b\x57\x81\x24\x10\xe2\xa4\x09\x29\xb4\xeb\x31\x18\x24\xf9\x26\x19\x96\xf1\xbc\xfb\x62\xf6\x56\xec\xc2\x96\x53\xfc\xdf\x1c\x66\x34\xd4\x76\x81\xa0\xdf\xc2\x4c\x53\xac\x7a\x97\x7c\xd0\x10\x61\xc6\xcb\xec\xad\x73\xb5\xdd\x39\xfa\xb4\x9e\xf0\x5a\xc2\xdc\xae\x15\xb1\xaf\xac\x27\x87\x15\x3f\x21\x76\xd1\x11\x44\x54\x9b\xc2\x1e\xf9\x88\x07\xbd\xc8\xe9\xc9\xf7\xd7\x7b\x81\x5f\xeb\x12\x31\xc3\xdc\x61\xf5\x99\xca\x97\x0d\x31\xf5\x61\xb8\xe4\xc5\x13\x15\xac\xb2\xd1\xcc\x14\x3f\xec\xf0\xa7\xaf\xb8\x88\xfe\x47\x89\x45\x65\x13\xc5\x34\x05\x8c\x4a\x94\x62\x06\x85\x66\x9b\x7c\x0c\x00\x00\xff\xff\x30\xe2\x3a\x61\x06\x01\x00\x00")

func templateInsert_columnTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateInsert_columnTmpl,
		"template/insert_column.tmpl",
	)
}

func templateInsert_columnTmpl() (*asset, error) {
	bytes, err := templateInsert_columnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/insert_column.tmpl", size: 262, mode: os.FileMode(420), modTime: time.Unix(1474802274, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateSelectTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x55\x51\x6f\xdb\x36\x10\x7e\x16\x7f\xc5\x8d\xd8\x0a\xa9\x51\x89\x0c\x18\xf6\xd0\xc1\x0f\x5d\x96\xa0\x1d\xdc\xac\x8e\x53\xec\x21\xc8\x83\x6a\xd1\x1e\x11\x9a\xb4\x48\x3a\x6a\xc1\xea\xbf\x0f\x47\x52\xb6\x5c\xa5\x8e\x5f\xfa\x12\xc4\xe2\xdd\xf7\x7d\x77\xf7\x1d\xe9\x3d\xd4\x7c\x29\x14\x07\x3a\xe7\x92\x2f\x1c\x85\xae\x23\xde\xbf\x82\x9f\x17\xd5\x9a\xcb\xeb\x6a\xcd\xe1\xf5\x04\x58\xf8\xe7\x2b\x38\x7d\x81\x9f\xe1\x2b\x7c\x54\x4e\x38\xc9\xe1\xd5\x2e\x5e\x2b\xeb\xcc\x76\xe1\xb4\xc1\x8c\x8d\x11\xca\x2d\x81\x5e\xf3\xf6\x17\x3b\x9f\x4d\x29\xe4\x63\x90\x5b\x84\x28\x02\xc6\x63\x65\xc0\xfb\x21\x6d\xd7\xbd\x91\xf2\x42\xcb\xed\x5a\x59\x98\xc0\xdd\xbd\x75\x46\xa8\x95\x27\x99\xf7\x60\x2a\xb5\xe2\xc0\xfa\xe3\xae\xa3\xde\x27\x95\x5d\x47\x4b\xef\x81\xab\x1a\x6b\xe9\x08\x71\x5f\x36\x7c\x84\x1d\xcb\x9d\xcf\xa6\x10\x55\x43\xc4\x3d\x8c\x99\x4d\x49\xd6\x53\xf4\xfc\x24\xd3\xa6\xe6\x06\x00\xfa\xdf\x52\xac\x85\x03\x80\x97\x5b\xa1\xdc\xef\xbf\x21\xe5\x72\xab\x16\x90\x37\x63\xd6\xd9\xb4\x80\x48\x9d\x17\x47\x34\x79\x92\x19\xee\xb6\x46\x7d\x3f\xc6\x93\x2c\x6b\x4a\x92\x8d\x54\xef\xbb\x86\xa7\x94\xe2\x5f\x25\x64\x49\xb2\xee\xa8\xb4\x1e\xb8\x80\x29\x16\x94\x4b\x88\xf5\x3c\xa3\xb3\x61\xb1\xfe\x09\xbc\x90\x3b\xd5\x0d\x32\x3d\x35\x26\xef\xc1\xf1\xf5\x46\x56\x6e\x67\xb9\x78\x48\x81\xc5\xe3\x34\xb7\x13\x64\xde\xea\x79\x23\xf3\x02\xf2\x38\x88\x12\xee\xee\x85\x72\xdc\x2c\xab\x05\xf7\x5d\x09\xdc\x18\x6d\x0a\xd4\xb8\x48\xfc\xaf\x27\x69\x68\x96\xfd\xad\x85\xca\x9b\x5e\x59\x09\xb4\x04\x5a\x90\xac\xfd\x8f\x1b\x6e\x4b\x78\xb4\x21\x1f\x33\x1a\x16\x3e\xb2\x44\x47\x32\xb1\x0c\x47\x3f\x4d\x40\x09\x89\xf0\x7d\xd5\x94\x96\xf8\x29\x64\x62\xb7\x49\xd6\x6c\xb9\xf9\x82\x20\x74\x7e\x39\xbd\xbc\xb8\x05\x0a\x67\xd0\xab\x39\x03\x0a\x57\x37\xff\xbc\x87\xa1\x75\x03\x7c\x54\x81\x0c\x94\x06\x82\x88\x73\x36\x01\x0a\xff\xbe\xbd\xbc\xb9\x44\x98\x18\x84\x3c\xfb\xe3\x86\x05\x73\x06\x90\x7e\x30\x03\x9d\x03\x98\xe9\xbb\xf7\xef\xa2\x1c\xeb\xcc\x42\xab\x47\x76\xa5\xcd\xba\x72\x1f\x85\x72\xf9\xcb\x94\x5b\xc2\xaf\xe7\x45\xac\xa4\x1f\x6c\x44\x00\xfa\x07\x8d\x4d\x52\x42\xa6\x59\x8b\x25\xb0\xb7\x95\xfd\xf0\x10\xf6\x39\xce\xcf\x86\xda\xe6\x61\xc3\x52\x85\x03\xff\xe7\x47\x86\xfb\xcd\x06\x0c\x2e\x97\xae\xcb\x0b\xd6\x63\x30\xc4\xff\xf0\x10\xc7\xf8\x9d\x0b\x06\x33\xec\x61\xe0\x95\xe0\xb2\xee\x05\x11\xbc\xc1\x82\xef\x50\xf8\x29\xce\x9b\x0b\xb5\x92\x3c\xaf\x3f\x81\x6d\xa4\xac\xd8\x5f\x7f\xc6\x62\x0e\x2b\x1d\x3a\x70\xe7\x34\x98\x1c\xb9\xe6\xd2\x24\x4b\xa8\xcc\x6a\x68\xc0\xe7\xad\x37\x22\x4f\x0b\x90\x86\xa7\x5b\x04\xaa\x3f\xb1\x19\xe2\xdf\xe8\x36\x1f\x10\x31\xc6\x8a\xfd\x80\xd9\x7c\x51\xa9\xdc\xe8\xb6\x38\xf1\xb6\x78\x23\xe5\x37\x9d\xb8\xbb\x3f\xda\x0b\x13\x16\x71\x5d\x3d\xf0\xa7\x23\xcf\x93\xed\x7e\x74\xcf\x0e\x57\xd5\xe8\x76\x9f\xde\x77\x6a\xdc\xa6\x93\xd0\xb2\x9a\x2f\xb9\x01\x84\x64\x17\x52\x5b\x8e\x3a\x96\x3a\x7d\xb9\xe6\x9f\xc3\xed\x8f\xb9\x03\xc1\x7d\xdf\x6d\x41\xb2\x27\x68\xc6\x3c\x48\x84\xcd\x9c\x40\xb5\xd9\x70\x55\xe7\xc6\x96\x60\xc2\xbe\xf6\xc1\x66\xbf\xa1\xa7\xd8\x1a\x15\xd8\x34\x49\xfc\xa1\xb8\x79\xce\xd8\xf8\x6e\xa3\xbd\x46\x41\x24\x4b\x95\xd9\x58\x59\x7c\xa9\x46\x0f\xc2\x0b\xa3\x5b\xdc\xcd\x5c\xa8\x9a\x7f\x8e\xf7\xa0\x85\xf3\x02\xc1\x84\x5a\x21\x5b\xcc\x4c\xef\x42\xb6\xb7\xaa\xd1\x6d\xec\xc4\x6e\x7f\xbb\x8e\xfc\x1f\x00\x00\xff\xff\x53\x0c\xd1\xff\xd2\x08\x00\x00")

func templateSelectTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateSelectTmpl,
		"template/select.tmpl",
	)
}

func templateSelectTmpl() (*asset, error) {
	bytes, err := templateSelectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/select.tmpl", size: 2258, mode: os.FileMode(420), modTime: time.Unix(1474804053, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateSelect_columnTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x93\x5f\x6f\xda\x30\x14\xc5\x9f\xe3\x4f\x71\x14\xed\x21\x51\xa9\xd5\x49\xd3\x1e\x90\xf2\xd0\x52\x1e\x90\xd6\xd1\x15\x36\x69\xaa\xfa\xe0\xc1\x45\x8b\x30\x8e\xe3\xfc\x59\x3b\xe3\xef\x3e\x39\x21\x2d\x61\x48\x65\x5a\x9f\x20\xbe\x3e\x3e\xbe\xbf\xe3\x6b\x2d\x96\xb4\x4a\x15\x21\x9c\x91\xa4\x45\x39\xca\x64\xb5\x51\x21\x9c\xb3\x16\xef\x8a\x8d\x90\x72\x2e\x7e\x48\xfa\x2c\x36\x84\x61\x02\xfe\xf2\xb5\x45\x99\x8d\xc4\x86\x24\xb6\xf8\xaa\xca\xb4\x94\x04\xe7\xd8\xaa\x52\x0b\x44\x39\x8e\xe8\x9d\x6b\x4d\x66\x5f\x3e\xc5\xbe\xce\xff\x3a\x67\xbe\x3b\x25\xaa\x9b\xfa\xfc\x49\x77\xca\x01\xe8\x51\x9b\x02\x9c\xf3\x22\x97\x52\xf0\xa9\x26\x23\xca\xcc\xc4\xaf\x38\xc1\xb2\xa0\x16\x06\x99\x46\x5f\xc8\x82\x74\x05\x49\x2a\x6a\x0e\x8e\x91\x24\xb8\xf0\x9b\x83\x4c\x23\x79\xde\x3b\xce\x2b\x21\x59\xe0\x40\xb2\xa0\x97\x72\xa3\xb9\xbf\x78\x60\x81\x63\x2c\xf8\xf5\x93\x4c\x83\xa7\x55\x8d\x1f\xb5\xe9\x5d\x7f\x0b\xbf\x94\xfe\xa6\xbd\x16\xed\x37\x21\x2b\x1a\xa2\x1e\x60\xaa\x87\xc8\xf4\x00\x2d\xfc\x21\xc2\x67\x36\xce\x85\x8e\x05\x39\x6f\x0d\x12\x08\xad\x49\x2d\xa3\xdd\xc2\x00\xcd\x4f\xcc\x02\x43\x65\x65\x14\x72\xe6\xd8\xdb\x04\x30\x51\xc7\x22\xa8\x1b\xfe\x07\xcb\xa7\x04\x70\x04\xd0\x4d\x25\xcb\xf4\x44\x4a\xc5\xb0\xeb\xfc\xfe\xe1\xc0\xdd\xd6\xcd\xbd\x38\xe7\x71\x0b\xb2\x75\xb8\x11\x6b\x9a\xa8\x2e\xea\xc8\xc7\x5c\x17\x31\xce\xf0\x3e\x7e\x2b\xce\xd6\x22\x5d\x81\x4f\x8a\xdb\x35\xce\xff\xe1\xe1\xdf\xae\x5b\xff\x48\xaf\x91\xaa\xf2\xe3\x87\xff\x7b\xda\x9e\xea\x01\x93\x48\xaf\xf7\xee\xca\x5f\x99\xb4\x9d\xbd\x27\xc8\x1c\xb3\xf6\x1c\xa4\x96\x7e\x92\x4f\xee\x68\x6a\x96\x64\xae\x9e\x8e\xf8\x38\x17\x65\xbe\xd8\x8d\x93\xff\x7f\x4a\x57\x39\x6f\x65\x09\x42\x4c\xef\xae\xc7\x77\xb8\xfa\x8e\xfd\xb4\x9a\xe1\xdd\xed\xe9\x5e\xd5\x65\xb1\x68\x06\xb4\x13\x9f\x79\xf5\xe5\x6c\x14\xf6\xc6\xb7\x57\xbd\x1e\xb7\x65\xd6\x8b\xd6\xda\x0e\xc1\x9f\x00\x00\x00\xff\xff\xea\x45\xa9\x39\x20\x05\x00\x00")

func templateSelect_columnTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateSelect_columnTmpl,
		"template/select_column.tmpl",
	)
}

func templateSelect_columnTmpl() (*asset, error) {
	bytes, err := templateSelect_columnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/select_column.tmpl", size: 1312, mode: os.FileMode(420), modTime: time.Unix(1474802274, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateTableTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\x31\x6b\xc3\x30\x10\x85\x67\xdd\xaf\x38\x44\x87\x64\x88\xb3\x17\x3a\x94\x76\x29\x84\xd0\x90\x86\xce\x17\xf9\xea\x98\xc8\xb2\x2d\x9d\x1b\x8a\xa2\xff\x5e\x2c\x87\xd2\x52\x6f\x8f\x7b\x7a\xdf\x3d\x5d\x47\xe6\x4c\x15\x63\x8c\x58\xbc\x4e\x7a\x4b\x0d\x63\x4a\x00\x75\xd3\xb5\x5e\x70\x01\x4a\x07\xf1\xb5\xab\x82\x9e\xa4\x69\xdd\xa7\x06\x50\xba\x24\xa1\x23\x05\x5e\x87\xde\x6a\x50\x31\xa2\x27\x57\x31\x16\x8f\x65\x59\x4b\xdd\x3a\xb2\x37\x68\xc0\x55\x4a\xa0\xf4\xb8\x07\x53\x9a\x1e\xb3\x2b\x31\x4f\xab\x5a\x4e\xc3\xb1\x30\x6d\xb3\x6e\xc8\x9c\x99\xd7\x55\xbb\x0a\xbd\xb5\xa4\x61\x09\x31\xe2\x9d\xa1\x86\x6d\x6e\x76\xff\x80\x45\x16\x57\x94\xf6\x69\x1c\xe3\x15\x0f\x4e\x6a\xb1\xb9\xb6\x7c\x75\xf9\x3b\xbf\x22\x29\xed\x77\x1b\x0c\xe2\x07\x23\x18\x41\x5d\x4e\xec\x19\x33\xbf\x78\x1f\x35\x24\x80\x8f\xc1\x19\xdc\xf2\x65\x6c\xf8\x8f\xff\x76\xa3\xef\x77\x9b\xc5\x72\x96\x1e\x41\xf5\x63\xb7\x19\x2f\x26\x50\x9e\x65\xf0\x0e\xfb\x71\x53\x8c\x28\xdc\x74\x96\x84\x51\xef\xd9\xb2\x11\x9d\xaf\xf2\xd7\x39\x74\x25\x09\xcf\x39\x2f\x2e\xb0\x9f\xcd\x3c\xb3\xe5\x9f\xcc\x77\x00\x00\x00\xff\xff\xe0\x7b\x72\x5e\xdc\x01\x00\x00")

func templateTableTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateTableTmpl,
		"template/table.tmpl",
	)
}

func templateTableTmpl() (*asset, error) {
	bytes, err := templateTableTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/table.tmpl", size: 476, mode: os.FileMode(420), modTime: time.Unix(1474804332, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateUpdateTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x55\xc1\x4e\xe3\x30\x10\x3d\xdb\x5f\x31\x6b\xb1\x52\x22\x82\x3f\xa0\xa8\x07\x16\xba\xe2\xd0\x45\x94\x14\x71\x40\x68\x15\x9a\x29\x1b\xd5\x75\x1a\xdb\xa5\x8b\x8c\xff\x7d\x65\x3b\xa5\x81\xb6\x80\xd0\xde\x1a\x7b\x3c\xef\xcd\x7b\x33\x53\x6b\xa1\xc4\x69\x25\x11\xd8\xf5\xa2\x2c\x0c\x32\x70\xce\x5a\x38\x98\x14\x73\x14\x17\xc5\x1c\xa1\xd7\x07\x1e\x7e\x3c\x83\xa9\x4f\xfd\x31\x3c\xc3\xb5\x34\x95\x11\x08\xce\x51\x6b\x8f\xe0\x60\x52\x4b\x6d\xd4\x72\x62\x6a\xe5\x1f\x2c\x54\x25\xcd\x14\xd8\x05\xae\xbe\xeb\x7c\x34\x64\x90\x6c\xe7\x18\xfb\x0c\x29\x1c\x39\x47\xcd\xd3\x02\xe1\x35\xac\x73\x91\x50\x3e\x1a\x42\x4c\x0d\x96\x92\xb7\x31\xf9\x68\x48\x89\x46\xf3\xab\x58\x10\xdd\x08\x51\xf0\x3c\x7c\x50\x72\x5a\x8b\xe5\x5c\x6a\xb8\xbd\xd3\x46\x55\xf2\x81\x3a\x4a\xa7\x4b\x39\x81\xa4\xd9\x42\xca\x47\xc3\x14\x22\x5c\x92\xbe\xc3\xc3\x52\xa2\xd0\x2c\x95\xdc\x1f\x63\x29\xd9\x45\xb2\x07\x4d\x46\x49\xcb\xb4\x07\x5d\xaa\xd6\x65\x94\x38\x4f\xcf\x5a\x50\x85\x7c\x40\xe0\x6b\xf2\xc1\x0b\x83\xf3\x85\x28\xcc\x8b\x45\xf1\x92\x01\x8f\xd7\x28\x4b\x6f\xc3\xbe\xda\x5e\x98\xa5\x30\xae\xf3\x46\x24\x29\x24\x51\x91\x0c\x6e\xef\x2a\x69\x50\x4d\x8b\x09\x5a\x97\x01\x2a\x55\xab\xd4\x57\xf9\x58\x28\xff\x15\x4f\xe2\xa7\x86\x4e\x2c\xf4\x3d\x0e\xcf\x83\x2f\x2d\x90\x75\x94\x54\x53\x30\x19\xd4\x33\xdf\x03\x9a\x27\x6f\xb9\x9c\xe1\xb4\x58\x0a\x13\x29\x9d\xd7\xf5\x0c\x55\x7a\xec\xc3\xbd\x6a\x4d\x20\x00\x7d\x30\x7c\x2b\x2e\x69\x52\x4a\x7c\x76\x1f\xf1\xad\x0f\xb2\x12\xe1\xcd\xda\x0e\xc6\xde\x14\xd3\x96\x43\x09\x71\x5e\x5c\x2f\x7c\xab\x69\x06\xfa\x51\x47\xa8\x5e\x1f\x1a\x1e\x2d\xe1\xe3\xba\x15\xca\x2b\x44\x77\x40\x7d\x88\xe4\x28\x59\xfd\x41\x85\x3a\x83\xd5\x2b\x84\x70\xca\x5b\xf1\xbf\x98\x9a\x92\x66\x89\xea\xc9\x27\x64\xd7\x97\x67\x27\xe3\x41\x30\xa0\xd5\x15\xf2\xc1\x98\xc1\x21\x6c\xaa\x0c\x30\x91\x8e\x47\x62\x2c\x4a\x1c\x72\x1c\xf6\x81\xc1\xcd\xf9\xe0\x6a\xe0\xdf\xc4\xa0\x88\xd1\x12\x69\xc3\x80\x1d\xb3\x0c\x8a\xc5\x02\x65\x99\x04\xd1\x56\x8f\x9a\x73\x9e\x66\x9e\x79\x6c\xd8\x23\xa8\xa6\xc0\xcf\x0b\x7d\x39\xdb\x34\xa1\xde\x6e\x8e\xaf\x8c\x57\x67\xa5\x38\x97\xa4\x7c\x9d\x81\xdf\x78\xca\x1e\xe2\x72\x16\xcb\xdd\xb3\x5b\xfc\x33\xcd\x5f\x05\xfe\xac\x50\x94\x6b\x4e\xef\xad\x84\xce\xd8\x0c\xfe\xe2\x24\x29\xef\xdb\xa1\x3d\xfb\x91\x42\x72\x7b\xb7\x55\x61\x77\x7c\x82\x80\x19\x14\xea\xa1\xdb\x07\x1f\x77\x80\xac\xc4\xa6\x99\x7e\xaf\xe7\xa1\xbc\xe7\x81\x42\x27\xab\x77\xe1\xb3\x79\x9a\x26\xc2\xef\x5a\x9d\x1b\xcb\x1b\x9e\xa3\xc0\x89\x49\x52\x7e\x22\x44\x52\xde\x7b\x75\xbc\xbf\x28\x34\x7e\x72\xbf\xec\x10\x4a\x37\x82\x5f\xa1\x5e\x0a\xf3\xdf\xf5\x69\xcf\xf6\xa9\xd3\xb2\x8f\xcb\x71\xf7\x1f\xcc\x8e\x75\xb4\x59\x72\x1e\x77\x7b\x0f\xbd\x53\xfd\xfe\xbb\x75\xe9\x81\xd3\x9a\xd2\xbf\x00\x00\x00\xff\xff\xeb\x93\xdb\xc2\x7a\x07\x00\x00")

func templateUpdateTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateUpdateTmpl,
		"template/update.tmpl",
	)
}

func templateUpdateTmpl() (*asset, error) {
	bytes, err := templateUpdateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/update.tmpl", size: 1914, mode: os.FileMode(420), modTime: time.Unix(1474802274, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateUpdate_columnTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x92\x41\x6b\xe3\x30\x10\x85\xcf\xd6\xaf\x78\x98\x3d\xd8\x60\x44\xce\x06\x9f\x42\x6e\xbb\x1b\x4a\x92\xf6\x10\x72\x50\xeb\x09\x35\xc8\xb2\x2c\xcb\x6e\x5a\x45\xff\xbd\x28\x4e\x93\x9a\x16\x9a\x9e\x84\x46\xf3\xbe\x99\xd1\x1b\xe7\x50\xd2\xbe\x52\x84\x78\xa3\x4b\x61\x69\xde\xc8\xbe\x56\x31\xbc\x77\x0e\x7f\xba\x5a\x48\xb9\x16\x8f\x92\xfe\x8b\x9a\x90\x17\xe0\xd7\xdb\x11\xb6\x99\x8b\x9a\x24\x8e\xd8\x28\x5b\x59\x49\xf0\x9e\xed\x7b\xf5\x84\xa4\xc5\x37\x7a\xef\xc7\x22\xab\xbb\xbf\x29\x56\x64\x9d\x03\xff\x82\x5a\x9f\x41\xc9\x10\x10\x7c\xfd\xaa\x3f\xc4\xe9\x0f\x4c\x38\x16\xb5\xbc\x23\xfb\x4f\xe8\x6d\x7c\x81\x7b\x1f\xef\x50\x60\x60\x91\x21\xdb\x1b\x85\x96\x79\x76\x73\x9b\x0f\xcf\x64\xe8\x97\x8d\x66\xa0\x83\x36\x1d\x38\xe7\x5d\x2b\xa5\xe0\x4b\x4d\x46\xd8\xc6\xdc\x32\xc1\x20\x0c\x1a\x8d\xa9\x90\x45\xd5\x1e\x92\x54\x72\x02\xa7\x28\x0a\xcc\x42\x72\xd4\x68\x14\x97\xdc\x45\xdb\x0b\xc9\x22\x0f\x92\x1d\x5d\x9f\x4f\x9a\xed\x6c\xc7\x22\xcf\x58\xf4\x12\x06\x0a\x56\x8e\xaa\xc5\x41\x9b\x49\xfb\x47\x84\x50\xf5\x46\x9f\x46\x74\xf7\x42\xf6\x94\x63\xc8\xb0\xd4\x39\x1a\x9d\x61\x5c\x94\x1c\x93\x7f\xf6\xc1\x80\xb1\x40\x01\xa1\x35\xa9\x32\x39\x07\x32\x9c\x8e\x74\xea\x82\x73\x20\x55\x86\xb5\x79\x0f\x00\x00\xff\xff\xf5\x51\xfc\xe7\x8a\x02\x00\x00")

func templateUpdate_columnTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateUpdate_columnTmpl,
		"template/update_column.tmpl",
	)
}

func templateUpdate_columnTmpl() (*asset, error) {
	bytes, err := templateUpdate_columnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/update_column.tmpl", size: 650, mode: os.FileMode(420), modTime: time.Unix(1474802274, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/delete.tmpl": templateDeleteTmpl,
	"template/delete_column.tmpl": templateDelete_columnTmpl,
	"template/insert.tmpl": templateInsertTmpl,
	"template/insert_column.tmpl": templateInsert_columnTmpl,
	"template/select.tmpl": templateSelectTmpl,
	"template/select_column.tmpl": templateSelect_columnTmpl,
	"template/table.tmpl": templateTableTmpl,
	"template/update.tmpl": templateUpdateTmpl,
	"template/update_column.tmpl": templateUpdate_columnTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"delete.tmpl": &bintree{templateDeleteTmpl, map[string]*bintree{}},
		"delete_column.tmpl": &bintree{templateDelete_columnTmpl, map[string]*bintree{}},
		"insert.tmpl": &bintree{templateInsertTmpl, map[string]*bintree{}},
		"insert_column.tmpl": &bintree{templateInsert_columnTmpl, map[string]*bintree{}},
		"select.tmpl": &bintree{templateSelectTmpl, map[string]*bintree{}},
		"select_column.tmpl": &bintree{templateSelect_columnTmpl, map[string]*bintree{}},
		"table.tmpl": &bintree{templateTableTmpl, map[string]*bintree{}},
		"update.tmpl": &bintree{templateUpdateTmpl, map[string]*bintree{}},
		"update_column.tmpl": &bintree{templateUpdate_columnTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

