// Code generated by go-bindata.
// sources:
// template/column.tmpl
// template/table.tmpl
// DO NOT EDIT!

package sqlla

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateColumnTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\x4f\x6b\xab\x40\x14\xc5\xd7\xce\xa7\x38\xc8\x5b\x28\x4f\x86\xac\x05\x17\xf9\xe3\x2e\x3c\x79\x49\x28\x94\xd2\xc5\xd4\xdc\xd0\xc0\xc4\x3f\xa3\x26\x0d\x76\xbe\x7b\xc7\x31\x26\x95\x06\x9a\x95\xd7\x39\xe7\xdc\xb9\xf7\xc7\xb4\x2d\xb6\xb4\xdb\x67\x04\x37\xcd\x65\x73\xc8\x5c\x68\x6d\x0e\xff\x54\x07\x21\xe5\x46\xbc\x49\xfa\x27\x0e\x84\x30\x02\xbf\xfd\x7d\xa2\xce\xe7\xa6\x90\xb6\x5a\xe6\x27\x52\x26\xc6\x76\x4d\x96\xc2\x2b\x71\x27\xaf\xf5\x9a\x24\xa5\xf5\xfa\xff\xd2\xef\x74\xfe\xa3\xcf\x66\x5f\xcb\xce\xe7\x1d\xad\xbe\x39\x17\x43\x32\x00\x7d\x14\xaa\x02\xe7\xbc\x2a\xa5\x14\x3c\x29\x48\x89\x3a\x57\xfe\x2f\x37\xa1\x65\xce\x51\x28\xe4\x05\xc6\x41\xe6\xec\x77\x90\x94\x79\xb6\xb1\x8f\x28\xc2\xa4\x33\x3b\xc6\x19\x5d\xbd\x71\xd9\x08\xc9\x1c\x0d\x92\x15\xdd\x64\x9b\x79\x99\xbc\x1a\x85\x31\xe7\xf4\x4e\xca\xe2\xe9\x53\xb1\x11\x47\xe3\xdf\x16\x6b\x9f\x84\x6c\x28\xc4\x31\x40\x52\x84\x66\xa8\x00\x73\x8b\x3c\x84\x7b\x25\xa2\xb5\xab\x99\x53\xf2\xbe\x6d\x04\x51\x14\x94\x6d\xbd\xcb\x41\x00\xfb\xf1\x99\xa3\xa8\x6e\x54\x86\x92\x99\x19\x1e\xc5\x9e\xa8\x2d\xa9\xd9\xf9\x0e\x7d\x43\x3d\xef\xc4\x61\xf5\xae\x7e\x04\x6e\xc9\xfb\x58\x04\x17\xc9\x6a\x11\xaf\x30\x7b\xc6\xf7\x5d\x2c\xe8\x8b\x67\x40\x34\xad\x52\x0b\x73\x08\xff\xed\xd2\xd3\xf5\xdc\x1d\xa1\x1e\xa9\x8b\xb8\x97\xd9\x68\x71\x73\x91\x61\xd3\x3d\xbc\xaf\x00\x00\x00\xff\xff\x22\xf9\xdc\x38\xc6\x02\x00\x00")

func templateColumnTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateColumnTmpl,
		"template/column.tmpl",
	)
}

func templateColumnTmpl() (*asset, error) {
	bytes, err := templateColumnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/column.tmpl", size: 710, mode: os.FileMode(420), modTime: time.Unix(1440318608, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templateTableTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x54\xdf\x6f\xd3\x30\x10\x7e\x8e\xff\x8a\xc3\x42\x28\xd9\x82\x37\x24\xc4\x03\x28\x0f\x68\x74\x62\xa8\x1b\xb0\x15\xf1\x80\x78\x08\x99\xdb\x59\x38\x71\xe2\x38\x2d\x53\xc8\xff\xce\x9d\x9d\x74\xad\xd4\x01\x52\x9b\xfa\xc7\xdd\x77\xdf\xf7\xdd\xa5\x75\x5e\xfc\xcc\x57\x12\xfa\x1e\xc4\xa7\xb0\xbe\xca\x4b\x09\xc3\xc0\x98\x2a\x6b\x63\x1d\xc4\x2c\xe2\xad\xb3\xaa\x5a\xb5\x3c\x2c\x0b\x53\xad\x39\xc3\xf5\x4a\xb9\xbb\xee\x87\x28\x4c\x79\x52\x62\xb2\x94\x27\x2b\xf3\xbc\x6d\xb4\xce\x39\x4b\x18\x62\x3e\x2d\x10\x4c\x7b\xc4\xd7\x19\x08\xbf\xf8\x0d\xce\x9c\xd1\xb1\x5f\xcd\xcd\x46\x5a\x2a\xe7\xee\x6b\x4f\x63\x27\x65\x18\x6e\x3e\xcf\x01\x0b\x76\x85\x83\x9e\x45\x9b\x3b\x69\x25\x7c\xfb\xee\x2b\x88\xd9\xaf\xda\x32\xa4\x79\x38\x51\x6a\x59\xb8\xfd\x74\xd2\xf8\x80\xcb\xa2\x33\xa3\xbb\xb2\x6a\x09\xd0\xcb\x63\x91\xb1\xb7\x48\x06\x60\xda\x6b\x55\x2a\x87\xfb\xa3\x4e\x55\xee\xd5\x4b\xaa\xb6\xec\xaa\x02\xae\xe4\x66\x0b\xb6\x2b\x67\xa1\x9c\x1e\xe1\xe3\x04\xba\x56\x5a\x62\x80\xa5\x1b\x92\x7f\x40\x5c\x3f\xb0\xc8\x4a\xd7\xd9\x0a\x9a\x2d\x7a\xdc\x1c\x0a\x4d\x20\x68\x42\xe0\xc7\xc5\xf6\x5b\xb8\x47\x63\x30\x24\x6a\x52\x7c\x4c\xb2\xe9\x80\xbc\xb1\x79\x85\x83\x20\x26\x57\x86\x81\xef\x18\xc6\x53\xdc\xc8\xea\x96\x3a\x15\x45\x03\xe5\x73\x4e\xcf\x4a\x69\xfc\x19\xfe\x4a\x7e\x2a\x9d\xc0\x9c\x0c\x8d\x35\x04\x3f\xff\xa1\xa4\x11\xc1\xff\x0c\x9e\xe9\x7d\x9b\x0e\xb1\xc5\x33\x27\xcb\x5a\xe7\x4e\x02\x2f\xfc\x31\x07\x11\x2e\x46\xe2\xff\x41\x70\x61\xc6\x4d\xa3\xd1\xe8\x38\x38\x94\xe2\x88\x20\x61\x69\x97\x79\x21\xfb\x21\x05\x69\xad\xb1\x09\x71\x2c\xc6\xfa\xd8\xde\xf1\x1d\x11\x1f\x8c\xaa\xe2\x66\x62\x96\x02\xc7\x4f\xc2\xa2\xb5\x0f\xda\x03\xa2\xee\xaf\x73\x0b\x7e\xae\xdb\xed\xd4\x2d\x8d\x05\x95\xc2\x86\xe2\x83\xcc\x46\x84\xd1\xa7\x56\x21\xe2\xda\x33\xa0\xeb\x8d\x40\xc2\x44\x15\x2f\xd4\xd2\x9f\x3e\xc9\x00\x7b\xe2\x43\x27\xcf\xb0\x53\x74\xe6\xb3\xa8\x7b\xf8\x45\x36\x19\xe4\x75\x8d\xce\xc4\x6b\x82\x14\x42\x24\x2c\xa0\x28\xc8\x32\x38\x0d\x08\x23\xb5\x63\x94\x47\x5b\x7c\xf3\x9d\xaa\x3a\x39\xa2\x3c\xdc\x72\x78\x7b\xf5\x0e\x9f\xc7\x14\x87\x1d\x8a\x9a\x4e\xda\x7b\xa2\xc8\x6f\x66\xf3\xd9\xd9\xc2\xdf\x4d\x6e\x1d\xe3\xee\xfc\xfa\xe3\x25\xec\x4c\x18\x7c\x7d\x3f\xbb\x9e\xf9\xb0\x09\x16\x75\xfb\x37\x92\x11\xab\x69\x1a\x76\xf4\x85\x1a\xbe\xfa\xfc\xe2\xf2\x22\xd4\x18\xff\x9f\xc4\xb9\xb1\x65\xee\xbe\xa0\xdd\xf1\xd1\x98\x9b\xc2\x8b\xd3\x24\xd0\x9b\xa6\x29\x20\x00\x7f\x83\x16\x91\x0f\x08\x8d\x03\xf6\x27\x00\x00\xff\xff\xba\xc0\x99\x60\x16\x05\x00\x00")

func templateTableTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateTableTmpl,
		"template/table.tmpl",
	)
}

func templateTableTmpl() (*asset, error) {
	bytes, err := templateTableTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/table.tmpl", size: 1302, mode: os.FileMode(420), modTime: time.Unix(1440318647, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/column.tmpl": templateColumnTmpl,
	"template/table.tmpl": templateTableTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"column.tmpl": &bintree{templateColumnTmpl, map[string]*bintree{
		}},
		"table.tmpl": &bintree{templateTableTmpl, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

