// Code generated by go-bindata.
// sources:
// template/select.tmpl
// template/select_column.tmpl
// template/table.tmpl
// template/update.tmpl
// template/update_column.tmpl
// DO NOT EDIT!

package sqlla

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateSelectTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x52\xdf\x6f\xd3\x30\x10\x7e\x8e\xff\x8a\xc3\x42\x28\x59\x23\x0b\x24\xc4\x03\xa8\x4f\x55\x27\x86\x32\x50\xd7\x21\x1e\x10\x0f\x51\x7a\x1d\x91\x1c\x7b\x71\x9d\x4d\x53\xf1\xff\xce\x9d\x5d\x6f\x45\x40\x41\xaa\xd2\xdc\xaf\xef\xfb\xee\xbb\xec\xf7\xb0\xc1\x6d\x6f\x10\xe4\x1a\x35\x76\x5e\x42\x08\x94\x7c\xde\xb5\x03\xea\x8f\xf4\x80\xb7\x73\x50\xf1\xe5\x07\x78\xbb\xe0\x74\x7c\x6b\xec\x3d\x3a\x6a\x16\xfe\xe1\x16\xe1\xd7\x91\x10\x12\xd8\x7a\xd5\xc0\xce\xbb\xa9\xf3\xb0\x17\x05\xf5\xa8\x5c\x5e\x35\xa2\x58\x58\x3d\x0d\x66\x07\x5f\xbf\x51\x4f\x6f\x6e\x44\x61\xdd\x86\x30\x01\x72\xac\xfb\xa1\xf7\x14\x9f\x4d\xbd\xf1\x6f\x5e\x8b\x20\xc4\x76\x32\x1d\x94\xe3\xef\x84\xab\xa6\x82\xc4\x5a\x56\x27\xe4\x90\x0e\x87\x7e\x72\xe6\xef\x3d\xd4\x52\x8c\x35\x3d\xb2\x30\x4e\xb0\x7a\xd7\x9a\x1b\x04\x95\x75\x87\x20\x8f\x56\x92\x35\x05\x68\x36\x6c\x49\x51\x04\x9e\x97\x92\x9f\xa6\xd7\xf4\x17\x4e\x8a\xcf\xd4\x15\x34\xbc\x72\xa9\x21\x6d\xfc\x8f\x4d\x46\x95\x1c\x9a\xc3\x0b\xfd\xb8\xd7\xc8\x4c\x7f\x52\x4b\x39\x8f\xc3\xad\x6e\xfd\xe3\xb5\x53\x51\x82\x4a\xe5\x83\xfc\xff\x90\x79\x6d\xd7\xa3\x26\xa3\xcb\xe4\x50\x4d\x47\x24\xc1\xe8\xb6\x6d\x87\xfb\x50\x03\x3a\x67\x5d\xc5\x1a\xbb\x03\x3f\x7d\x46\xa9\x77\xa7\x3e\xd8\xde\x94\x63\x56\x56\x83\xa4\x5f\x25\x8a\xfb\xef\xe8\x90\xc2\xbb\x5d\x9c\xe7\x89\x51\xc5\xa4\x3a\xd0\x89\xa2\xdf\xc6\xd2\xb3\x39\x90\xad\x0c\x9f\xb7\x26\xaf\x39\x15\x27\xd9\x6d\x32\x67\x42\xf7\xc0\x20\x72\xbd\x6c\x96\x8b\x6b\x90\x30\x83\xac\x66\x46\xd1\xf9\xd5\xa7\x4b\x38\xbe\x60\x84\x4f\x2a\x98\x41\xca\x48\x90\x70\x66\x14\xc3\x97\xf7\xcb\xab\x25\xc3\xa4\x26\xe6\x79\x2a\x8f\x2a\x7e\xbe\x11\x24\x1f\xe6\x48\xe7\x11\x4c\x73\x71\x79\x91\xe4\x90\x23\x9d\x35\x77\xea\xdc\xba\xa1\xf5\x9f\xc9\xc2\xf2\xec\x30\x5b\xc3\xab\x97\x55\xda\x24\x1f\x36\x21\x80\x7c\x27\x93\x49\x04\x4d\xb7\x7e\xba\xdb\xcf\x00\x00\x00\xff\xff\xe0\x60\xb8\xdf\xcd\x03\x00\x00")

func templateSelectTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateSelectTmpl,
		"template/select.tmpl",
	)
}

func templateSelectTmpl() (*asset, error) {
	bytes, err := templateSelectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/select.tmpl", size: 973, mode: os.FileMode(420), modTime: time.Unix(1440322036, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templateSelect_columnTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\x4b\x6b\x83\x40\x14\x85\xd7\xce\xaf\x38\x48\x17\x4a\x65\xc8\x5a\x70\x91\x87\xbb\x50\x69\x12\x0a\xa5\x74\x31\x4d\x6e\x68\x60\xe2\x63\xd4\xa4\xc1\xce\x7f\xef\x38\xc6\xa4\xd2\x40\xb3\xf2\xea\x39\xe7\x3e\x3e\x6c\x1a\x6c\x68\xbb\x4b\x09\xee\x92\x24\xad\xab\x69\x26\xeb\x7d\xea\x42\x6b\x23\x3d\x94\x7b\x21\xe5\x4a\x7c\x48\x7a\x12\x7b\x42\x18\x81\x5f\xdf\xbe\x51\x65\x53\x53\x48\x5b\xcd\xb3\x23\x29\x13\x63\xdb\x3a\x5d\xc3\x2b\x70\x23\xaf\x75\x37\x64\xf9\x3c\xf7\x5b\x9d\xff\xe9\xb3\xda\x55\xb2\xf5\x79\x07\xab\xaf\x4e\x79\x9f\x0c\x40\x5f\xb9\x2a\xc1\x39\x2f\x0b\x29\x05\x4f\x72\x52\xa2\xca\x94\xff\xcf\x24\x34\xcc\x39\x08\x85\x2c\xc7\x30\xc8\x9c\xdd\x16\x92\x52\xcf\x36\xf6\x11\x45\x18\xb5\x66\xc7\x38\xa3\x8b\x37\x2e\x6a\x21\x99\xa3\x41\xb2\xa4\xab\x6c\x33\x6f\xa3\x77\xa3\x30\xe6\x1c\x3f\x49\x59\x3c\x5d\x2a\x36\xe2\x60\xfd\xeb\x61\xcd\x8b\x90\x35\x85\x38\x04\x48\xf2\xd0\x2c\x15\xa0\x43\x1e\xc2\xbd\x10\xd1\xda\xd5\xcc\x29\x78\xd7\x36\x82\xc8\x73\x4a\x37\xde\xf9\x43\x00\xfb\xf0\x99\xa3\xa8\xaa\x55\x8a\x82\x99\x1d\xee\xc5\x9e\xa8\x0d\xa9\xc9\xe9\x06\x7d\x43\x3d\x6b\xc5\xfe\xf4\xb6\xbe\x07\x6e\xc1\xbb\x58\x04\x17\xc9\x62\x16\x2f\x30\x79\xc5\xef\x5b\x2c\xe8\xb3\xa7\x47\x34\x2e\xd7\x16\x66\x1f\x7e\x6c\xd3\xe3\xe5\xd4\x1d\xa0\x1e\xa8\xb3\xb8\x93\xd9\xe0\x70\x33\xc8\xb0\x69\x7f\xbc\x9f\x00\x00\x00\xff\xff\x96\xea\xb6\xe7\xcc\x02\x00\x00")

func templateSelect_columnTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateSelect_columnTmpl,
		"template/select_column.tmpl",
	)
}

func templateSelect_columnTmpl() (*asset, error) {
	bytes, err := templateSelect_columnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/select_column.tmpl", size: 716, mode: os.FileMode(420), modTime: time.Unix(1440319004, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templateTableTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8f\xb1\x4e\x04\x21\x10\x86\xeb\x9d\xa7\x98\x10\x8b\xbb\x42\xae\x37\xb1\xb2\xbd\x5c\x34\xa7\xb1\x46\x1c\xf7\x36\xc2\xc2\xb2\x83\x1b\xb3\xf2\xee\x0e\xdc\x15\x1a\xad\xf8\xc2\x30\xdf\xff\x13\x8d\x7d\x37\x3d\xe1\xba\xa2\xbe\x3f\xf3\xc1\x78\xc2\x52\x00\x06\x1f\x43\x62\xdc\x40\xa7\x66\x4e\xc3\xd8\xcf\xea\x8c\x36\x8c\x1f\x0a\x84\xfb\x81\x4f\xf9\x45\xdb\xe0\x77\x5e\x96\x89\x76\x7d\xb8\x9e\x27\xe7\x8c\x82\x2d\x88\xf3\xca\x8a\xcc\x35\xe3\xcd\x2d\xea\x06\x5f\xc8\xe1\xae\x5e\x37\xda\x87\x85\x52\x8d\xe3\xcf\xd8\x6a\xfc\x58\x29\xe5\xf8\xb0\x47\x09\xcc\x96\x71\x85\x6e\x39\x51\x22\x6c\x7e\xfd\x5c\x19\xa4\xe5\x5b\x1e\x2d\x1e\x68\xa9\x3f\xf8\xe3\x7f\x1c\xd8\x5d\x3c\x9b\x2d\xe6\x99\x52\x35\x8a\x6a\xaa\x7d\xfe\x49\x5b\x0b\x74\x89\x38\xa7\x11\xa7\x6a\x97\x27\x4c\x3e\x3a\xc3\x84\xea\x48\x8e\x2c\x2b\xd4\xb5\xef\xaf\xc9\x53\x7c\x95\xf3\x32\xf9\x0e\x00\x00\xff\xff\xbb\x76\x41\xb5\x54\x01\x00\x00")

func templateTableTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateTableTmpl,
		"template/table.tmpl",
	)
}

func templateTableTmpl() (*asset, error) {
	bytes, err := templateTableTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/table.tmpl", size: 340, mode: os.FileMode(420), modTime: time.Unix(1440321282, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templateUpdateTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x52\xc1\x4e\xeb\x30\x10\x3c\xdb\x5f\xb1\xcf\x7a\x87\x44\x8d\xfc\x01\x7d\xea\xe1\xa9\x44\xe2\x50\x10\x90\x56\x1c\x10\x87\x28\xdd\x94\x48\xa9\x93\x38\x0e\x55\x15\xf2\xef\xac\xed\x94\xb6\x40\xb9\x70\x89\x6c\xcf\xee\xcc\xec\x6c\xfa\x1e\xd6\x98\x17\x0a\x41\xac\xea\x75\x6a\x50\xc0\x30\xd0\xe3\xdf\x2c\xdd\x62\x79\x4b\x1f\x98\xce\x40\xba\xc3\x1b\x98\x6a\x6e\x9f\xdd\x69\x51\xed\x50\x53\x31\x37\xfb\x1a\xe1\xbc\x65\x18\x3c\x59\x72\xbf\x80\xd6\xe8\x2e\x33\xd0\x73\x46\x35\x72\x84\x09\xe0\xac\x45\x73\x93\xd6\xac\x6d\xca\x32\x95\x89\xbb\x70\x36\xaf\xca\x6e\xab\x5a\x78\x7a\xa6\xc6\x42\x6d\xf8\xc0\x79\xde\xa9\x0c\x82\xe6\x8b\x08\xb1\x84\xe0\x95\x82\xf0\x07\x0b\xa4\xad\xd1\x74\x5a\x5d\xae\xa1\x12\xf6\x0d\xfd\x14\x9a\x88\x10\xef\x74\x0a\xa7\x56\xfb\x81\x90\xc1\xda\xa3\x3e\x9d\xaa\x0d\x82\x3c\x98\x77\x11\x1a\xdc\xd6\x25\xb1\x1f\x92\xf5\xa0\x00\xe9\x61\x54\x6b\x9b\xde\xa5\xd9\x3e\x9c\x85\xb0\xac\x92\xa6\xa4\x01\x03\x9f\x48\x44\xd9\x14\xca\xa0\xce\xd3\x0c\xc9\x05\xa0\xd6\x95\x0e\xed\x94\xe4\x73\xb4\x10\x41\xfb\xda\x3a\xc8\xee\xaf\x91\x7e\x02\x39\x52\x71\x56\xe4\x0e\xfb\x33\x03\x55\x94\xb6\xf5\x90\x90\x10\x9f\xf8\x47\x05\x3b\x2b\xdb\xbd\xa0\x46\xa2\xdd\x9d\x71\xbb\xd7\x5f\x52\x73\xd6\x74\xa8\xf7\x96\x50\xac\xee\xae\xfe\x2f\x63\x38\xf9\x5d\x20\x89\x97\x02\x26\x70\x9c\xcf\xc9\x78\x3b\x56\x49\x08\x27\xe4\x39\x26\x74\x87\xc7\xeb\xf8\x21\xb6\x3d\xbe\xc8\x6b\x8c\x46\xc6\x32\x10\xff\xc8\x51\x5a\xd7\xb4\x8a\xc0\xc5\x45\x73\x49\x29\xc3\xc8\x3a\xa7\xcd\x1e\xb7\xf4\x1e\x00\x00\xff\xff\x78\x99\x99\x5e\x27\x03\x00\x00")

func templateUpdateTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateUpdateTmpl,
		"template/update.tmpl",
	)
}

func templateUpdateTmpl() (*asset, error) {
	bytes, err := templateUpdateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/update.tmpl", size: 807, mode: os.FileMode(420), modTime: time.Unix(1440322069, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templateUpdate_columnTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x52\xcf\x4b\xc3\x30\x14\x3e\x37\x7f\xc5\x47\xf1\xd0\x42\x09\x3b\x17\x7a\x1a\xbb\x4d\x87\x6c\xea\x61\xec\x10\xdd\x1b\x0e\xb2\x34\x4d\xd3\x4e\xa9\xf9\xdf\x4d\x5a\x5d\x29\x0a\xce\x53\x5f\xf3\xfd\xc8\xf7\x5e\x5e\xd7\x61\x4f\x87\xa3\x22\xc4\x0f\x7a\x2f\x2c\xcd\x4b\xd9\x9c\x54\x0c\xe7\x3c\x74\x53\x9f\x84\x94\x1b\xf1\x2c\xe9\x4e\x9c\x08\x79\x01\x3e\xfe\x7d\xc0\x96\x73\x5f\xc8\xbe\x5a\x96\x67\x32\x5e\xc6\x0e\x8d\x7a\x41\x52\xe1\x17\xbd\x73\xc3\x25\xeb\xfb\x65\x8a\x35\x59\x4f\xe1\x3f\xac\x36\x47\x2b\x03\x35\x69\x83\x05\xdf\xbc\xeb\x6f\x71\xfa\x87\x27\x3a\x16\x55\xbc\x26\x7b\x2b\xf4\x36\xbe\x98\x3b\x17\xef\x50\xa0\x65\x91\x21\xdb\x18\x85\x8a\x39\x76\x75\xcc\xa7\x57\x32\xf4\xcf\xa0\x19\xe8\x4d\x9b\x1a\x9c\xf3\xba\x92\x52\xf0\x95\x26\x23\x6c\x69\xae\xe9\xa0\x15\x06\xa5\xc6\x54\xc8\xa2\xe3\x01\x92\x54\xd2\x1b\xa7\x28\x0a\xcc\x02\x39\xf2\xcc\xe2\xc2\x5d\x54\x8d\x90\x2c\x72\x20\x59\xd3\x08\xf7\x9a\xed\x6c\xe7\x11\xc6\xa2\x73\x68\x28\x3c\xe5\xa0\x5a\x78\x70\x12\x7f\x6c\xac\x7b\x14\xb2\xa1\x1c\x6d\x86\x95\xce\x7d\xa8\x0c\xc3\x7a\xe4\x98\x4c\xd7\x85\xb1\x0f\xb6\x05\x84\xd6\xa4\xf6\xc9\xd7\x41\x86\xfe\x93\x4e\x67\xef\xc5\x9e\x13\x96\xe5\x33\x00\x00\xff\xff\x12\x0e\xef\xee\x80\x02\x00\x00")

func templateUpdate_columnTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateUpdate_columnTmpl,
		"template/update_column.tmpl",
	)
}

func templateUpdate_columnTmpl() (*asset, error) {
	bytes, err := templateUpdate_columnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/update_column.tmpl", size: 640, mode: os.FileMode(420), modTime: time.Unix(1440321886, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/select.tmpl": templateSelectTmpl,
	"template/select_column.tmpl": templateSelect_columnTmpl,
	"template/table.tmpl": templateTableTmpl,
	"template/update.tmpl": templateUpdateTmpl,
	"template/update_column.tmpl": templateUpdate_columnTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"select.tmpl": &bintree{templateSelectTmpl, map[string]*bintree{
		}},
		"select_column.tmpl": &bintree{templateSelect_columnTmpl, map[string]*bintree{
		}},
		"table.tmpl": &bintree{templateTableTmpl, map[string]*bintree{
		}},
		"update.tmpl": &bintree{templateUpdateTmpl, map[string]*bintree{
		}},
		"update_column.tmpl": &bintree{templateUpdate_columnTmpl, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

