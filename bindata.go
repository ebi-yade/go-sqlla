// Code generated by go-bindata.
// sources:
// template/delete.tmpl
// template/delete_column.tmpl
// template/insert.tmpl
// template/insert_column.tmpl
// template/select.tmpl
// template/select_column.tmpl
// template/table.tmpl
// template/update.tmpl
// template/update_column.tmpl
// DO NOT EDIT!

package sqlla

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateDeleteTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x93\xd1\x6e\xd3\x30\x14\x86\xaf\xe3\xa7\x38\x58\x20\x25\x5a\xea\x07\x00\xf5\x86\x35\xd3\x2e\xca\x58\x9b\x22\x2e\x10\x17\x59\x72\x52\xac\xb9\x4e\x63\x3b\x8c\xc9\xf3\xbb\x23\xdb\x69\x1b\x98\x3a\x24\xb4\xbb\xe8\xf8\x9c\xff\xff\xfd\xe5\xd8\x5a\x68\xb0\xe5\x12\x81\x2e\x50\xa0\x41\x0a\xce\x11\x6b\x67\xf0\xb6\xae\x76\x28\x6e\xaa\x1d\xc2\xfb\x39\xb0\xf0\xf1\x04\xa6\xbb\xf4\x65\x78\x82\x2f\xd2\x70\x23\x10\x66\xc7\xfe\x4e\x6a\xa3\x86\xda\x74\xca\x4f\xec\x15\x97\xa6\x05\x7a\x83\x0f\xef\x74\xb9\x5a\x52\x48\x9f\x8b\x6c\xbc\x44\x16\x34\xcc\xe3\x1e\xc1\xda\xa9\xaf\x73\x31\x53\xb9\x5a\x42\x94\x06\x4b\x92\xbf\x7b\xca\xd5\x92\x38\x42\xda\x41\xd6\x90\xf6\xcf\x24\xca\xd5\x32\x83\xa8\x93\x66\x2f\x18\x58\x92\x28\x34\x83\x92\xe7\x7b\x2c\x49\x92\x3e\x27\x89\xf3\x7e\xd6\x82\xaa\xe4\x16\x81\x5d\x76\x62\xd8\x49\x0d\xce\x59\x0b\x06\x77\x7b\x51\x99\x23\xcf\x78\x48\x81\xc5\x63\x94\x8d\x07\x7c\x2e\xec\xd1\x2a\x83\x4d\x57\xf6\x22\xcd\x20\xd5\x46\x71\xb9\xcd\xe1\xdb\x77\x2e\x0d\xaa\xb6\xaa\xd1\xba\x1c\x50\xa9\x4e\x65\x3e\xf6\xc3\x0f\x54\xa8\x73\xf8\xa9\x43\xd5\xc3\xef\x59\x28\xb2\x51\x84\x24\xbc\x0d\x47\x6f\xe6\x20\xb9\xf0\x43\x87\xcb\x52\x9a\xfb\x52\x98\xf4\x37\x23\x49\x3f\xa0\x7a\xf4\x22\x74\x51\x2c\x8b\x4d\x01\x57\xeb\xcf\x9f\x7c\x52\x36\x86\xa4\x41\x2e\xba\x7a\x45\x4a\x83\x60\x9c\xbb\x98\x03\x85\xaf\xd7\xc5\xba\xa0\x70\x31\x36\x45\xdd\xd1\x70\x6c\x03\xfa\x81\xc6\xc8\x92\x8b\xd3\xff\x83\x17\x99\x14\xbf\xb0\x4e\x9b\x3b\xd0\xbd\x10\x15\x5b\x7c\xf4\x74\x7a\xc1\xd6\xa8\x07\x61\xa6\x48\x82\x49\x0e\x95\xda\x4e\x99\xfc\x9b\xc6\x94\xc4\xa1\xd6\xdc\xb1\xe0\x3b\xd1\x64\x8c\x65\x71\x07\x66\xc0\x5b\x60\xd7\x95\xbe\xbd\x3f\xfd\x57\x1d\x68\x95\x61\x63\xc7\x4b\x1c\x57\xf0\x7f\xd3\x07\x2a\x93\x17\xe6\x5c\x9a\xb1\xc3\x5a\x33\xef\x77\x7b\x1f\x77\xed\xcc\x2b\xf3\x13\xfa\xcf\xc6\x2b\x8e\xa2\x39\x04\x7c\x75\x3a\x1e\xce\xb8\xee\xa7\xc5\xff\x1d\x00\x00\xff\xff\x11\x95\x6f\x23\x70\x04\x00\x00")

func templateDeleteTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateDeleteTmpl,
		"template/delete.tmpl",
	)
}

func templateDeleteTmpl() (*asset, error) {
	bytes, err := templateDeleteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/delete.tmpl", size: 1136, mode: os.FileMode(420), modTime: time.Unix(1474815411, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateDelete_columnTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x92\x3f\x4f\xc3\x30\x10\xc5\x67\xfb\x53\x3c\x45\x0c\x89\x14\x45\x9d\x23\x65\x2a\x1d\x2a\x51\x2a\x44\x61\x41\x0c\x86\x5e\x45\x84\xe3\x38\x8e\x13\x0a\xae\xbf\x3b\x4a\xd2\x3f\x14\x2a\xd1\xa1\x53\x94\xbb\x7b\xef\xec\xdf\xb3\x73\x58\xd2\x2a\x57\x84\xe0\x9a\x24\x59\x1a\x97\xb2\x29\x54\x00\xef\x9d\xc3\x55\x5d\x08\x29\x17\xe2\x45\xd2\xad\x28\x08\x69\x86\xe4\xf0\xb7\x81\x2d\xc7\xa2\x20\x89\x0d\x1e\x94\xcd\xad\x24\x78\xcf\x57\x8d\x7a\x45\x58\xe1\x84\xde\xfb\x61\xc9\xfd\xdd\x4d\xd4\xf5\x93\x3f\x3e\x8b\xad\x4b\xd8\xf6\xfd\xc5\xa7\xde\x29\x63\xd0\x5a\x9b\x1a\x49\x92\xd4\x95\x94\x22\x99\x6b\x32\xc2\x96\x26\xfa\x67\x13\x1c\x67\xad\x30\x28\x35\x8e\x85\x9c\xe5\x2b\x48\x52\x61\x6f\x1c\x21\xcb\x30\xea\x86\x59\xa9\x91\xed\x67\x27\x55\x23\x24\x67\x1e\x24\x6b\x3a\xb4\x7b\xcd\xd3\xe8\x99\x33\xcf\x39\xfb\x78\x23\xd3\xe3\x19\x54\x93\xb5\x36\x47\xc7\xdf\xa0\x2b\xe5\x5f\xf4\xe3\x8a\xee\x51\xc8\x86\x52\xb4\x31\xe6\x3a\x45\xa9\x63\x0c\xf0\x53\x04\x7b\x36\xde\x07\x9e\xb3\x2a\x19\x16\x64\x10\x5a\x93\x5a\x86\xdb\x42\x8c\xfe\x13\x71\x66\xc8\x36\x46\xa1\xe2\x9e\xf3\xcb\x24\x30\x55\x61\xdb\xd3\xfe\x95\xc3\x39\xb8\x4f\xe0\x98\x35\xd2\xe6\x67\x32\xa9\x53\xb4\xf5\x40\x65\x30\x98\x89\x77\x9a\xaa\x5d\x6e\x61\x97\x59\x5b\x47\xd1\x85\x80\x39\x07\x52\xcb\xee\xe9\x7e\x07\x00\x00\xff\xff\x64\x49\x63\x66\x0e\x03\x00\x00")

func templateDelete_columnTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateDelete_columnTmpl,
		"template/delete_column.tmpl",
	)
}

func templateDelete_columnTmpl() (*asset, error) {
	bytes, err := templateDelete_columnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/delete_column.tmpl", size: 782, mode: os.FileMode(420), modTime: time.Unix(1474814985, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateInsertTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x55\xdd\x6e\xdb\x2e\x14\xbf\x86\xa7\x38\x7f\xeb\x3f\xc9\xa8\x29\x0f\x90\x2a\x37\x6b\x2b\x35\x52\x96\x35\x75\x76\x55\xf5\xc2\x8d\x8f\x23\x2b\x04\xc7\x80\xbb\x55\x94\x77\x9f\x30\x8e\xc7\xf2\xb5\x49\xbb\x0b\xe6\x70\xce\xef\x0b\x62\x2d\x14\x58\x56\x12\x21\x99\x4a\x8d\xca\x24\xe0\x1c\xb5\xf6\x1a\xfe\x5f\xe5\x5b\x14\xf3\x7c\x8b\x30\x9e\x00\xef\x7e\x7c\x80\xa9\x6f\xfd\x67\xf8\x80\x6f\xd2\x54\x46\x20\x5c\x0f\xf5\xb5\xd4\x46\xb5\x2b\x53\x2b\x7f\x62\xa7\x2a\x69\x4a\x48\xe6\xf8\xfd\x93\xce\x16\xb3\x04\xd2\x83\x26\xac\x3b\x6b\xde\x77\x08\xd6\xc6\xf3\x9c\x0b\x58\xb2\xc5\x0c\x42\x4b\xb0\x94\x1c\xd6\x64\x8b\x19\x25\x1a\xcd\x97\x7c\x47\x74\x23\x44\xce\xb3\x6e\x41\xc9\x6d\x2d\xda\xad\xd4\xf0\xfc\xa2\x8d\xaa\xe4\x9a\x3a\x4a\xcb\x56\xae\x20\x6d\x8e\x26\x65\x8b\x19\x83\x30\x2e\x65\x17\x70\x58\x4a\x14\x9a\x56\xc9\xf3\x35\x96\x92\x53\x20\xc7\xd0\x8c\x28\xe9\x91\x8e\x21\x86\x6a\xdd\x88\x12\xe7\xe1\x59\x0b\x2a\x97\x6b\x04\xbe\x07\xef\x9c\xb5\x60\x70\xbb\x13\xb9\x19\xdc\x09\x9b\x09\xf0\xb0\x8d\xb2\xf0\x76\x9d\xe3\x36\x20\x63\xb0\xac\xb3\x46\xa4\x0c\xd2\xa0\xc8\x08\x9e\x5f\x2a\x69\x50\x95\xf9\x0a\xad\x1b\x01\x2a\x55\x2b\xe6\x59\xbe\xe5\xca\xaf\xc2\x97\xb0\xd4\x10\xd5\xc2\xc4\xcf\xe1\x59\xe7\x4b\x3f\xc8\x3a\x4a\xaa\x12\xcc\x08\xea\x8d\xf7\x5e\xf3\xf4\x10\xcb\x1d\x96\x79\x2b\x4c\x80\xf4\x50\xd7\x1b\x54\xec\xc6\x97\x7b\xd5\x9a\x0e\x00\x4c\xc0\xf0\xa3\xba\xb4\x61\x94\xf8\xee\xbe\xe2\xbf\x09\xc8\x4a\x74\x67\xf6\x76\x24\xc9\x01\x99\x9e\x0e\x25\xc4\x79\x71\x49\xa3\x47\xf0\xa6\xc3\x84\xf1\x04\x1a\x1e\x9c\xe0\xcb\xba\xd7\xc7\x0b\x43\x4f\x4c\xf8\xe3\x00\x47\x29\x69\x5a\x54\xef\xbe\x6f\x32\x9d\x67\xf7\x4f\x4b\x98\xce\x97\x5f\x3b\x85\x7a\xe2\x90\xc0\x15\x34\x9a\x0e\xf9\x09\x27\xae\x20\xb9\x49\x02\x30\x59\x89\x3e\x02\x55\x09\xfc\x21\xd7\x8f\x9b\xee\x66\xfc\x85\xad\xf7\x3f\x70\x95\x16\xaf\x7d\xa8\xee\x3e\x33\x48\x8f\xcc\x89\xcc\xf5\xf7\x14\x85\xc6\x7f\x68\xaf\x1b\xc1\x9f\x50\xb7\xc2\x1c\xf6\x0d\x59\x0c\x82\x8c\x20\x57\xeb\x58\xf3\x3e\x7f\xa7\x64\x3e\xe2\x4d\xa2\x9b\x76\x98\xb3\xbd\xb5\x03\x93\xb8\x5e\x56\xe2\xb7\xfd\x1e\x91\xf3\xd2\x0f\x88\x3d\x9e\xe2\x95\x77\xd4\x22\xac\x9c\x73\x46\x4f\x60\x39\x1b\x8b\xf3\xe0\xfc\xa9\x62\x98\x15\x46\xf3\x59\xae\xfb\x50\x4f\x8b\x8b\x71\xbb\xd8\x37\x7e\x82\xa2\xe7\xd6\xb9\x94\xf1\x0c\x05\xae\x4c\xca\xf8\xe3\x26\x3c\x13\x69\x55\x30\x9e\x55\x72\x2d\x30\x2d\x5e\x3b\x76\x91\xfd\xfb\x5e\x91\x34\x34\x96\xcd\xd1\xd3\x4f\xf3\x89\x8b\xfc\xeb\x79\xf0\x44\x8e\x6f\xf0\x85\x84\x9d\xdf\xdb\xc7\x8b\xfa\xbf\x97\x3d\xa8\x9f\x01\x00\x00\xff\xff\x96\x1f\xc2\x54\xaf\x06\x00\x00")

func templateInsertTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateInsertTmpl,
		"template/insert.tmpl",
	)
}

func templateInsertTmpl() (*asset, error) {
	bytes, err := templateInsertTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/insert.tmpl", size: 1711, mode: os.FileMode(420), modTime: time.Unix(1474807332, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateInsert_columnTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\xce\xbb\x6a\xc4\x30\x10\x85\xe1\xda\x7a\x8a\x83\x48\x61\x37\x7a\x80\x80\x2b\x57\x81\x24\x10\xe2\xa4\x09\x29\xb4\xeb\x31\x18\x24\xf9\x26\x19\x96\xf1\xbc\xfb\x62\xf6\x56\xec\xc2\x96\x53\xfc\xdf\x1c\x66\x34\xd4\x76\x81\xa0\xdf\xc2\x4c\x53\xac\x7a\x97\x7c\xd0\x10\x61\xc6\xcb\xec\xad\x73\xb5\xdd\x39\xfa\xb4\x9e\xf0\x5a\xc2\xdc\xae\x15\xb1\xaf\xac\x27\x87\x15\x3f\x21\x76\xd1\x11\x44\x54\x9b\xc2\x1e\xf9\x88\x07\xbd\xc8\xe9\xc9\xf7\xd7\x7b\x81\x5f\xeb\x12\x31\xc3\xdc\x61\xf5\x99\xca\x97\x0d\x31\xf5\x61\xb8\xe4\xc5\x13\x15\xac\xb2\xd1\xcc\x14\x3f\xec\xf0\xa7\xaf\xb8\x88\xfe\x47\x89\x45\x65\x13\xc5\x34\x05\x8c\x4a\x94\x62\x06\x85\x66\x9b\x7c\x0c\x00\x00\xff\xff\x30\xe2\x3a\x61\x06\x01\x00\x00")

func templateInsert_columnTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateInsert_columnTmpl,
		"template/insert_column.tmpl",
	)
}

func templateInsert_columnTmpl() (*asset, error) {
	bytes, err := templateInsert_columnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/insert_column.tmpl", size: 262, mode: os.FileMode(420), modTime: time.Unix(1474807332, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateSelectTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x56\x4d\x6f\x1b\x37\x10\x3d\xef\xfe\x8a\x29\xd1\x06\xbb\xf1\x86\x70\x81\xa2\x87\x14\x3a\xb8\x8e\x84\xa4\x50\x1c\xcb\xb2\xd1\x83\xe1\xc3\x5a\x4b\xa9\x84\x29\x52\x4b\x52\x56\x02\x7a\xff\x7b\x31\x24\x57\x5a\x79\x6d\x59\x97\xe8\xe0\x0f\x72\xe6\xcd\x9b\xc7\x37\xa4\x9c\x83\x8a\xcd\xb9\x64\x40\xa6\x4c\xb0\x99\x25\xd0\x34\xa9\x73\x1f\xe0\xd7\x59\xb9\x64\xe2\xa2\x5c\x32\xf8\x38\x00\xea\xff\x78\x02\xab\xce\x71\x19\x9e\xe0\x46\x5a\x6e\x05\x83\x0f\xdb\x78\x25\x8d\xd5\xeb\x99\x55\x1a\x33\x56\x9a\x4b\x3b\x07\x72\xc1\x36\xbf\x99\xe9\x64\x4c\x20\xeb\x83\x5c\x23\x44\xee\x31\x1e\x4b\x0d\xce\x75\xcb\x36\xcd\x99\x10\xe7\x4a\xac\x97\xd2\xc0\x00\x6e\xef\x8c\xd5\x5c\x2e\x5c\x9a\x38\x07\xba\x94\x0b\x06\xb4\xdd\x6e\x1a\xe2\x5c\x64\xd9\x34\xa4\x70\x0e\x98\xac\xb0\x97\x26\x4d\xed\x8f\x15\xeb\x61\x87\x76\xa7\x93\x31\x04\xd6\x10\x70\xf7\x63\x26\xe3\x34\x69\x4b\xe0\xa7\xe5\x90\x26\x4a\x57\x4c\x43\xf8\xb4\x6b\x82\x2f\xb9\x8d\x6b\xef\xd7\x5c\xda\x3f\xff\x48\x13\x6e\x46\x4a\xdf\xac\xaa\xd2\x32\xb8\x57\x4a\x20\xa1\xf9\x5a\xce\x20\xab\xfb\x9c\x26\xe3\x1c\x02\xb1\x2c\x3f\xc0\xd8\xa5\x89\x66\x76\xad\xe5\xeb\x31\x2e\x4d\x92\xba\x48\x93\x5e\x4f\x3b\x4d\x71\x97\x10\xfc\x29\xb9\xc0\x5f\xf3\x52\x18\x56\xa4\x49\x73\x90\x63\x5b\x21\x87\x31\xf6\x9b\x09\x08\xad\xbe\x41\xb8\xa6\x41\x9e\x01\xbc\x13\x5b\xfa\xf5\xab\x95\xf6\x0a\x6d\x15\x7c\x4b\x95\x9a\x76\xe5\x1e\x80\xd5\x6b\xb6\x5f\xec\x25\xeb\x38\x07\x96\x2d\x57\x02\x73\xe2\x18\x84\x4d\x02\x34\x6c\x47\x2f\x1d\xa1\xc9\xb5\x9a\xd6\x22\xcb\x21\x0b\xa6\x28\xe0\xf6\x8e\x4b\xcb\xf4\xbc\x9c\x31\xd7\x14\xc0\xb4\x56\x3a\x47\xae\xb3\x58\xff\xe3\x20\x1a\xc8\xd0\x7f\x14\x97\x59\xdd\x32\x2b\x80\x14\x40\xf2\x34\xd9\xfc\xc7\x34\x33\x05\x3c\x1a\x9f\x8f\x19\x35\xf5\x8b\x34\x96\x4b\x13\x3e\xf7\x5b\xbf\x0c\x40\x72\x81\xf0\x6d\xd7\x84\x14\xb8\xe4\x33\xf1\x68\xd3\xa4\x5e\x33\xfd\x03\x41\xc8\x74\x38\x1e\x9e\x5f\x03\x81\x13\x68\xd9\x9c\x00\x81\xd1\xd5\xb7\xaf\xd0\x1d\x27\x0f\x1f\x58\x60\x05\x42\x7c\x81\x80\x73\x32\x00\x02\xff\x7e\x1e\x5e\x0d\x11\x26\x04\x61\x9d\xdd\x76\x4d\xfd\xb0\x78\x90\xd6\x05\x1d\x9e\x1d\x98\xf1\x97\xaf\x5f\x02\x1d\x63\xf5\x4c\xc9\x47\x3a\x52\x7a\x59\xda\x1b\x2e\x6d\xf6\x3e\xe6\x16\xf0\xfb\x69\x1e\x3a\xf1\x80\xdd\x13\x7f\x86\x37\xfa\x76\x05\x37\x97\x9f\xce\xae\x87\x24\x24\xb4\x4e\x08\x21\x40\xfe\x22\x41\x55\xc9\x45\x34\x07\x9f\x03\xfd\x5c\x9a\xcb\x07\x7f\x29\x85\x03\x37\x5e\x8c\xa9\xbf\x26\xa2\x24\x9d\x31\xcd\x0e\xb8\xe1\xd9\xa0\x76\x6e\xc8\xa6\xc9\x72\xda\x62\x50\xc4\xbf\x7c\x08\xe7\xfe\xca\x2d\x89\x19\x66\x3f\x70\xc4\x99\xa8\x5a\x42\x29\x5e\xc3\xde\xa8\x48\xfc\x18\xab\x4e\xb9\x5c\x08\x96\x55\xf7\x60\x6a\x21\x4a\xfa\xe9\xef\xd0\xcc\x7e\xa7\x5d\xcb\x6e\xad\x09\x83\x03\x77\x75\x3c\xfa\x02\x4a\xbd\xe8\x3a\xf6\x6d\xaf\xf6\x8a\xc7\x89\x89\x87\xa7\x36\x08\x54\xdd\xd3\x09\xe2\x5f\xa9\x4d\xd6\x29\x44\x29\xcd\x77\x07\x4c\xa7\xb3\x52\x66\x5a\x6d\xf2\x23\xef\xb2\x33\x21\x9e\x29\x71\x7b\x77\x50\x0b\xed\x27\x77\x59\x3e\xb0\x97\x23\x4f\xa3\x4f\x7f\xb6\x66\xfb\xb3\xad\xd5\x66\x97\xde\x2a\xd5\x97\xe9\x28\xb4\xa4\x62\x73\xa6\x01\x21\xe9\xb9\x50\x86\x21\x8f\xb9\x8a\x2b\x17\xec\xbb\x7f\xa4\x30\xb7\x43\xb8\xd5\xdd\xe4\x69\xf2\x42\x99\x7e\x1d\x2c\x84\x62\x0e\xa0\x5c\xad\x98\xac\x32\x6d\x0a\xd0\x7e\xc0\xdb\x60\xbd\x9b\xd0\x63\x6c\x8d\x0c\x4c\x3c\x49\xfc\x47\x32\xfd\x96\xb1\xf1\xcb\x07\xda\xab\x17\x94\x26\xb1\x33\x13\x3a\x0b\x0f\x6a\xef\x05\x79\xa7\xd5\x06\x67\x33\xe3\xb2\x62\xdf\xc3\xc5\x69\xe0\x34\x47\x30\x2e\x17\x58\x2d\x64\xc6\x87\x24\xd9\x59\x55\xab\x4d\x50\x62\x3b\xbf\x4d\x93\xfe\x1f\x00\x00\xff\xff\xeb\xcd\xfe\xd6\x97\x09\x00\x00")

func templateSelectTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateSelectTmpl,
		"template/select.tmpl",
	)
}

func templateSelectTmpl() (*asset, error) {
	bytes, err := templateSelectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/select.tmpl", size: 2455, mode: os.FileMode(420), modTime: time.Unix(1474809627, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateSelect_columnTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x93\xbd\x6e\xdb\x30\x14\x85\x67\xf1\x29\x0e\x84\x0e\x12\xea\x10\x19\x8a\x0e\x02\x34\xe4\xc7\x83\x81\xa6\x4e\x63\xb7\x40\x51\x74\x60\xed\x6b\x54\x10\x4d\x51\xd4\x4f\x93\xd2\x7c\xf7\x42\xa2\x95\x58\xa9\x81\xb8\x68\x26\x5b\xbc\x3c\xf7\x92\xdf\xe1\xb1\x16\x6b\xda\x64\x8a\x10\x2e\x48\xd2\xaa\xbe\x2a\x64\xb3\x55\x21\x9c\xb3\x16\x6f\xaa\xad\x90\x72\x29\x7e\x48\xfa\x28\xb6\x84\x24\x05\x7f\xfa\xda\xa1\x2e\xae\xc4\x96\x24\x76\xf8\xac\xea\xac\x96\x04\xe7\xd8\xa6\x51\x2b\x44\x25\x8e\xe8\x9d\xf3\x43\x16\x9f\x3e\xc4\x5d\x9d\xff\xd5\x67\xb9\xef\x12\xb5\x7d\x7d\xf9\xa0\x07\xe5\x04\x74\xaf\x4d\x05\xce\x79\x55\x4a\x29\xf8\x5c\x93\x11\x75\x61\xe2\x17\x26\xc1\xb2\xa0\x15\x06\x85\xc6\x58\xc8\x82\x6c\x03\x49\x2a\xea\x1b\xc7\x48\x53\x9c\x77\x9b\x83\x42\x23\x7d\xdc\x3b\x2d\x1b\x21\x59\xe0\x40\xb2\xa2\xa7\x72\xaf\xf9\x76\xfe\x9d\x05\x8e\xb1\xe0\xd7\x4f\x32\x3d\x1e\xaf\x9a\xde\x6b\x33\x3a\xfe\x0e\xdd\x52\xf6\x9b\x0e\xae\x68\xbf\x08\xd9\x50\x82\x76\x82\xb9\x4e\x50\xe8\x09\x3c\xfc\x04\xe1\x23\x1b\xe7\x42\xc7\x82\x92\xfb\x01\x29\x84\xd6\xa4\xd6\xd1\x7e\x61\x82\xfe\x27\x66\x81\xa1\xba\x31\x0a\x25\x73\xec\x75\x0c\x98\xa9\xa8\xed\x61\x3f\xb3\xe1\x14\xda\x47\x68\xdc\x34\xb2\xce\x4e\x44\x52\x25\x68\x2b\x0f\xc5\x37\xb8\x11\x39\xcd\xd4\x60\x5b\xd4\x59\xd6\x56\x71\xfc\x5a\xbc\xac\x45\xb6\x01\x9f\x55\xb7\x39\xce\xfe\xe1\x01\xdf\xe6\x7e\x7e\xa4\x73\x64\xaa\x7e\xff\xee\xff\x9e\x68\x07\xec\x19\xec\x48\xe7\x07\x67\xe5\x2f\x24\x66\x3f\x9e\x73\x1e\x33\xc7\xac\x3d\x03\xa9\x75\x97\xc8\x93\x6f\x34\x37\x6b\x32\x97\x0f\x47\xe6\x38\x17\x15\x5d\x71\x88\x45\xf7\xff\x94\x5b\x95\xdc\xcb\x52\x84\x98\xdf\x5d\x4f\xef\x70\xf9\x15\x87\x6e\xf5\x21\xdc\xef\x19\x1e\xcc\x45\xb5\xea\x83\x36\x88\xdf\x76\xea\x8b\xc5\x55\x38\x8a\xe1\xa8\x7a\x3d\xf5\x65\x36\xb2\xd6\xda\x01\xc1\x9f\x00\x00\x00\xff\xff\x58\xfa\xe7\x3a\xe8\x04\x00\x00")

func templateSelect_columnTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateSelect_columnTmpl,
		"template/select_column.tmpl",
	)
}

func templateSelect_columnTmpl() (*asset, error) {
	bytes, err := templateSelect_columnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/select_column.tmpl", size: 1256, mode: os.FileMode(420), modTime: time.Unix(1474814925, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateTableTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\x31\x6b\xc3\x30\x10\x85\x67\xdd\xaf\x38\x44\x87\x64\x88\xb3\x17\x3a\x94\x76\x29\x84\xd0\x90\x86\xce\x17\xf9\xea\x98\xc8\xb2\x2d\x9d\x1b\x8a\xa2\xff\x5e\x2c\x87\xd2\x52\x6f\x8f\x7b\x7a\xdf\x3d\x5d\x47\xe6\x4c\x15\x63\x8c\x58\xbc\x4e\x7a\x4b\x0d\x63\x4a\x00\x75\xd3\xb5\x5e\x70\x01\x4a\x07\xf1\xb5\xab\x82\x9e\xa4\x69\xdd\xa7\x06\x50\xba\x24\xa1\x23\x05\x5e\x87\xde\x6a\x50\x31\xa2\x27\x57\x31\x16\x8f\x65\x59\x4b\xdd\x3a\xb2\x37\x68\xc0\x55\x4a\xa0\xf4\xb8\x07\x53\x9a\x1e\xb3\x2b\x31\x4f\xab\x5a\x4e\xc3\xb1\x30\x6d\xb3\x6e\xc8\x9c\x99\xd7\x55\xbb\x0a\xbd\xb5\xa4\x61\x09\x31\xe2\x9d\xa1\x86\x6d\x6e\x76\xff\x80\x45\x16\x57\x94\xf6\x69\x1c\xe3\x15\x0f\x4e\x6a\xb1\xb9\xb6\x7c\x75\xf9\x3b\xbf\x22\x29\xed\x77\x1b\x0c\xe2\x07\x23\x18\x41\x5d\x4e\xec\x19\x33\xbf\x78\x1f\x35\x24\x80\x8f\xc1\x19\xdc\xf2\x65\x6c\xf8\x8f\xff\x76\xa3\xef\x77\x9b\xc5\x72\x96\x1e\x41\xf5\x63\xb7\x19\x2f\x26\x50\x9e\x65\xf0\x0e\xfb\x71\x53\x8c\x28\xdc\x74\x96\x84\x51\xef\xd9\xb2\x11\x9d\xaf\xf2\xd7\x39\x74\x25\x09\xcf\x39\x2f\x2e\xb0\x9f\xcd\x3c\xb3\xe5\x9f\xcc\x77\x00\x00\x00\xff\xff\xe0\x7b\x72\x5e\xdc\x01\x00\x00")

func templateTableTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateTableTmpl,
		"template/table.tmpl",
	)
}

func templateTableTmpl() (*asset, error) {
	bytes, err := templateTableTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/table.tmpl", size: 476, mode: os.FileMode(420), modTime: time.Unix(1474807332, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateUpdateTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x55\xc1\x4e\xe3\x30\x10\x3d\xdb\x5f\x31\x6b\xb1\x52\x22\x82\x3f\xa0\xa8\x07\x16\xba\xe2\xd0\x45\x94\x14\x71\x40\x68\x15\x9a\x29\x1b\xd5\x75\x1a\xdb\xa5\x8b\x8c\xff\x7d\x65\x3b\xa5\x81\xb6\x80\xd0\xde\x1a\x7b\x3c\xef\xcd\x7b\x33\x53\x6b\xa1\xc4\x69\x25\x11\xd8\xf5\xa2\x2c\x0c\x32\x70\xce\x5a\x38\x98\x14\x73\x14\x17\xc5\x1c\xa1\xd7\x07\x1e\x7e\x3c\x83\xa9\x4f\xfd\x31\x3c\xc3\xb5\x34\x95\x11\x08\xce\x51\x6b\x8f\xe0\x60\x52\x4b\x6d\xd4\x72\x62\x6a\xe5\x1f\x2c\x54\x25\xcd\x14\xd8\x05\xae\xbe\xeb\x7c\x34\x64\x90\x6c\xe7\x18\xfb\x0c\x29\x1c\x39\x47\xcd\xd3\x02\xe1\x35\xac\x73\x91\x50\x3e\x1a\x42\x4c\x0d\x96\x92\xb7\x31\xf9\x68\x48\x89\x46\xf3\xab\x58\x10\xdd\x08\x51\xf0\x3c\x7c\x50\x72\x5a\x8b\xe5\x5c\x6a\xb8\xbd\xd3\x46\x55\xf2\x81\x3a\x4a\xa7\x4b\x39\x81\xa4\xd9\x42\xca\x47\xc3\x14\x22\x5c\x92\xbe\xc3\xc3\x52\xa2\xd0\x2c\x95\xdc\x1f\x63\x29\xd9\x45\xb2\x07\x4d\x46\x49\xcb\xb4\x07\x5d\xaa\xd6\x65\x94\x38\x4f\xcf\x5a\x50\x85\x7c\x40\xe0\x6b\xf2\xc1\x0b\x83\xf3\x85\x28\xcc\x8b\x45\xf1\x92\x01\x8f\xd7\x28\x4b\x6f\xc3\xbe\xda\x5e\x98\xa5\x30\xae\xf3\x46\x24\x29\x24\x51\x91\x0c\x6e\xef\x2a\x69\x50\x4d\x8b\x09\x5a\x97\x01\x2a\x55\xab\xd4\x57\xf9\x58\x28\xff\x15\x4f\xe2\xa7\x86\x4e\x2c\xf4\x3d\x0e\xcf\x83\x2f\x2d\x90\x75\x94\x54\x53\x30\x19\xd4\x33\xdf\x03\x9a\x27\x6f\xb9\x9c\xe1\xb4\x58\x0a\x13\x29\x9d\xd7\xf5\x0c\x55\x7a\xec\xc3\xbd\x6a\x4d\x20\x00\x7d\x30\x7c\x2b\x2e\x69\x52\x4a\x7c\x76\x1f\xf1\xad\x0f\xb2\x12\xe1\xcd\xda\x0e\xc6\xde\x14\xd3\x96\x43\x09\x71\x5e\x5c\x2f\x7c\xab\x69\x06\xfa\x51\x47\xa8\x5e\x1f\x1a\x1e\x2d\xe1\xe3\xba\x15\xca\x2b\x44\x77\x40\x7d\x88\xe4\x28\x59\xfd\x41\x85\x3a\x83\xd5\x2b\x84\x70\xca\x5b\xf1\xbf\x98\x9a\x92\x66\x89\xea\xc9\x27\x64\xd7\x97\x67\x27\xe3\x41\x30\xa0\xd5\x15\xf2\xc1\x98\xc1\x21\x6c\xaa\x0c\x30\x91\x8e\x47\x62\x2c\x4a\x1c\x72\x1c\xf6\x81\xc1\xcd\xf9\xe0\x6a\xe0\xdf\xc4\xa0\x88\xd1\x12\x69\xc3\x80\x1d\xb3\x0c\x8a\xc5\x02\x65\x99\x04\xd1\x56\x8f\x9a\x73\x9e\x66\x9e\x79\x6c\xd8\x23\xa8\xa6\xc0\xcf\x0b\x7d\x39\xdb\x34\xa1\xde\x6e\x8e\xaf\x8c\x57\x67\xa5\x38\x97\xa4\x7c\x9d\x81\xdf\x78\xca\x1e\xe2\x72\x16\xcb\xdd\xb3\x5b\xfc\x33\xcd\x5f\x05\xfe\xac\x50\x94\x6b\x4e\xef\xad\x84\xce\xd8\x0c\xfe\xe2\x24\x29\xef\xdb\xa1\x3d\xfb\x91\x42\x72\x7b\xb7\x55\x61\x77\x7c\x82\x80\x19\x14\xea\xa1\xdb\x07\x1f\x77\x80\xac\xc4\xa6\x99\x7e\xaf\xe7\xa1\xbc\xe7\x81\x42\x27\xab\x77\xe1\xb3\x79\x9a\x26\xc2\xef\x5a\x9d\x1b\xcb\x1b\x9e\xa3\xc0\x89\x49\x52\x7e\x22\x44\x52\xde\x7b\x75\xbc\xbf\x28\x34\x7e\x72\xbf\xec\x10\x4a\x37\x82\x5f\xa1\x5e\x0a\xf3\xdf\xf5\x69\xcf\xf6\xa9\xd3\xb2\x8f\xcb\x71\xf7\x1f\xcc\x8e\x75\xb4\x59\x72\x1e\x77\x7b\x0f\xbd\x53\xfd\xfe\xbb\x75\xe9\x81\xd3\x9a\xd2\xbf\x00\x00\x00\xff\xff\xeb\x93\xdb\xc2\x7a\x07\x00\x00")

func templateUpdateTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateUpdateTmpl,
		"template/update.tmpl",
	)
}

func templateUpdateTmpl() (*asset, error) {
	bytes, err := templateUpdateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/update.tmpl", size: 1914, mode: os.FileMode(420), modTime: time.Unix(1474807332, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateUpdate_columnTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x92\x41\x6b\xe3\x30\x10\x85\xcf\xd6\xaf\x78\x98\x3d\xd8\x60\x44\xce\x06\x9f\x42\x6e\xbb\x1b\x4a\x92\xf6\x10\x72\x50\xeb\x09\x35\xc8\xb2\x2c\xcb\x6e\x5a\x45\xff\xbd\x28\x4e\x93\x9a\x16\x9a\x9e\x84\x46\xf3\xbe\x99\xd1\x1b\xe7\x50\xd2\xbe\x52\x84\x78\xa3\x4b\x61\x69\xde\xc8\xbe\x56\x31\xbc\x77\x0e\x7f\xba\x5a\x48\xb9\x16\x8f\x92\xfe\x8b\x9a\x90\x17\xe0\xd7\xdb\x11\xb6\x99\x8b\x9a\x24\x8e\xd8\x28\x5b\x59\x49\xf0\x9e\xed\x7b\xf5\x84\xa4\xc5\x37\x7a\xef\xc7\x22\xab\xbb\xbf\x29\x56\x64\x9d\x03\xff\x82\x5a\x9f\x41\xc9\x10\x10\x7c\xfd\xaa\x3f\xc4\xe9\x0f\x4c\x38\x16\xb5\xbc\x23\xfb\x4f\xe8\x6d\x7c\x81\x7b\x1f\xef\x50\x60\x60\x91\x21\xdb\x1b\x85\x96\x79\x76\x73\x9b\x0f\xcf\x64\xe8\x97\x8d\x66\xa0\x83\x36\x1d\x38\xe7\x5d\x2b\xa5\xe0\x4b\x4d\x46\xd8\xc6\xdc\x32\xc1\x20\x0c\x1a\x8d\xa9\x90\x45\xd5\x1e\x92\x54\x72\x02\xa7\x28\x0a\xcc\x42\x72\xd4\x68\x14\x97\xdc\x45\xdb\x0b\xc9\x22\x0f\x92\x1d\x5d\x9f\x4f\x9a\xed\x6c\xc7\x22\xcf\x58\xf4\x12\x06\x0a\x56\x8e\xaa\xc5\x41\x9b\x49\xfb\x47\x84\x50\xf5\x46\x9f\x46\x74\xf7\x42\xf6\x94\x63\xc8\xb0\xd4\x39\x1a\x9d\x61\x5c\x94\x1c\x93\x7f\xf6\xc1\x80\xb1\x40\x01\xa1\x35\xa9\x32\x39\x07\x32\x9c\x8e\x74\xea\x82\x73\x20\x55\x86\xb5\x79\x0f\x00\x00\xff\xff\xf5\x51\xfc\xe7\x8a\x02\x00\x00")

func templateUpdate_columnTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateUpdate_columnTmpl,
		"template/update_column.tmpl",
	)
}

func templateUpdate_columnTmpl() (*asset, error) {
	bytes, err := templateUpdate_columnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/update_column.tmpl", size: 650, mode: os.FileMode(420), modTime: time.Unix(1474807332, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/delete.tmpl": templateDeleteTmpl,
	"template/delete_column.tmpl": templateDelete_columnTmpl,
	"template/insert.tmpl": templateInsertTmpl,
	"template/insert_column.tmpl": templateInsert_columnTmpl,
	"template/select.tmpl": templateSelectTmpl,
	"template/select_column.tmpl": templateSelect_columnTmpl,
	"template/table.tmpl": templateTableTmpl,
	"template/update.tmpl": templateUpdateTmpl,
	"template/update_column.tmpl": templateUpdate_columnTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"delete.tmpl": &bintree{templateDeleteTmpl, map[string]*bintree{}},
		"delete_column.tmpl": &bintree{templateDelete_columnTmpl, map[string]*bintree{}},
		"insert.tmpl": &bintree{templateInsertTmpl, map[string]*bintree{}},
		"insert_column.tmpl": &bintree{templateInsert_columnTmpl, map[string]*bintree{}},
		"select.tmpl": &bintree{templateSelectTmpl, map[string]*bintree{}},
		"select_column.tmpl": &bintree{templateSelect_columnTmpl, map[string]*bintree{}},
		"table.tmpl": &bintree{templateTableTmpl, map[string]*bintree{}},
		"update.tmpl": &bintree{templateUpdateTmpl, map[string]*bintree{}},
		"update_column.tmpl": &bintree{templateUpdate_columnTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

