// Code generated by go-bindata.
// sources:
// template/delete.tmpl
// template/delete_column.tmpl
// template/insert.tmpl
// template/insert_column.tmpl
// template/select.tmpl
// template/select_column.tmpl
// template/table.tmpl
// template/update.tmpl
// template/update_column.tmpl
// DO NOT EDIT!

package sqlla

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateDeleteTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x53\xc1\x8e\xd3\x30\x10\x3d\xc7\x5f\x31\x58\x20\x25\xda\xac\x3f\x00\xb4\x17\xb6\x59\xed\xa1\x2c\x4b\x5b\x89\x03\xe2\x90\x4d\x26\x25\x5a\xd7\x69\x6c\x87\xb2\x0a\xfe\x77\xc6\x76\xda\x06\xad\x8a\xb8\x54\xee\xcc\x9b\xf7\x9e\x9f\x27\xe3\x08\x35\x36\xad\x42\xe0\x0b\x94\x68\x91\x83\x73\x6c\x1c\xaf\xe1\x6d\x55\xee\x50\x3e\xd0\x0f\xbc\xbf\x01\x11\x0e\xbf\xc1\x76\xb7\xbe\x1c\x4e\xcb\xee\x80\x1a\xae\x4f\xf8\x4e\x19\xab\x87\xca\x76\xda\x4f\xec\x75\xab\x6c\x03\xfc\x01\x0f\xef\xcc\xfa\xcb\x92\x43\xfa\x9a\x64\xd3\x5a\x89\x59\xe0\xb0\x2f\x7b\x04\xb2\x33\xd3\x75\x2e\x7a\xa2\x69\x88\xd4\x30\xb2\x84\x30\x62\x6a\x53\x83\x39\xc6\x9a\x41\x55\x90\xf6\xaf\xa6\xa9\x9d\x41\xa4\x48\xb3\x7f\x70\x13\xa9\x46\x3b\x68\x75\x19\x43\x90\xa4\xcf\x59\xe2\xbc\x1e\xa1\x74\xa9\xb6\x08\xe2\xb6\x93\xc3\x4e\x19\x42\x52\xcd\xe2\x6e\x2f\x4b\x7b\x8a\x32\x36\x39\x88\xd8\x46\x55\xfb\x6c\x2f\x99\x3d\x49\x65\xb0\xe9\xd6\xbd\x24\xc7\x29\x5d\xba\x55\xdb\x1c\xbe\x7d\xa7\x2c\x51\x37\x65\x85\xa3\xcb\x01\xb5\xee\x74\xe6\x6d\x1f\x7e\xa0\x46\x93\xc3\x4f\x13\xaa\x3e\xf7\x5e\x84\xa2\x98\x48\x58\xd2\x36\xa1\xf5\xe6\x06\x54\x2b\xfd\xd0\xf1\xb2\x9c\xe7\xbe\x14\x26\xfd\xcd\x58\xd2\x0f\xa8\x5f\x3c\x09\x5f\x14\xcb\x62\x53\xc0\xdd\xea\xf3\x27\x98\x05\xce\x03\x5d\x54\xf5\x8c\x9c\x07\xc2\x38\x77\x45\xff\xe1\xeb\x7d\xb1\x2a\x38\x5c\x4d\xa0\xc8\x3b\x09\x4e\x30\xe0\x1f\x78\xb4\x4c\xea\x31\xcf\x6b\x20\x5a\x71\x5f\x9a\xc7\xe7\x73\x46\x26\x28\xaf\xc3\xc3\x4f\xfa\xa7\xe7\xac\x9f\xc0\xf4\x52\x96\x62\xf1\xd1\xe7\xd4\x4b\xb1\x42\x33\x48\x3b\x0f\x27\xc8\xe5\x50\xea\xed\x39\x9d\x90\xfa\x6c\x51\x9d\x4b\x33\x71\x5c\x11\xe1\xf5\x1e\x9f\xe3\xbb\x5d\x58\x56\x3f\x61\xfe\x06\xde\xb5\x28\xeb\xa3\xc1\xff\xc8\x7d\x9e\xf9\xb1\x56\x3f\x89\xe2\x17\x56\xe9\xcc\xb3\x10\x22\x63\xf1\xdb\x9a\x56\xe7\xbc\x44\x7f\x02\x00\x00\xff\xff\x4e\x09\x98\xb1\xb7\x03\x00\x00")

func templateDeleteTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateDeleteTmpl,
		"template/delete.tmpl",
	)
}

func templateDeleteTmpl() (*asset, error) {
	bytes, err := templateDeleteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/delete.tmpl", size: 951, mode: os.FileMode(420), modTime: time.Unix(1474619949, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateDelete_columnTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x91\xcd\x4e\xeb\x30\x10\x85\xd7\xf6\x53\x1c\x45\x77\x91\x48\x91\xd5\x75\xa4\xac\x7a\xbb\xab\xa8\x10\x15\x1b\xc4\xc2\xd0\xa9\x88\x34\x75\x1c\xe7\xa7\x40\xea\x77\xc7\x71\xa0\xa5\x02\x89\x95\xc7\x73\xce\x37\x33\x1e\x8f\x23\x76\xb4\xaf\x0c\x21\xf9\x4f\x4c\x1d\x2d\x6b\xee\x0f\x26\x81\xf7\x41\xfa\xd7\x1e\x34\xf3\x56\x3f\x31\xdd\xe8\x03\xa1\x28\xa1\x2e\xb7\x13\xba\x7a\x19\x02\x8e\xd1\xba\x3e\x92\x0b\x98\xdc\xf7\xe6\x19\x69\x83\x5f\x78\xef\xe7\x26\x77\xb7\xeb\x6c\xd2\xd5\x8f\x3a\xdb\xaa\xe3\xc9\x97\x0e\x51\xdf\xbe\xd9\x2f\x32\x07\xbd\x5a\xd7\x42\x29\xd5\x36\xcc\x5a\x6d\x2c\x39\xdd\xd5\x2e\xfb\xa3\x13\x46\x29\x06\xed\x50\x5b\x5c\x83\x52\x54\x7b\x30\x99\x34\x16\xce\x50\x96\x58\x4c\x66\x11\x9c\xe5\xd9\xbb\x6a\x7a\xcd\x52\x78\x10\xb7\x74\x91\x23\xf3\xb0\x78\x0c\x8a\x94\xe2\xf8\x42\x2e\xae\x67\xa6\x56\x41\xbc\x1a\xff\x84\x29\x55\xbd\xd3\xb7\x27\x8e\xf7\x9a\x7b\x2a\x30\xe4\xd8\xd8\x22\x8c\x97\x63\x5e\x7e\x81\xe4\xbc\x1b\xef\x13\x2f\x45\xa3\xe6\x06\x25\xb4\xb5\x64\x76\xe9\x67\x22\x47\x3c\x32\x29\x1c\x75\xbd\x33\x68\x64\x98\x26\xc0\xc1\x33\x7d\xc5\x47\x00\x00\x00\xff\xff\x61\xbe\x3a\x63\xde\x01\x00\x00")

func templateDelete_columnTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateDelete_columnTmpl,
		"template/delete_column.tmpl",
	)
}

func templateDelete_columnTmpl() (*asset, error) {
	bytes, err := templateDelete_columnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/delete_column.tmpl", size: 478, mode: os.FileMode(420), modTime: time.Unix(1474621103, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateInsertTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x54\xc1\x6e\xdb\x30\x0c\x3d\xdb\x5f\xc1\x09\x1b\x60\xa3\xa9\x3e\xa0\x43\x2f\xeb\x0a\x2c\x40\x96\x75\x75\x6e\xc3\x0e\xae\x4d\x07\x46\x15\x39\x96\xe4\x75\x85\xa7\x7f\x1f\x25\x39\x8e\x96\xae\xc5\xb0\x5e\x02\x45\x24\x1f\x1f\xdf\x13\x3d\x8e\x50\x63\xd3\x4a\x04\xb6\x94\x1a\x95\x61\x60\x6d\x3a\x8e\xe7\xf0\xb6\x2a\x77\x28\xd6\xf4\x03\x17\x97\xc0\xfd\xe1\x17\x98\xee\xca\x5d\xfb\xd3\xaa\x7b\x40\x05\xe7\x73\x7e\x27\xb5\x51\x43\x65\x3a\xe5\x2a\xf6\xaa\x95\xa6\x01\xb6\xc6\x87\x77\xba\xf8\xba\x62\x90\x9d\x80\xe4\xc7\xda\x50\x38\x37\x2b\x8e\x7f\x5d\x8a\x79\xdc\x23\x10\xd3\x88\x92\xb5\x81\x2e\x01\x43\x28\x86\x31\x4d\x28\x87\x4f\x61\x0a\xa4\x89\x46\xf3\xb9\xdc\x27\xba\x17\xa2\xe4\x85\xff\x93\x26\x57\x9d\x18\x76\x52\xc3\xb7\xef\x54\xd8\xca\x6d\x6a\xd3\xb4\x19\x64\x05\x59\xff\xa4\x09\xa1\xe4\x10\x3a\x65\xf9\x0b\x14\xa8\xb7\x42\x33\x28\xf9\x7c\x0e\xa5\x24\x7f\x81\xbf\x80\x7e\x41\x91\xc0\xf4\x02\x62\xaa\xa3\xa5\x88\x75\xf4\xa8\x4e\x95\x72\x8b\xc0\x0f\xe4\xad\xa5\x3b\x83\xbb\xbd\x28\xcd\xec\x5d\x08\x32\xe0\x21\x8c\xb2\x76\x66\x3e\x37\xdb\xcc\x2c\x87\x4d\x57\xf4\x82\x06\xcc\x82\x22\x0b\xd2\x86\xcc\x43\xd5\x94\x15\x12\x0b\x40\xa5\x3a\x95\xbb\x29\x7b\xbd\x80\x1f\xda\xdf\x38\xa7\x7a\x1e\x88\xf3\x4d\x37\xc1\x39\x9c\x34\x69\x1b\x9f\xf1\xe6\x12\x64\x2b\x5c\xdd\x41\x1e\xc6\x4e\xc0\x27\x78\x37\x28\xa1\x0f\xa8\x1e\x1d\x2e\x5b\xae\x8b\xeb\xdb\x0d\x2c\xd7\x9b\x2f\x10\xb9\x0a\x0c\xce\xa0\xd7\xe9\x2c\x77\xa8\x38\x03\xf6\x9e\x05\x62\xd4\x6f\x52\x8c\x38\xf0\x4f\xa5\xbe\xb9\xf7\x6f\xe8\x1f\x54\xb8\xfe\x89\x55\x56\xdf\x4d\x1e\x7c\xfc\x40\x7a\xb8\xec\xe8\x6d\xda\x58\x0b\xf7\x70\x51\x68\x7c\x05\x7c\x7d\xc7\x6f\x51\x0f\xc2\x9c\xc2\x06\xe7\x82\x1e\x0b\x28\xd5\x36\x96\x7c\x72\xeb\x05\x95\x9f\xd0\x8e\x54\xa6\x9c\xb9\xa3\xc3\x23\x0e\x9e\x59\xd4\x8b\x73\x9e\xfb\x65\xfa\x53\xc2\xff\xec\xd7\xd6\x73\xaf\xd0\x9a\xaf\x4a\x6d\x82\x30\xcb\xfa\x35\x73\x1c\x17\x2e\xfa\xf4\x58\x9b\xe5\xb4\x40\x02\x2b\x5a\x59\x7e\x73\x1f\x96\x22\x6b\x6b\xba\xa5\xb7\x2d\x90\x54\xf7\xd3\x45\xee\x1d\xb0\x22\x69\xa6\x8c\x60\x84\xfb\x4a\x1d\xce\xbf\x03\x00\x00\xff\xff\x43\x27\x46\x98\x32\x05\x00\x00")

func templateInsertTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateInsertTmpl,
		"template/insert.tmpl",
	)
}

func templateInsertTmpl() (*asset, error) {
	bytes, err := templateInsertTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/insert.tmpl", size: 1330, mode: os.FileMode(420), modTime: time.Unix(1474619949, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateInsert_columnTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x8e\xb1\x0a\xc2\x30\x10\x86\xe7\xe6\x29\x8e\xe0\xd0\x2e\x79\x00\xa1\x53\x27\xa1\x0a\x62\x71\x11\x87\x68\xaf\x50\xb8\xa6\x6d\x9a\x54\xa4\xde\xbb\x9b\x2a\xea\xa0\xe0\xf6\x87\xff\xff\xbe\xdc\x34\x41\x89\x55\x6d\x10\xe4\xca\x0c\x68\x5d\xd6\x92\x6f\x8c\x04\xe6\x50\x2d\x86\x46\x13\x15\xfa\x44\xb8\xd1\x0d\xc2\x32\x05\xf5\x79\xdd\xc0\xb5\x59\x08\xf4\x48\x79\x7b\x41\x1b\x30\x51\x79\x73\x86\xb8\x87\x1f\x3c\xf3\xf3\x93\xdd\x36\x4f\x60\xaf\xc9\x63\x18\xa9\x2f\x59\x51\x3b\x9a\xc7\xf1\x38\x4b\x54\x71\xed\x5e\x78\xf2\xc7\x0a\x93\x88\x7a\x35\xa0\x5b\xeb\xee\x20\xdf\x72\x66\x79\x84\x14\x46\x11\x59\x74\xde\x1a\xe8\x05\x0b\x11\x6a\x34\xe5\x7c\xf2\x3d\x00\x00\xff\xff\x69\xeb\x49\xef\x06\x01\x00\x00")

func templateInsert_columnTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateInsert_columnTmpl,
		"template/insert_column.tmpl",
	)
}

func templateInsert_columnTmpl() (*asset, error) {
	bytes, err := templateInsert_columnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/insert_column.tmpl", size: 262, mode: os.FileMode(420), modTime: time.Unix(1469011271, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateSelectTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x55\x41\x4f\x1b\x3b\x10\x3e\xef\xfe\x8a\x79\xd6\x7b\x68\x17\x82\xc5\x93\x9e\xde\xa1\x55\x0e\x6d\x1a\x04\x55\xa0\x40\xa8\x7a\x40\x1c\x96\xc4\xa1\x2b\x1c\x3b\x6b\x6f\x08\x28\xdd\xff\xde\x19\x7b\x9d\x5d\x48\x08\x39\x54\x42\x21\xb6\x67\xbe\xf9\x66\xe6\x9b\xc9\x72\x09\x63\x31\xc9\x95\x00\x36\x14\x52\x8c\x4a\x06\x55\x15\x2f\x97\x87\xf0\xf7\x28\x9b\x0a\x79\x8e\x1f\xf0\xa1\x0b\xdc\x7d\xf9\x05\xa5\xee\xd1\xb5\xfb\x36\xd0\x0b\x61\xe0\x70\x65\xaf\x95\x2d\xcd\x7c\x54\x6a\x43\x1e\x33\x93\xab\x72\x02\xec\x5c\x2c\xfe\xb1\xc3\xcb\x01\x83\x64\x1d\xe4\x3a\x2f\xa5\x48\x1d\xc6\x63\x66\x20\x93\xb2\xa7\xe5\x7c\xaa\x2c\x74\xe1\xe6\x16\xe1\x72\x75\xbf\x8c\x23\x64\x69\x32\x75\x2f\x80\x87\xe7\xaa\x62\x78\xe9\x01\xf1\x7b\x07\x0f\x42\x8d\x89\x7b\x15\xc7\xe5\xf3\x4c\x00\xde\xb4\x52\xa8\x2a\x9f\x1e\x12\x01\xcf\x12\x3c\x6e\x80\xc0\x87\x38\x0a\xe8\x21\x74\x1c\x69\x33\xc6\x1c\x01\xc2\x59\xe6\xd3\xbc\xc4\xf3\xfe\x1c\xb3\xfb\xff\x3f\x8a\x36\x99\xab\x11\x24\xc5\x7a\xc0\xcb\x41\x0a\x3e\x6a\x92\x6e\xa1\x83\x3c\x8c\x28\xe7\x46\xbd\x6d\x83\x26\x51\xd1\xc1\x8f\xa6\x40\x74\x62\x8c\x3e\x55\x2e\xf1\x5f\xb5\x95\x4a\x00\x4a\x61\x40\x09\x24\x12\x3c\xff\x77\x78\x15\xdc\xe7\xdb\x85\x3d\xb9\x62\x59\x50\xa4\x4d\x1d\xc1\xbb\x52\x4c\x67\x32\x2b\x57\x6a\xf2\x8f\x0c\xb8\x7f\xae\x5b\xb4\x03\xcd\x6b\x3d\x2c\x24\x96\x2d\xf1\x85\xef\x60\x4b\x90\xb0\x30\x93\x6c\x24\x96\x55\x07\x84\x31\xda\xa4\xc4\x71\x54\xc7\x47\xc9\x79\x5b\xcb\xbf\xea\x5c\x25\x45\x60\xd6\x01\x86\x7f\x69\x1c\x2d\x7e\x0a\x23\xf0\xf8\x68\x9d\x3f\x79\x14\xdc\x5d\xf2\x3a\x5c\x1c\xe5\x13\xf7\xf4\x57\x17\xb0\xac\x04\x1f\xb2\xc6\x5a\xd3\x95\xf3\xa4\x6a\x63\x71\xe6\xc2\x3c\x13\x08\x1b\xf6\x07\xfd\xde\x35\x30\x38\x80\xc0\xe6\x00\x4f\xc7\x57\xdf\xce\xa0\xad\x52\x07\xef\x59\x50\x04\xc6\x5c\x00\x8f\x73\x80\x67\xf8\x71\xd2\xbf\xea\x13\x8c\x37\xa2\x38\xcd\x73\xc1\x9d\x18\x1d\x48\x68\x4c\x8b\x67\x0b\x66\x70\x7a\x76\xea\xe9\x60\x45\x70\x2c\x1f\xf9\xb1\x36\xd3\xac\xfc\x8e\x25\x4c\xf6\x6b\xdf\x0e\xfc\x7b\x94\xfa\x4c\x42\x63\x3d\x02\xb0\x8f\xcc\x17\x09\xa1\x7d\xaf\x0f\x01\x63\xf2\x93\xcc\x5e\x3c\x34\xfd\xb3\x2e\xb7\xa1\x1b\xa6\x3a\xc3\x96\xde\x93\x2d\xcd\x7d\xa5\xf8\xd6\xde\xa8\xaa\x24\xe5\x01\x83\x13\xfe\xc5\x83\x6f\xe3\x1b\xbb\x83\x3c\xec\x4b\xc3\xe3\x5c\xc8\x71\x20\x14\xd3\x72\x72\xba\xa3\x1d\xb3\x8b\xf2\x86\x28\x21\x29\x92\xf1\x1d\xd8\x42\xca\x8c\x7f\xf9\xec\x93\x79\x99\x69\x5b\x81\x2b\xa5\xe1\x9c\x34\x03\x5a\x77\xae\x03\x99\xb9\x6f\x0b\xee\x7d\xa9\xad\x05\xab\x05\x5f\x37\x4b\x2f\x08\x68\x7c\xc7\x2f\x09\xff\x4a\x2f\x92\x56\x20\xce\x79\xda\x34\x94\x0f\x47\x99\x4a\xd0\x23\xdd\x71\x3b\x7c\x92\xf2\x55\xe6\x37\xb7\x5b\x73\x37\x6e\xf0\xa6\xd9\x83\xd8\x6c\x79\x54\xcb\xec\x4f\xd7\xe8\xe5\x28\x62\x86\x8d\x7b\xa8\xcc\x7a\x59\x76\x42\x8b\xf0\xf7\x10\x57\x3e\x41\xf2\x9e\xd4\x56\x10\x8f\x89\xae\x6f\xce\xc5\x93\xdb\xe6\xe4\xdb\x22\x1c\xea\x6c\xd1\x76\x43\x98\xf5\x38\x14\x88\x8a\x87\xd5\x98\xcd\x50\x9e\x89\xc1\x04\x8c\x9b\xc7\x60\x6c\x9a\x09\xdc\x45\xb6\xc4\xc0\xd6\x9d\xa3\x83\x12\xe6\x3d\xe1\xd2\x4f\x2e\xc9\x69\xcd\x28\x8e\xea\xcc\xac\xcf\x0c\xb9\x6e\x5a\xf8\x7b\xe8\x4c\xb3\x97\xe4\x6a\x2c\x9e\xfc\x9e\xb3\x70\x94\x12\x18\x4e\x11\x45\xf3\x9e\xf5\xde\x8f\x1a\x69\xa2\xa7\xaf\xc4\x6a\x3e\xf1\xfd\x77\x00\x00\x00\xff\xff\x26\x7f\x88\xa5\x8d\x08\x00\x00")

func templateSelectTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateSelectTmpl,
		"template/select.tmpl",
	)
}

func templateSelectTmpl() (*asset, error) {
	bytes, err := templateSelectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/select.tmpl", size: 2189, mode: os.FileMode(420), modTime: time.Unix(1474619949, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateSelect_columnTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x53\x4d\x6b\xdb\x40\x10\x3d\x6b\x7f\xc5\x20\x7a\x90\x88\xb3\xa4\x50\x7a\x10\xe8\x90\x38\x3e\x18\x92\x3a\x8d\x4d\xa1\x84\x1c\xb6\xf6\x98\x0a\xaf\x57\xd2\xea\x23\x4d\x15\xfd\xf7\xce\xee\x5a\x89\xe5\x1a\xa2\x52\x9f\xb4\xda\x37\x6f\xdf\xcc\x9b\x99\xa6\x81\x15\xae\x13\x85\xe0\xcf\x51\xe2\xb2\x1c\xa7\xb2\xda\x2a\x1f\xda\x96\xa0\x0f\xc5\x56\x48\xb9\x10\x3f\x24\x7e\x11\x5b\x84\x28\x06\xfe\xf6\xf7\x02\x65\x3a\xa6\x83\xb4\xa7\x9b\xf4\x09\x35\xd1\xd8\xba\x52\x4b\x08\x72\x38\xc2\x6f\x5b\x27\x32\xff\x7a\x13\x1a\x9c\xff\xf5\xce\x22\x29\xa5\x89\x0b\x6a\x8b\x2f\x9e\xb3\x8e\x39\x02\xfc\x95\xe9\x02\x38\xe7\x45\x2e\xa5\xe0\xb3\x0c\xb5\x28\x53\x1d\xbe\xa3\x04\x0d\xf3\x6a\xa1\x21\xcd\xa0\x4f\x64\x5e\xb2\x06\x89\x2a\xb0\x0f\x87\x10\xc7\x70\x61\x82\x3d\x8a\x8c\x5f\x63\x27\x79\x25\x24\xf3\x5a\x40\x59\xe0\x1b\x6c\x39\x0f\x17\x8f\x84\x30\xe6\x3d\xfd\x44\x6d\xed\x71\xac\x09\x81\xbd\xf4\x5f\xc0\x5c\x25\xbf\x71\xaf\xc4\xe6\x9b\x90\x15\x46\x50\x8f\x60\x96\x45\x94\xde\x08\x9c\xf9\x11\xf8\xaf\xde\xb4\xad\xdf\x32\x2f\xe7\x4e\x20\x06\x91\x65\xa8\x56\xc1\xee\x62\x04\xf6\x13\x32\x4f\x63\x59\x69\x05\x39\xa3\x6c\x4e\xd2\x80\xa9\x3a\xd6\x82\xda\xfa\x7f\x70\x3d\xa4\x01\x47\x0c\xba\xad\x64\x99\x0c\x74\xa9\x88\xba\xca\x1f\x1e\x0f\xd4\x9b\xda\xe6\x45\x69\x85\xce\x48\xa7\x70\x2b\x36\x38\x55\x5d\xab\x03\xd3\xe6\x9a\x7a\x7c\x06\x1f\xc3\x53\xf9\x4c\x64\x1a\x20\x3e\x2d\xee\x36\x70\xfe\x0f\x83\x7f\xb7\x71\xfa\x41\xb6\x81\x44\x95\x9f\x3f\xfd\xdf\x68\x1b\x57\x0f\x3c\xa1\x97\xf7\x72\xe5\xef\x6c\xda\x4e\xde\x38\x48\x65\x35\xcd\x39\x50\xe9\x66\x93\x07\x57\x34\xd3\x2b\xd4\x57\xcf\x47\x74\xe8\xfd\xd4\x80\xdd\x3a\x99\xf3\x90\xaa\x72\xee\x68\x31\xf8\x30\xbb\xbf\x9e\xdc\xc3\xd5\x77\xd8\xef\x96\x5d\xde\x5d\x4c\x37\x55\x97\xc5\xd2\x2e\x68\x47\x3e\x33\xec\xcb\xf9\xd8\xef\xad\x6f\x0f\xbd\x9e\x38\x98\xf5\x5a\x4b\x42\x3b\x0b\xfe\x04\x00\x00\xff\xff\x09\x09\xc3\x45\x20\x05\x00\x00")

func templateSelect_columnTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateSelect_columnTmpl,
		"template/select_column.tmpl",
	)
}

func templateSelect_columnTmpl() (*asset, error) {
	bytes, err := templateSelect_columnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/select_column.tmpl", size: 1312, mode: os.FileMode(420), modTime: time.Unix(1474621483, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateTableTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\xc1\x4e\xf3\x30\x10\x84\xcf\xf1\x53\xac\xac\xff\xd0\x1e\xea\xde\x7f\x89\x13\x1c\x40\xaa\xaa\xa2\x82\x38\xbb\xee\x36\x8d\xea\xd8\x89\xbd\x21\x42\x26\xef\xce\xda\xad\x10\x88\xdc\x46\xde\x9d\x6f\x66\xdd\x69\x73\xd1\x35\x42\x4a\xa0\x76\x57\xbd\xd5\x2d\xc2\x34\x09\xd1\xb4\x9d\x0f\x04\x0b\x51\xc9\x48\xa1\x71\x75\x94\x57\x69\xbc\x7b\x67\x99\xd2\x0a\x9a\x13\xa8\x47\x1d\x77\x97\xec\xa8\xe4\x51\x93\x3e\xe8\x88\xeb\xd8\xdb\xdb\x06\xba\x63\xa1\x55\xb2\x6e\xe8\x3c\x1c\x94\xf1\xed\xba\xe5\x28\xc4\x75\xed\x57\xbc\x68\xb5\x14\x4b\xc1\x0d\xfe\x19\x8e\xb6\x25\xff\xff\x1d\xa8\x22\x3e\x81\xfc\x7d\x7e\x2e\x6a\xe3\x47\x0c\x19\x47\x1f\x5d\x29\xfd\xc3\x32\x4d\xfb\xe7\x0d\x70\xbd\xc1\x10\x24\x51\x8d\x67\x0c\x08\x85\xaf\xde\xb2\x16\xdc\xe2\x34\x38\x03\x5b\x1c\xf3\xbd\x7f\xf8\x2f\x0d\xd9\x1b\x67\xb1\x84\x21\x62\xc8\x44\x46\xf5\xb9\xcf\x4c\x5a\xe2\x9b\x03\xd2\x10\x1c\xf4\x99\xce\x2b\x84\x6d\x67\x35\x21\xc8\x3d\x5a\x34\x24\x41\xe5\xbe\xbf\x26\xaf\x1d\xff\x13\xce\x4d\x9e\x1c\x87\xce\x7a\x1e\x98\xf6\xed\xf9\x0a\x00\x00\xff\xff\xb5\xcf\xe3\x69\xb6\x01\x00\x00")

func templateTableTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateTableTmpl,
		"template/table.tmpl",
	)
}

func templateTableTmpl() (*asset, error) {
	bytes, err := templateTableTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/table.tmpl", size: 438, mode: os.FileMode(420), modTime: time.Unix(1474619949, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateUpdateTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x54\xdb\x4e\xdb\x40\x10\x7d\xb6\xbf\x62\xba\x6a\x25\x5b\x84\xfd\x80\x54\x79\xa0\x90\x8a\x07\x8a\x52\x12\xc4\x03\x42\x95\xb1\x27\xa9\xc5\xc6\x97\xdd\x75\x53\xe4\xfa\xdf\x3b\x7b\x71\xe3\x34\x09\x45\xa8\x2f\xd6\xee\xce\xcc\x39\x67\x6e\x6e\x5b\xc8\x70\x99\x17\x08\xec\xb6\xca\x12\x8d\x0c\xba\x8e\x1e\xdf\xa7\xc9\x1a\xc5\x35\x7d\x60\x3c\x01\x6e\x0f\xbf\x40\x97\xe7\xe6\xd9\x9e\xae\xca\x0d\x4a\x72\x0e\xdb\xf6\x94\xdc\xcb\x42\x69\xd9\xa4\xba\x94\x26\xa0\x92\x79\xa1\x97\xc0\xae\x71\xf3\x41\xcd\xbf\x5e\x31\x88\xf6\x31\x16\xb9\x16\x18\xc3\x29\x61\xe8\xe7\x0a\x61\x97\xb6\xeb\x9c\x20\x8a\x06\x07\x0d\x6d\x18\x90\x0f\xf7\x66\x32\x84\x81\x42\xfd\x25\xa9\x02\x55\x0b\x91\xf0\xb9\xbd\x84\xc1\x79\x29\x9a\x75\xa1\xe0\xfe\x81\x02\xf3\x62\x15\x76\x61\xb8\x6c\x8a\x14\xa2\x7a\x8f\x84\x50\x62\x70\x4c\x51\xfc\x82\x04\xe2\x96\xa8\x1b\x59\x1c\xf7\x21\x97\xe0\x00\xfc\x18\xea\x11\x59\x9c\xd2\x31\x0c\xa5\xb6\x1d\x59\x3a\x23\x8f\xe2\x64\x52\xac\x10\x78\x2f\xde\xb6\x41\xe3\xba\x12\x84\xde\x77\xc7\x19\x19\x70\x67\xc6\x22\x33\x1d\x38\x96\xdb\x1f\x65\x31\x2c\xca\x79\x2d\x28\xc1\xc8\x55\x64\x44\xb5\xa1\x0e\xa1\x5c\x26\x29\x92\x0a\x40\x29\x4b\x19\x9b\x2c\x49\xa7\x97\x30\x02\xf5\x43\x59\x93\x69\x69\xcd\x5d\x06\x7c\x51\x7a\x5c\x03\x18\x06\xf9\xd2\x7a\xbc\x9b\x40\x91\x0b\x03\xd0\xd7\x89\xb1\xbf\x58\x3c\x8f\xc9\x38\xd8\x7c\x47\x89\x04\xbe\xd9\x61\xb0\xaf\xdc\x6b\x7d\x23\x74\x18\xd4\x0d\xca\x67\x03\xc8\x6e\x67\x17\x67\x8b\x29\x0c\x86\x06\xe6\xd3\x05\x83\x13\xd8\x66\x69\x69\x9c\x1c\xc3\xc4\x98\x25\x72\x18\x27\x74\x87\xbb\xcb\xe9\xcd\xd4\xc4\x38\x27\xc7\xe1\x85\x78\x37\x60\x1f\x49\x51\x52\x55\xd4\x90\xc8\x16\x8d\xf2\xe2\x9c\xc7\x23\xa3\xdc\xf5\xf7\x14\x88\x87\x5f\x26\x6a\xf6\xb4\xed\x99\xb2\xda\xe6\x76\xbc\xbd\xc2\xb7\x4c\xe3\x60\xf9\xba\x2e\x8a\x79\x8f\xc0\xef\x8c\x64\x43\x31\x7b\x72\xe9\x1e\xd9\x42\x13\xa6\xf8\x8e\xe3\xe7\x1c\x45\xd6\x6b\x7a\x69\x83\x06\x53\x36\xfd\x89\x69\x94\x3d\xfa\x19\xbf\xf8\x44\xf3\x76\xff\xb0\x97\xe1\x70\xda\x6c\x01\xa9\x74\x72\x35\x9c\x83\x7f\x4f\x00\x5d\xb7\xc3\xf4\xcd\x85\x4e\x20\x7b\xe4\x56\xc2\x00\xd5\x74\xe1\xb5\x38\x75\xed\xe8\x0f\x2c\xf1\xa0\xe5\x35\x2d\xaf\xc0\x54\x53\x79\xcf\x84\xa0\x74\x4d\x75\x4c\x7f\x51\x28\x7c\xe5\x3a\x1e\x28\x14\x1d\xf9\x0d\xaa\x46\xe8\xff\x5e\x1f\xff\x76\xac\x3a\x5e\xbd\xfb\x97\x6c\xff\x2a\xbf\x03\x00\x00\xff\xff\xef\x9e\x33\xb7\x1b\x06\x00\x00")

func templateUpdateTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateUpdateTmpl,
		"template/update.tmpl",
	)
}

func templateUpdateTmpl() (*asset, error) {
	bytes, err := templateUpdateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/update.tmpl", size: 1563, mode: os.FileMode(420), modTime: time.Unix(1474619949, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateUpdate_columnTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x52\x3f\x6f\xbb\x30\x10\x9d\xf1\xa7\x78\x42\xbf\x01\x24\x64\x65\x46\x62\x8a\xb2\xe5\xd7\xa8\x4a\xda\x0e\x51\x06\xb7\xb9\xa8\x48\x06\x8c\x31\xa4\x2d\xf1\x77\xaf\x0d\x6d\x52\xd4\x4a\x4d\x27\x8c\xdf\x9f\x7b\xe7\xbb\xbe\xc7\x9e\x0e\x79\x49\x08\xef\xd4\x5e\x18\x9a\x57\xb2\x2d\xca\x10\xd6\x3a\xe8\x5f\x53\x08\x29\x37\xe2\x51\xd2\x8d\x28\x08\x69\x06\x7e\xf9\x3b\xc1\x54\x73\x77\x90\xc3\x69\x59\x1d\x49\x3b\x19\x3b\xb4\xe5\x13\xa2\x1a\x3f\xe8\xad\x1d\x8b\xac\x6f\x97\x31\xd6\x64\x1c\x85\x7f\xb3\xda\xe4\x46\x7a\x6a\xd4\x79\x0b\xbe\x79\x55\x9f\xe2\xf8\x17\x4f\xf4\x2c\xa8\x79\x43\xe6\xbf\x50\xdb\xf0\x6c\x6e\x6d\xb8\x43\x86\x8e\x05\x9a\x4c\xab\x4b\xd4\xcc\xb2\xab\x63\x3e\x3c\x93\xa6\x3f\x06\x4d\x40\x2f\x4a\x37\xe0\x9c\x37\xb5\x94\x82\xaf\x14\x69\x61\x2a\x7d\x4d\x07\x9d\xd0\xa8\x14\xa6\x42\x16\xe4\x07\x48\x2a\xa3\xc1\x38\x46\x96\x61\xe6\xc9\x81\x63\x66\x67\xee\xa2\x6e\x85\x64\x81\x05\xc9\x86\x2e\xf0\xa0\xd9\xce\x76\x0e\x61\x2c\x38\xfa\x86\xfc\x28\x47\xd5\xc2\x81\x93\xf8\x27\xf8\xab\xfc\x8d\xbe\xb4\xd8\xdf\x0b\xd9\x52\x8a\x2e\xc1\x4a\xa5\x2e\x5e\x82\x71\x51\x52\x4c\xde\xd9\xfa\x01\x8c\x05\x32\x08\xa5\xa8\xdc\x47\x1f\x17\x09\x86\x4f\x3c\x9d\x82\x13\x3b\x8e\x5f\x9b\xf7\x00\x00\x00\xff\xff\xc5\xca\xb5\x43\x8a\x02\x00\x00")

func templateUpdate_columnTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateUpdate_columnTmpl,
		"template/update_column.tmpl",
	)
}

func templateUpdate_columnTmpl() (*asset, error) {
	bytes, err := templateUpdate_columnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/update_column.tmpl", size: 650, mode: os.FileMode(420), modTime: time.Unix(1474621091, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/delete.tmpl": templateDeleteTmpl,
	"template/delete_column.tmpl": templateDelete_columnTmpl,
	"template/insert.tmpl": templateInsertTmpl,
	"template/insert_column.tmpl": templateInsert_columnTmpl,
	"template/select.tmpl": templateSelectTmpl,
	"template/select_column.tmpl": templateSelect_columnTmpl,
	"template/table.tmpl": templateTableTmpl,
	"template/update.tmpl": templateUpdateTmpl,
	"template/update_column.tmpl": templateUpdate_columnTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"delete.tmpl": &bintree{templateDeleteTmpl, map[string]*bintree{}},
		"delete_column.tmpl": &bintree{templateDelete_columnTmpl, map[string]*bintree{}},
		"insert.tmpl": &bintree{templateInsertTmpl, map[string]*bintree{}},
		"insert_column.tmpl": &bintree{templateInsert_columnTmpl, map[string]*bintree{}},
		"select.tmpl": &bintree{templateSelectTmpl, map[string]*bintree{}},
		"select_column.tmpl": &bintree{templateSelect_columnTmpl, map[string]*bintree{}},
		"table.tmpl": &bintree{templateTableTmpl, map[string]*bintree{}},
		"update.tmpl": &bintree{templateUpdateTmpl, map[string]*bintree{}},
		"update_column.tmpl": &bintree{templateUpdate_columnTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

