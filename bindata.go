// Code generated by go-bindata.
// sources:
// template/delete.tmpl
// template/delete_column.tmpl
// template/insert.tmpl
// template/insert_column.tmpl
// template/select.tmpl
// template/select_column.tmpl
// template/table.tmpl
// template/update.tmpl
// template/update_column.tmpl
// DO NOT EDIT!

package sqlla

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateDeleteTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x53\xc1\x6e\xd3\x40\x10\x3d\xdb\x5f\x31\xac\x40\xb2\x55\x67\x3f\x00\xd4\x0b\x8d\xab\x1e\x4a\x29\x49\x10\x07\xc4\xc1\xb5\xc7\xc1\xea\x66\x1d\xef\xae\x29\x95\xd9\x7f\x67\x67\xd7\x71\x0c\x55\x8a\x84\x7a\x89\x9c\x99\x37\xef\xbd\x79\x1e\x0f\x03\x54\x58\x37\x12\x81\x2d\x51\xa0\x41\x06\xd6\xc6\xc3\xb0\x80\xd7\x65\xb1\x43\x71\xe3\x7e\xe0\xed\x39\x70\xff\xf0\x0b\x4c\x7b\x41\x65\xf7\xf4\x59\x9a\xc6\x08\x84\xc5\x84\x6f\xa5\x36\xaa\x2f\x4d\xab\x68\x62\xaf\x1a\x69\x6a\x60\x37\xf8\xf0\x46\xaf\x3f\x5d\x33\x48\x9e\x92\x6c\x88\x22\xf5\x1c\xe6\x71\x8f\xe0\xec\xcc\x74\xad\x0d\x9e\xdc\x34\x04\x6a\x18\xe2\xe8\x6f\x8c\xeb\xc6\x36\x8e\xeb\x5e\x96\x90\x74\x4f\x28\x5c\x3b\x85\xc0\x93\xa4\xcf\x08\x38\x66\x85\xa6\x57\xf2\x34\xc6\x41\xa2\x2e\x8b\x23\x4b\x7a\x0e\xa5\x0a\xb9\x45\xe0\x17\xad\xe8\x77\x52\x3b\xa4\xab\x19\xdc\xed\x45\x61\xa6\x3c\x43\x93\x01\x0f\x6d\x94\x15\x05\x7c\xca\xec\x24\x95\xc2\xa6\x5d\x77\xc2\x39\x4e\xdc\xe6\x8d\xdc\x66\xf0\xf5\x9b\x0b\x14\x55\x5d\x94\x38\xd8\x0c\x50\xa9\x56\xa5\x64\xfb\xe1\x3b\x2a\xd4\x19\xfc\xd0\xbe\x4a\xe1\x77\xdc\x17\xf9\x48\x12\x47\x4d\xed\x5b\xaf\xce\x41\x36\x82\x86\x0e\xcb\x32\x96\x51\xc9\x4f\xd2\x66\x71\xd4\xf5\xa8\x1e\x89\x84\x2d\xf3\xeb\x7c\x93\xc3\xe5\xea\xe3\x07\x72\xca\x47\x93\xcc\xd3\x05\x55\x62\x64\xcc\x13\x86\xb9\x33\xf7\x1f\xbe\x5c\xe5\xab\x9c\xc1\xd9\x08\x0a\xbc\xa3\xe0\x08\x03\xf6\x8e\x05\xcb\x4e\xfd\xf8\xfe\xe0\xd9\x4c\xf2\x9f\x58\x26\xd5\x1d\xe8\x4e\x88\x82\x2f\xdf\x53\x3a\x9d\xe0\x2b\xd4\xbd\x30\xf3\x48\xbc\x48\x06\x85\xda\xce\x33\xf9\x77\x1a\xf3\x24\x0e\xb5\xea\x8e\x7b\xdd\x19\x27\xe7\x3c\x0d\x37\xb0\x00\xc7\xc5\xaf\x0a\x7d\x7b\x7f\x7c\xaf\xda\xa7\xb5\xf6\x17\x3b\x2e\x31\x9d\xe0\xff\xba\xf7\xa9\xcc\xbe\x30\x6b\x93\x94\x1f\xce\x9a\x93\xde\xed\x7d\xb8\xb5\x13\x5f\x19\x4d\xe8\x3f\x81\x97\x0d\x8a\xea\x60\xf0\xc5\xd3\xa1\x70\xc6\x73\x3f\x1e\xfe\xef\x00\x00\x00\xff\xff\x11\x95\x6f\x23\x70\x04\x00\x00")

func templateDeleteTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateDeleteTmpl,
		"template/delete.tmpl",
	)
}

func templateDeleteTmpl() (*asset, error) {
	bytes, err := templateDeleteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/delete.tmpl", size: 1136, mode: os.FileMode(420), modTime: time.Unix(1474851811, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateDelete_columnTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x92\xcb\x6e\xb3\x30\x10\x85\xd7\xf6\x53\x8c\xd0\xbf\x00\x09\x59\x59\x23\xb1\xca\x9f\x45\xa4\xa6\x51\xd5\xb4\x9b\xaa\x0b\xb7\x99\xa8\xa8\x13\x63\x6c\x43\x2f\xc4\xef\x5e\x03\xb9\x34\x6d\xa4\x66\x91\x15\xc6\x67\xce\xcc\xf0\x1d\xda\x16\x96\xb8\x2a\x14\x42\xf4\x1f\x09\x1d\x8e\x4b\xaa\xd7\x2a\x02\xef\x83\xf4\xcf\xae\x25\xd1\x42\x3e\x11\x5e\xcb\x35\x42\x96\x83\x38\xbc\x6d\xc0\x95\xe3\x70\xa0\x70\xba\x53\xae\x70\x84\xc1\xc6\x57\xb5\x7a\x86\xb8\x82\x13\x7e\xef\x87\x21\xb7\x37\x57\x49\xa7\x8b\x5f\x7d\x16\xdb\x2e\x71\xd3\xeb\x8b\x0f\xbd\x73\xa6\x80\xef\xda\x58\x10\x42\xd8\x8a\x48\x8a\xb9\x46\x23\x5d\x69\x92\x3f\x26\x41\xcb\x59\x23\x0d\x94\x1a\x8e\x8d\x9c\x15\x2b\x20\x54\x71\xdf\x38\x81\x3c\x87\x51\x57\xcc\x42\x65\xbe\xaf\x9d\x54\xb5\x24\xce\x3c\x20\x59\x3c\xc8\xbd\xe7\x61\xf4\x18\x14\xce\xd9\xdb\x0b\x9a\x1e\xcf\xe0\x9a\x04\xf1\x68\xfd\x0d\x74\x57\xc5\x27\x7e\xfb\xc4\xf6\x5e\x52\x8d\x19\x34\x29\xcc\x75\x16\xd6\x4b\x61\x80\x9f\x41\xb4\x67\xe3\x7d\xe4\x39\xab\xc4\x30\x20\x07\xa9\x35\xaa\x65\xbc\xbd\x48\xa1\x7f\x24\x9c\x19\x74\xb5\x51\x50\xf1\xb0\xcd\x65\x12\x98\xaa\xb8\xe9\x69\xff\xc8\xe1\x1c\xdc\x27\x70\xcc\x6a\x72\xc5\x99\x4c\x6c\x80\x62\x07\x2a\x43\x83\x99\x7c\xc5\xa9\xda\xe5\x16\x77\x99\x35\x36\x49\x2e\x04\x2c\x78\x43\x49\xf7\xeb\x7e\x05\x00\x00\xff\xff\x64\x49\x63\x66\x0e\x03\x00\x00")

func templateDelete_columnTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateDelete_columnTmpl,
		"template/delete_column.tmpl",
	)
}

func templateDelete_columnTmpl() (*asset, error) {
	bytes, err := templateDelete_columnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/delete_column.tmpl", size: 782, mode: os.FileMode(420), modTime: time.Unix(1474851811, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateInsertTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x55\x4d\x6e\xdb\x3c\x10\x5d\x8b\xa7\x98\x4f\xf8\x0a\x48\x88\xc3\x03\x24\xc8\xa6\x49\x80\x18\x48\xdd\x34\x76\x57\x45\x17\x8a\x35\x0a\x04\x33\x94\x45\x52\x69\x03\x95\x77\xef\x50\x94\x54\x56\x96\xdd\x02\xdd\x18\x22\xe7\xef\xcd\x7b\xc3\x71\xdb\x42\x8e\x45\x29\x11\xe2\xa5\xd4\xa8\x4c\x0c\xd6\xb2\xb6\x3d\x87\xff\xb7\xd9\x0b\x8a\x15\xfd\xc0\xc5\x15\xf0\xee\xe3\x07\x98\xea\xda\x5d\xd3\xd7\x67\x69\x4a\x23\x10\xce\x47\xff\x4a\x6a\xa3\x9a\xad\xa9\x94\x8b\xd8\xab\x52\x9a\x02\xe2\x15\x7e\x7b\xa7\xd7\x9f\xee\x63\x48\x26\x49\xd2\x2e\xd6\xbc\xed\x11\x08\x46\x50\xcf\x5a\x8f\x85\xa2\xc0\xa7\x84\x96\x45\x53\x1f\xb2\xb2\x48\xa3\xf9\x90\xed\x23\x5d\x0b\x91\xf1\x75\x77\x60\xd1\x75\x25\x9a\x17\xa9\xe1\xcb\x57\x8a\x2e\xe5\x33\xb3\x8c\x15\x8d\xdc\x42\x52\x1f\x54\xa2\x2c\x29\xf8\x72\x49\x7a\x02\x07\x01\x50\x68\x1a\x25\x8f\xfb\x90\xcb\x1c\xc8\x0b\xa8\x17\x64\xf1\x48\x2f\x20\x84\xda\x5a\xb2\x58\x07\x8f\xe2\x54\x26\x9f\x11\xf8\x00\xde\x5a\xba\x33\xf8\xb2\x17\x99\x19\xd5\xf1\xc6\x18\xb8\x37\xa3\xcc\x9d\x5c\xc7\x7a\x1b\x91\xa5\xb0\xa9\xd6\xb5\xa0\x06\x13\xcf\xc8\x82\xb8\x21\x79\x50\x15\xd9\x16\x09\x05\xa0\x52\x95\x4a\x5d\x97\xaf\x99\x72\x27\x7f\xe3\x8f\x1a\x02\x5f\xb8\x72\x75\xf8\xba\xd3\xa5\x2f\xd4\x5a\x16\x95\x05\x98\x05\x54\x3b\xa7\xbd\xe6\xc9\x14\xcb\x0d\x16\x59\x23\x8c\x87\x74\x57\x55\x3b\x54\xe9\xa5\x73\x77\xac\xd5\x1d\x00\xca\x6c\xf8\x81\x5f\x52\xa7\xe4\x41\xd9\x9d\xc7\x7f\x57\x20\x4b\xd1\xc5\x0c\x72\xc4\xf1\xa4\x99\xbe\x1d\x72\xb1\x8e\xdc\xa8\xd6\x0b\x78\xd5\xbe\x02\x61\xab\xb9\x57\x82\x6f\xaa\x9e\x1f\x47\x0c\x9b\xa9\xf0\xc7\x02\xa4\x5b\x54\x37\xa8\xde\x5c\xde\x78\xb9\x5a\xdf\x3e\x6e\x60\xb9\xda\x7c\xec\x18\xea\x1b\x87\x18\xce\xa0\xd6\x6c\x9c\x1f\x1f\x71\x06\xf1\x65\xec\x81\x51\xbd\x7e\x04\x08\x03\xbf\xcb\xf4\xc3\xae\x7b\x19\x7f\x21\xeb\xed\x77\xdc\x26\xf9\x53\x3f\x54\x37\xef\x49\xe0\x03\x71\x02\x71\xdd\x3b\x45\xa1\xf1\x1f\xd2\xd3\x27\x7f\x44\x4d\x12\x4d\xf3\xfa\x59\xf4\x84\x2c\x20\x53\xcf\x21\xe7\xfd\xfc\xcd\xd1\x7c\xd0\x77\x14\xbc\xb4\xe9\x9c\x0d\xd2\x8e\x9d\x84\xfe\x94\xf1\x37\x7b\x8f\xc8\x3a\xea\x47\xc4\x0e\x4f\xfe\xc4\xbb\xd6\x02\xac\x9c\xf3\x94\xcd\x60\x39\x3a\x16\xc7\xc1\xb9\xa8\x7c\xac\xe5\x4b\xf3\xfb\x4c\xf7\x43\xbd\xcc\x4f\x8e\xdb\xc9\xbc\xe1\x0a\x0a\xd6\xad\xb5\x49\x4a\x2b\x45\xe0\x96\x96\x18\x7f\xd8\xf9\x35\x91\x94\x39\xdd\xd2\x6b\x17\x48\x22\x76\xdd\x05\xf2\x0f\xb9\x02\x6a\x58\x48\x1b\x4d\xe4\xec\x6a\x9e\x79\xc8\xbf\xd6\x83\x6b\xe4\xf0\x05\x9f\x98\xb0\xe3\xb6\x61\xbc\x98\xfb\x7b\x19\x40\xfd\x0c\x00\x00\xff\xff\x96\x1f\xc2\x54\xaf\x06\x00\x00")

func templateInsertTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateInsertTmpl,
		"template/insert.tmpl",
	)
}

func templateInsertTmpl() (*asset, error) {
	bytes, err := templateInsertTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/insert.tmpl", size: 1711, mode: os.FileMode(420), modTime: time.Unix(1474851811, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateInsert_columnTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x8e\xbb\xaa\xc2\x40\x10\x86\xeb\xec\x53\x0c\xcb\x29\x92\x66\x1f\xe0\x40\xaa\x54\x82\x0a\x62\xb4\x11\x8b\xd5\x4c\x20\x30\x99\xdc\x76\x03\x12\xe7\xdd\xdd\xe0\xad\x50\xb0\xfb\x87\x7f\xbe\x6f\x66\x9a\xa0\xc0\xb2\x62\x04\xbd\xe0\x01\x7b\x97\x35\xe4\x6b\xd6\x20\x12\xaa\xbf\xa1\xb6\x44\xb9\x3d\x11\xae\x6d\x8d\xf0\x9f\x82\x79\x4f\x57\x70\x4d\x16\x02\x85\xb4\x63\x57\x39\xc2\x80\xa9\xd2\xf3\x19\xe2\x0e\xbe\xf0\x22\xf7\x23\xdb\xcd\x32\x81\xbd\x25\x8f\x61\xc9\x7c\xc8\xf2\x87\x2a\x1e\x67\x89\xc9\x2f\xed\x13\x4f\x7e\x58\x61\x52\x51\x67\x06\x74\x2b\xdb\x1e\xf4\x4b\x2e\xa2\x8f\x90\xc2\xa8\xa2\x1e\x9d\xef\x19\x3a\x25\x4a\x85\x1a\xb9\x98\x5f\xbe\x05\x00\x00\xff\xff\x30\xe2\x3a\x61\x06\x01\x00\x00")

func templateInsert_columnTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateInsert_columnTmpl,
		"template/insert_column.tmpl",
	)
}

func templateInsert_columnTmpl() (*asset, error) {
	bytes, err := templateInsert_columnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/insert_column.tmpl", size: 262, mode: os.FileMode(420), modTime: time.Unix(1474851811, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateSelectTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x56\xdd\x6f\xdb\x36\x10\x7f\x96\xfe\x8a\x1b\xb1\x15\x54\xa3\x12\x19\x30\xec\x61\x83\x1f\xba\xd4\x41\x3b\xb8\xf9\xb2\x8d\x3e\x14\xc5\xa0\x58\x74\x26\x84\x96\x2c\x52\x8e\x52\x78\xfa\xdf\x77\x47\x52\xb6\x1c\xc5\x1f\x2f\x35\x02\x45\x24\xef\xe3\x77\x77\xbf\x3b\x6a\xbd\x86\x54\xce\xb3\x5c\x02\x1b\x4b\x25\x67\x15\x83\xa6\x09\xd7\xeb\x77\xf0\xf3\x2c\x59\x48\x75\x85\x0f\xf8\x63\x00\xc2\xbe\xfc\x07\x55\x71\x41\xdb\xf8\x36\xcd\xab\xac\x52\x12\xde\x6d\xe4\x8b\xdc\x54\x7a\x35\xab\x0a\x4d\x1a\x4b\x9d\xe5\xd5\x1c\xd8\x95\xac\x7f\x31\xe3\xdb\x11\x03\xde\x37\x32\x21\x13\x91\xb5\xf1\x94\x68\x40\x34\x1d\xb7\x4d\xf3\x5e\xa9\x8b\x42\xad\x16\xb9\x81\x01\x7c\xfd\x86\xe6\xb3\xfc\x61\x1d\x06\x28\xa7\x93\xfc\x41\x82\x68\x8f\x9b\x86\xe1\xa6\xf0\x7a\x2c\xc6\x85\xcc\x53\x8a\xa5\x09\xc3\xea\xfb\x52\xf6\x6c\xbb\x70\x11\x18\x38\xd4\xe0\xec\xee\xca\xdc\x8e\xc2\xa0\x75\x41\xbf\x16\x43\x18\x14\x3a\x95\x1a\xdc\xaf\xdd\x53\xd9\x22\xab\xfc\xde\xdb\x15\x86\xff\xfb\x6f\x61\x90\x99\xcb\x42\x4f\x97\x69\x52\x49\xb8\x2f\x0a\x45\x80\xe6\xab\x7c\x06\xbc\xec\x63\xba\x1d\x45\xe0\x80\xf1\xe8\x00\x62\x84\xaa\x65\xb5\xd2\xf9\x7e\x19\x14\x09\xca\x18\x1f\xfb\x73\x4a\xa7\x8c\xd1\x33\xcf\x14\xfd\x9b\x27\xca\x48\x7c\x69\x0e\x62\x6c\x3d\x44\x70\xad\x79\x69\x40\x08\x71\x40\xe6\x60\x10\xb5\x21\xa6\x2c\x92\x47\xc9\x31\xb3\xa5\x52\x89\xf8\xf2\xaf\xd4\x32\x86\xf3\x18\x94\xcc\xd1\x7c\x14\x85\xc1\x1c\x19\xf5\x4f\x0c\x25\x09\xbb\xba\xa3\x5b\x0a\xb0\x26\x5e\x24\xcb\x25\x96\x9a\xd7\x06\x25\x44\x4d\xea\x11\x85\x10\xf8\xc5\x56\xc2\x6f\xc4\xe0\x3c\x0d\x9f\x97\x1a\x23\xa8\xad\x0b\x9f\xce\xf2\xc4\xc8\x47\x54\x69\xae\xc0\x15\xf9\x48\x94\xa5\x70\xc4\x18\xc0\x1b\x75\x82\xa7\x1d\x47\x1b\xee\x1c\xe3\x43\x29\xba\x44\x1b\x00\x72\x5a\xee\x3a\x7b\xad\x69\x70\xaf\x92\x8b\xa5\x22\x1d\x3f\x00\xdc\x21\x03\xe1\x8e\x7d\x17\x9d\x90\x93\x49\x31\x2e\x15\xc2\xe4\xae\x1d\x62\x6c\x16\xcc\x8e\xd4\xf3\x64\x26\xd7\x4d\x0c\x52\xeb\x42\x47\x84\x75\xe6\xfd\x63\x39\x9d\xac\x11\x7f\x17\x19\x56\xbb\x45\x16\x03\xc3\x3f\x2c\x8b\x2d\x18\x2e\x9f\x8c\xd5\x27\x0d\x5f\x45\xe1\xdd\x61\x83\xcd\xed\xd1\x4f\x03\x40\x1a\x5b\x5a\xf8\xa8\x91\xdb\xb4\x65\x35\x89\x11\x98\xa4\x95\xd4\xdf\xc9\x08\x1b\x0f\x47\xc3\x8b\x09\x30\x38\x83\x16\xcd\x19\xae\x2e\xef\xae\x3f\x43\x77\x90\x58\xf3\x0e\x05\x79\x60\xcc\x3a\x70\x76\xce\x70\x0d\x5f\x3e\x0e\xef\x86\x64\xc6\x09\x39\xe6\xb5\xc7\xa5\xb0\x63\xc2\x1a\x69\x59\xd0\xc1\xd9\x31\x33\xfa\xf4\xf9\x93\x83\x83\x19\xc1\x49\xfa\x24\xb0\x98\x8b\xa4\x9a\x62\x0a\xf9\x5b\xaf\x1b\xc3\xaf\xe7\x91\x8b\xc4\x1a\xec\x56\xfc\x85\xbd\xcb\xeb\x3b\x98\xde\x7c\x78\x3f\x19\x32\xa7\xd0\x32\xc1\x89\x00\xfb\x93\xb9\xac\x22\x16\x4f\x0e\x34\x29\x3e\x26\xe6\xe6\xd1\x8e\x63\x57\x70\x63\x93\x31\xb6\x03\xd2\xa7\xa4\x33\xa0\xf8\xa1\xbe\xdf\x1d\x51\x9d\xbb\xa1\x69\x78\x24\x5a\x1b\x34\x3a\xc4\xcd\xa3\xab\xfb\x9e\xfb\x81\x34\xcc\xae\xe0\x65\x26\x55\xda\x02\x0a\xe9\x02\xb2\x44\x25\xe0\xa7\x50\x75\x8c\x9c\x53\x92\xa7\xf7\x7e\x14\x7c\xf8\xcb\x05\xb3\x1b\x69\x97\xb2\x1b\x6a\x62\x6b\xed\x9f\xa8\xbe\xf4\x31\x24\xfa\xa1\xcb\xd8\xe3\x5c\xed\x39\xf7\x1d\xe3\x8b\x57\xd4\x64\x28\xbd\x17\xb7\x64\xff\xae\xa8\x79\xc7\x11\x0e\xe0\xce\x04\x13\xe3\x59\x92\x73\xd4\x88\x4e\x9c\x65\x08\xff\x45\x26\xbe\x7e\x3b\x98\x0b\xdd\x9d\xda\xaf\x48\x9e\x7b\x9e\xfe\xe8\x9c\xed\xf6\x36\x46\xbc\x55\x6f\x33\xd5\x4f\xd3\x49\xd6\x02\xfc\x26\xc2\xdb\x9d\x4c\x8a\x0b\x55\x18\xc9\xfd\x2d\x64\x77\xae\xe4\xb3\xbd\x9e\x49\xb7\x03\xb8\xcd\xbb\x41\xd9\x57\xdc\xf4\xfd\x90\x23\x4a\xe6\xe6\x82\xd2\x18\x80\x76\x97\x97\x17\xd6\xdb\x0e\x3d\x85\xd6\x84\xc0\xf8\x4a\xd2\x22\x97\xfa\x18\xb1\xe9\xb3\x8b\xe8\xd5\x13\x0a\x03\x1f\x99\x71\x91\xb9\x4f\x89\xde\x0d\xf2\x06\x95\xa9\x37\x79\x96\xa7\xf2\xd9\x0d\x4e\x03\xe7\x11\x19\xc3\x2e\x23\x6f\x4e\xd3\x5f\x24\xc1\x96\xaa\xa8\xe9\x32\xb1\xe9\x5f\x3c\xff\x3f\x00\x00\xff\xff\xa7\x83\xd4\xbc\x91\x0a\x00\x00")

func templateSelectTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateSelectTmpl,
		"template/select.tmpl",
	)
}

func templateSelectTmpl() (*asset, error) {
	bytes, err := templateSelectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/select.tmpl", size: 2705, mode: os.FileMode(420), modTime: time.Unix(1477383930, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateSelect_columnTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x53\xc1\x6e\xdb\x30\x0c\x3d\x5b\x5f\x41\x18\x3b\xd8\x58\x2a\xf4\x30\xec\x10\xc0\x87\x36\xcd\x21\xc0\xba\x74\x4d\x36\x60\x18\x76\xd0\x12\x06\x33\xa2\xc8\xb6\x64\x7b\xeb\x5c\xff\xfb\x28\xc9\x6e\xe3\x2e\x40\x3d\xb4\xa7\x28\x7e\x7c\x7c\xe4\x23\xd9\x34\xb0\xc5\x5d\xaa\x10\xc2\x15\x4a\xdc\x94\xb3\x4c\x56\x07\x15\x42\xdb\x12\xf4\xc6\x1c\x84\x94\x6b\xf1\x43\xe2\x47\x71\x40\x98\x26\xc0\x1f\xff\xdd\x43\x99\xcd\xe8\x21\xe9\xf5\x59\x95\x69\x29\x91\x68\x6c\x57\xa9\x0d\x44\x05\x9c\xe0\xb7\xad\x17\x59\x7d\xfa\x10\x5b\x9c\xff\x93\x67\xdd\x65\x89\x6a\x87\xaf\xef\xf2\x9e\x39\x01\xfc\x9d\x6b\x03\x9c\x73\x53\x48\x29\xf8\x32\x47\x2d\xca\x4c\xc7\xcf\x28\x41\xc3\x82\x5a\x68\xc8\x72\x18\x12\x59\x90\xee\x40\xa2\x8a\x5c\xe2\x18\x92\x04\xce\x6d\x70\x40\x91\xc9\x43\xec\xbc\xa8\x84\x64\x41\x0b\x28\x0d\x3e\xc2\x8e\xf3\xed\xfc\x3b\x21\x8c\x05\xbf\x7e\xa2\x76\xf6\x78\xd6\x9c\xc0\x41\xf9\xf7\x60\x3f\xa5\x7f\xf0\xa8\xc5\xe6\x8b\x90\x15\x4e\xa1\x9e\xc0\x32\x9f\x52\x79\x13\xf0\xe6\x4f\x21\x7c\xf0\xa6\x6d\xc3\x96\x05\x05\xf7\x02\x09\x88\x3c\x47\xb5\x8d\xba\x0f\x13\x70\x3f\x31\x0b\x34\x96\x95\x56\x50\x30\xaa\xe6\x55\x06\xb0\x50\x51\xed\xcc\x7e\x32\x86\x31\x6e\x9f\x70\xe3\xba\x92\x65\x3a\xd2\x12\x43\x9e\x18\x6f\x8a\x4f\x70\x2d\xf6\xb8\x50\xfd\xd8\x22\x3b\xb2\xda\xc4\xf1\x6b\xf9\x45\x64\x5a\x04\xbe\x30\x37\x7b\x38\xfb\x8f\x05\xbe\xd9\x7b\xfd\x28\xdf\x43\xaa\xca\xf7\xef\x5e\xb6\xa2\xd6\xb0\x27\x66\x53\xe6\xa3\x5a\xf9\x33\x17\xd3\xc9\x93\x7a\x4c\x6d\x35\xcd\x19\x50\xeb\xf6\x22\x47\x77\xb4\xd4\x5b\xd4\x97\x77\x27\x74\x28\x7f\x66\xc1\xfe\x2c\xec\x7b\x4c\x57\x05\xf7\xb4\x04\x42\x58\xde\x5e\xcd\x6f\xe1\xf2\x2b\x1c\x4f\xcb\x1d\x61\x17\xd3\x2f\xcc\x85\xd9\xb8\x43\xeb\xc9\x6f\x2d\xfb\x62\x35\x0b\x07\x67\x38\x40\xaf\xe6\x1e\x66\x83\xd1\x92\x50\x67\xc1\xdf\x00\x00\x00\xff\xff\x58\xfa\xe7\x3a\xe8\x04\x00\x00")

func templateSelect_columnTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateSelect_columnTmpl,
		"template/select_column.tmpl",
	)
}

func templateSelect_columnTmpl() (*asset, error) {
	bytes, err := templateSelect_columnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/select_column.tmpl", size: 1256, mode: os.FileMode(420), modTime: time.Unix(1474851811, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateTableTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\x31\x4f\xc3\x30\x10\x85\xe7\xfa\x57\x9c\x2c\x86\x76\x68\xb2\x23\x31\x20\x58\x90\x50\x05\x2a\x15\xb3\xeb\x1c\xa9\x85\x63\x3b\xf6\x85\x0a\x85\xfc\x77\xce\x4e\x85\x40\x64\x7b\xf2\x7b\xf7\xf9\xdd\x05\xa5\xdf\x55\x8b\x30\x8e\x50\x3d\xcd\x7a\xa7\x3a\x84\x69\x12\xc2\x74\xc1\x47\x82\xb5\x58\xc9\x44\xd1\xb8\x36\xc9\x59\x6a\xef\x3e\xa4\x60\xdd\x28\x52\x47\x95\xb0\x4e\xbd\x65\x8f\x21\x51\x39\xa6\x55\xb7\x4d\x63\xc8\x78\xa7\xec\x05\x9a\x60\xcb\xc8\x95\xcc\xff\x30\x7c\x0e\xa3\x6b\xa0\xbc\xb6\x86\x4e\xc3\xb1\xd2\xbe\xab\x3b\xce\x23\xd6\xad\xdf\x32\xd3\x2a\x29\x36\x82\x93\x57\x9a\x4b\xd9\xd2\xec\xfa\x06\xaa\x22\xbe\x80\xfc\x5d\x7e\x66\x75\x70\x64\xc8\x96\xda\xf4\x19\xca\x3a\xbf\x46\xa6\x69\xff\xfc\x08\x5c\x7c\xd0\x04\xa3\x58\x9d\x4f\x18\x11\x0a\xbf\x7a\xcd\x5a\xf0\xb6\x6f\x83\xd3\xb0\xc3\x73\x6e\xf8\x8f\xff\x72\xa1\x33\x67\xbd\x59\xa4\x33\xb6\xcf\xdd\x16\xbc\x91\x57\x8c\x48\x43\x74\xd0\xe7\x9f\x38\x42\xd8\x05\xab\x08\x41\xee\xd1\xa2\x26\x59\xae\xf2\xd7\x39\x04\x3e\x2f\x2e\x39\x0f\x2e\x61\x5c\x9c\xb9\x67\xda\xcf\xcc\x77\x00\x00\x00\xff\xff\xe0\x7b\x72\x5e\xdc\x01\x00\x00")

func templateTableTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateTableTmpl,
		"template/table.tmpl",
	)
}

func templateTableTmpl() (*asset, error) {
	bytes, err := templateTableTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/table.tmpl", size: 476, mode: os.FileMode(420), modTime: time.Unix(1477359550, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateUpdateTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x55\xdd\x4e\xdb\x4c\x10\xbd\x8e\x9f\x62\xbe\xd5\x57\xc9\x16\x61\x1f\x00\xc4\x05\x85\x54\x5c\xb4\x88\x92\x20\x2e\x10\xaa\x4c\x32\xa6\x56\x16\xff\xec\xae\xa1\xc8\xf5\xbb\x77\x66\xd7\x6e\x0c\x76\x02\x42\xbd\x89\xbc\xbb\xb3\xe7\x9c\x39\x33\x3b\xa9\x6b\x58\x61\x92\x66\x08\xe2\xaa\x58\xc5\x16\x05\x34\x0d\x6d\xfe\xbf\x8c\x1f\x50\x9d\xd3\x0f\x1c\x1c\x81\x74\x1f\xbf\xc1\xe6\x27\xbc\x4d\x5f\x57\x99\x4d\xad\x42\x0a\x0e\xea\x7a\x9f\xc2\xf3\xcc\x58\x5d\x2d\x6d\xae\xf9\x42\xa1\xd3\xcc\x26\x20\xce\xf1\xe9\x93\x99\x7f\xff\x2a\x20\x1c\x62\x2c\x18\x21\x82\x7d\xc2\xb0\xcf\x05\xc2\x4b\xda\xa6\xf1\x82\xe8\x36\x78\x68\xa8\x83\xc9\xeb\x18\x3a\x0d\x26\x06\xed\xb7\xb8\x98\x98\x52\xa9\x58\xce\xdd\x22\x98\x9c\xe4\xaa\x7a\xc8\x0c\xdc\xdc\xd2\xed\x34\xbb\x0f\x9a\x20\x48\xaa\x6c\x09\x61\x39\x60\x22\x94\x08\x3c\x5d\x18\xed\xd0\x41\x02\x34\xda\x4a\x67\xdb\x63\x28\x64\x4c\xe4\x01\x94\x53\x3a\xf1\x4a\x0f\xa0\x2f\xb5\x6e\xe8\xa4\x61\x79\x74\x4f\xc7\xd9\x3d\x82\xec\xc4\xbb\x5a\x58\x7c\x28\x14\xa1\x77\x25\xf2\x87\x02\xa4\x3f\xc6\x6c\xc5\x65\xd8\x96\xdb\x5f\x65\x11\x2c\xf2\x79\xa9\x28\xc1\xd0\x3b\x32\x25\x6f\xa8\x4c\xa8\x93\x78\x89\xa4\x02\x50\xeb\x5c\x47\x9c\xe5\x63\xac\x79\xe5\x77\xfc\xd2\x40\x2f\x16\x8e\x98\x47\xce\x5d\x5d\x5a\xa2\xba\x09\x26\x69\x02\x76\x0a\xf9\x9a\x7b\xc0\xc8\xf0\xb5\x96\x53\x4c\xe2\x4a\x59\x2f\xe9\x2c\xcf\xd7\xa8\xa3\x43\x0e\x67\xd7\x4a\x27\x80\x90\xad\x1c\xc4\x85\x65\x44\x11\x84\xce\x11\xff\x1d\x41\x96\x2a\x77\xa7\x2b\x87\x10\xaf\x92\x69\xd3\xa1\x90\x86\xcd\x65\xe3\x5b\x4f\xa7\x60\x1e\x8d\xa7\x22\x91\xa5\xf4\x25\x91\x8b\xbc\x35\x8a\x1d\x0a\x46\xa8\xde\x64\x22\x96\xa7\x9f\xa8\x91\xc0\x9f\x5e\x30\xb8\x5d\xd9\x9a\xff\x41\xe8\x60\x52\x56\xa8\x9f\x19\x50\x5c\x5d\x9c\x1e\x2f\x66\xae\x00\xad\xaf\x30\x9f\x2d\x04\xec\xc1\x26\x4b\x47\xe3\xe5\x30\x93\x10\xde\x62\x87\xb1\x47\x6b\xb8\x3e\x9b\x5d\xce\xf8\x8e\x0f\xf2\x1c\xad\x90\x36\x0c\xc4\x21\x29\x8a\x8b\x82\x3a\x2c\x74\xa6\x51\x5e\x52\xca\x68\xca\xca\x7d\xc3\xee\x03\xf1\xc8\xb3\xd8\x5c\xac\x37\x4d\x68\x86\xcd\xf1\x91\xe7\xd5\x1b\x29\x4d\x13\x46\xb2\x43\x90\xd7\x2c\x99\x29\x2e\xd6\x3e\xdd\x2d\xb3\x85\xaf\x19\xf9\x22\xf0\x4b\x8a\x6a\xd5\x69\xda\x35\x12\x7a\xcf\x66\xf6\x0b\x97\xe1\xea\xae\x7d\xb4\xa7\x9f\xe9\x01\xdd\xdc\x0e\x32\xec\x3f\x1f\x67\x20\x59\xa7\xef\xfb\x7d\xf0\x76\x07\xd0\x72\xd3\x4c\x3f\xba\xf7\xb0\xba\x93\x4e\x42\x0f\x95\xab\xf0\x5e\x9c\xb2\xf4\xf4\x63\xa3\x73\x53\xf2\x92\xa6\x91\xc2\xa5\x25\x7b\x8f\x95\xa2\x74\xd9\x1d\xae\x2f\x2a\x83\xef\x9c\x2f\x23\x46\xd1\xa7\xbc\x44\x43\x8f\xf9\x9f\xfb\xd3\xee\x6d\x73\xa7\x55\xef\x87\xe3\xf8\x1f\xcc\xc8\x38\xda\x0c\x39\xe6\x1d\xce\xa1\x1d\xd9\x6f\x3f\xeb\x52\x77\x9a\x3a\x49\x7f\x02\x00\x00\xff\xff\xeb\x93\xdb\xc2\x7a\x07\x00\x00")

func templateUpdateTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateUpdateTmpl,
		"template/update.tmpl",
	)
}

func templateUpdateTmpl() (*asset, error) {
	bytes, err := templateUpdateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/update.tmpl", size: 1914, mode: os.FileMode(420), modTime: time.Unix(1474851811, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateUpdate_columnTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x52\xcb\x6e\xea\x30\x10\x5d\xc7\x5f\x71\x14\xdd\x45\x22\x45\x16\xeb\x48\x59\x21\x76\xb7\x45\x15\xd0\x2e\x10\x0b\xb7\x0c\x6a\x24\xe3\x38\x8e\x93\x3e\x82\xff\xbd\x36\xa1\xd0\xa8\x95\x4a\x57\x71\x7c\x1e\x73\xc6\x33\x7d\x8f\x2d\xed\x4a\x45\x88\x57\x7a\x2b\x2c\x4d\x2b\xd9\xee\x55\x0c\xe7\x3c\xf4\xaf\xd9\x0b\x29\x97\xe2\x51\xd2\xad\xd8\x13\xf2\x02\xfc\xf2\x77\x80\xad\xa6\xfe\x20\xfd\x69\xa5\x6c\x69\x25\x79\x19\xdb\xb5\xea\x09\x49\x8d\x1f\xf4\xce\x0d\x45\x16\x77\xff\x53\x2c\xc8\x7a\x0a\xff\x66\xb5\x3c\x19\x25\x5d\xb0\xe0\xcb\x37\xfd\x29\x4e\x7f\xf1\x44\xcf\xa2\x9a\x37\x64\x6f\x84\x5e\xc7\x67\x73\xe7\xe2\x0d\x0a\x74\x2c\x32\x64\x5b\xa3\x50\x33\xc7\xae\x8e\xf9\xf0\x4c\x86\xfe\x18\x34\x03\xbd\x6a\xd3\x80\x73\xde\xd4\x52\x0a\x3e\xd7\x64\x84\xad\xcc\x35\x1d\x74\xc2\xa0\xd2\x18\x0b\x59\x54\xee\x20\x49\x25\x47\xe3\x14\x45\x81\x49\x20\x47\x9e\x59\x9c\xb9\xb3\xba\x15\x92\x45\x0e\x24\x1b\xba\xc0\x47\xcd\x7a\xb2\xf1\x08\x63\xd1\x4b\x68\x28\x8c\x72\x50\xcd\x3c\x38\x8a\x7f\x40\xb8\x2a\xdf\xe9\x4b\x8b\xfd\xbd\x90\x2d\xe5\xe8\x32\xcc\x75\xee\xe3\x65\x18\x16\x25\xc7\xe8\x9d\x5d\x18\xc0\x50\xa0\x80\xd0\x9a\xd4\x36\x39\x5d\x64\x38\x7e\xd2\xf1\x14\xbc\xd8\x73\xc2\xda\x7c\x04\x00\x00\xff\xff\xf5\x51\xfc\xe7\x8a\x02\x00\x00")

func templateUpdate_columnTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateUpdate_columnTmpl,
		"template/update_column.tmpl",
	)
}

func templateUpdate_columnTmpl() (*asset, error) {
	bytes, err := templateUpdate_columnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/update_column.tmpl", size: 650, mode: os.FileMode(420), modTime: time.Unix(1474851811, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/delete.tmpl": templateDeleteTmpl,
	"template/delete_column.tmpl": templateDelete_columnTmpl,
	"template/insert.tmpl": templateInsertTmpl,
	"template/insert_column.tmpl": templateInsert_columnTmpl,
	"template/select.tmpl": templateSelectTmpl,
	"template/select_column.tmpl": templateSelect_columnTmpl,
	"template/table.tmpl": templateTableTmpl,
	"template/update.tmpl": templateUpdateTmpl,
	"template/update_column.tmpl": templateUpdate_columnTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"delete.tmpl": &bintree{templateDeleteTmpl, map[string]*bintree{}},
		"delete_column.tmpl": &bintree{templateDelete_columnTmpl, map[string]*bintree{}},
		"insert.tmpl": &bintree{templateInsertTmpl, map[string]*bintree{}},
		"insert_column.tmpl": &bintree{templateInsert_columnTmpl, map[string]*bintree{}},
		"select.tmpl": &bintree{templateSelectTmpl, map[string]*bintree{}},
		"select_column.tmpl": &bintree{templateSelect_columnTmpl, map[string]*bintree{}},
		"table.tmpl": &bintree{templateTableTmpl, map[string]*bintree{}},
		"update.tmpl": &bintree{templateUpdateTmpl, map[string]*bintree{}},
		"update_column.tmpl": &bintree{templateUpdate_columnTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

