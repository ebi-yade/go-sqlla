// Code generated by go-bindata.
// sources:
// template/select.tmpl
// template/select_column.tmpl
// template/table.tmpl
// DO NOT EDIT!

package sqlla

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateSelectTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x53\x51\x6f\xd3\x30\x10\x7e\x8e\x7f\xc5\x61\x21\x94\xac\x91\x35\x24\xc4\x03\x28\x0f\xa8\x74\x62\x28\x1b\xea\x3a\xc4\x03\xe2\x21\x4a\xdd\x61\x29\xb5\x1b\xd7\x69\x35\x15\xff\x77\xee\xec\xb8\xeb\x04\x8c\x49\x9b\x17\xdf\x7d\xfe\xee\xbb\xef\x6e\x87\x03\x2c\xe5\x4a\x69\x09\x7c\x21\x3b\xd9\x3a\x0e\xde\x63\xf0\x65\xdb\xac\x65\x77\x8d\x07\xbc\xab\x40\x84\x8f\x5f\xe0\xcc\x94\xc2\xe1\xab\x36\x7b\x69\x11\xcc\xdc\xfd\x46\xc2\xe3\x27\xde\x47\xb2\xc5\xbc\x86\xad\xb3\x43\xeb\xe0\xc0\x32\xc4\x88\x94\x9e\xd7\x2c\x9b\x9a\x6e\x58\xeb\x2d\x7c\xff\x81\x18\xa5\xef\x58\x66\xec\x12\x39\x01\xd2\xbd\x53\x6b\xe5\xf0\x7e\x36\x28\xed\xde\xbe\x61\x9e\xb1\xd5\xa0\x5b\xc8\xfb\x3f\x0b\xce\xeb\x02\x62\xd5\xbc\x78\x42\x0e\xea\xb0\xd2\x0d\x56\xff\x1b\x83\x90\xac\x2f\xf1\x48\xc2\x28\x40\xea\x6d\xa3\xef\x24\x88\xa4\xdb\x7b\x7e\xd2\x12\x2f\xf1\x22\xf5\x92\x2c\xc9\x32\x4f\xef\x39\xa7\x53\xab\x0e\xff\xf8\x27\xc5\xa7\xd2\x05\xd4\xd4\x72\xde\x41\xec\xf8\x3f\x9d\xf4\x22\x3a\x54\xc1\xab\xee\xd8\x57\x4f\x95\xfe\xa6\x16\x63\x4e\xae\x37\x5d\xe3\x8e\xd3\x8e\x49\x0e\x22\xa6\x47\xf9\xcf\x90\x79\x6b\x16\x7d\x87\x46\xe7\xd1\xa1\x12\x87\x88\x82\xa5\x5d\x35\xad\x3c\xf8\x12\xa4\xb5\xc6\x16\xa4\xb1\x1d\xeb\xe3\x1a\x45\xec\x56\x7c\x36\x4a\xe7\x7d\x52\x56\x02\xc7\x9f\x82\x65\xbb\x00\x7a\x44\x74\x40\x2f\x77\x8d\x85\xfd\x4f\x69\xe5\xf6\xb8\x17\x2b\x63\x41\x95\xb0\x27\x7c\x6c\xb3\x17\x01\x42\x05\x33\x64\xdc\x05\x05\x94\xde\x8b\x51\x2a\x26\xd4\x2a\x44\x5f\x54\x80\x33\x09\xd0\xe4\x19\x4e\x8a\x62\xe1\x15\x4d\x0f\x7f\x51\x4d\x05\xcd\x66\x83\x9e\xe4\x3b\xa2\x14\x42\x14\x2c\xb2\x28\xa8\x2a\x38\x8f\x0c\xa3\xb4\x09\xb6\x47\xd7\xd6\x68\xa7\xf4\x20\x47\x96\x87\x2c\x87\x0f\xd7\x1f\xf1\x9c\x10\x0e\x27\x94\xf5\x83\xb4\xf7\x24\x91\x2f\x66\xf5\x6c\x7a\x1b\x72\xc9\xad\x09\xde\x2e\x6e\xbe\x5c\xc1\xc9\x86\xc1\xb7\x4f\xb3\x9b\x59\x80\x25\x5a\xec\x3b\xfc\xcf\x30\x52\x95\xb6\xe1\xa4\xbf\x58\x23\x54\xaf\x2f\xaf\x2e\x63\x0d\x74\x11\x55\xee\xc4\x85\xb1\xeb\xc6\x7d\x45\xbb\xf3\xb3\xf1\x6d\x09\xaf\xcf\x8b\x28\x2f\x6d\x53\x64\x00\xfe\x1e\x2d\x22\x1f\x90\x1a\x17\xec\x61\x59\x7e\x07\x00\x00\xff\xff\x12\x89\xa9\xd8\x42\x04\x00\x00")

func templateSelectTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateSelectTmpl,
		"template/select.tmpl",
	)
}

func templateSelectTmpl() (*asset, error) {
	bytes, err := templateSelectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/select.tmpl", size: 1090, mode: os.FileMode(420), modTime: time.Unix(1440319377, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templateSelect_columnTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\x4b\x6b\x83\x40\x14\x85\xd7\xce\xaf\x38\x48\x17\x4a\x65\xc8\x5a\x70\x91\x87\xbb\x50\x69\x12\x0a\xa5\x74\x31\x4d\x6e\x68\x60\xe2\x63\xd4\xa4\xc1\xce\x7f\xef\x38\xc6\xa4\xd2\x40\xb3\xf2\xea\x39\xe7\x3e\x3e\x6c\x1a\x6c\x68\xbb\x4b\x09\xee\x92\x24\xad\xab\x69\x26\xeb\x7d\xea\x42\x6b\x23\x3d\x94\x7b\x21\xe5\x4a\x7c\x48\x7a\x12\x7b\x42\x18\x81\x5f\xdf\xbe\x51\x65\x53\x53\x48\x5b\xcd\xb3\x23\x29\x13\x63\xdb\x3a\x5d\xc3\x2b\x70\x23\xaf\x75\x37\x64\xf9\x3c\xf7\x5b\x9d\xff\xe9\xb3\xda\x55\xb2\xf5\x79\x07\xab\xaf\x4e\x79\x9f\x0c\x40\x5f\xb9\x2a\xc1\x39\x2f\x0b\x29\x05\x4f\x72\x52\xa2\xca\x94\xff\xcf\x24\x34\xcc\x39\x08\x85\x2c\xc7\x30\xc8\x9c\xdd\x16\x92\x52\xcf\x36\xf6\x11\x45\x18\xb5\x66\xc7\x38\xa3\x8b\x37\x2e\x6a\x21\x99\xa3\x41\xb2\xa4\xab\x6c\x33\x6f\xa3\x77\xa3\x30\xe6\x1c\x3f\x49\x59\x3c\x5d\x2a\x36\xe2\x60\xfd\xeb\x61\xcd\x8b\x90\x35\x85\x38\x04\x48\xf2\xd0\x2c\x15\xa0\x43\x1e\xc2\xbd\x10\xd1\xda\xd5\xcc\x29\x78\xd7\x36\x82\xc8\x73\x4a\x37\xde\xf9\x43\x00\xfb\xf0\x99\xa3\xa8\xaa\x55\x8a\x82\x99\x1d\xee\xc5\x9e\xa8\x0d\xa9\xc9\xe9\x06\x7d\x43\x3d\x6b\xc5\xfe\xf4\xb6\xbe\x07\x6e\xc1\xbb\x58\x04\x17\xc9\x62\x16\x2f\x30\x79\xc5\xef\x5b\x2c\xe8\xb3\xa7\x47\x34\x2e\xd7\x16\x66\x1f\x7e\x6c\xd3\xe3\xe5\xd4\x1d\xa0\x1e\xa8\xb3\xb8\x93\xd9\xe0\x70\x33\xc8\xb0\x69\x7f\xbc\x9f\x00\x00\x00\xff\xff\x96\xea\xb6\xe7\xcc\x02\x00\x00")

func templateSelect_columnTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateSelect_columnTmpl,
		"template/select_column.tmpl",
	)
}

func templateSelect_columnTmpl() (*asset, error) {
	bytes, err := templateSelect_columnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/select_column.tmpl", size: 716, mode: os.FileMode(420), modTime: time.Unix(1440319004, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templateTableTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8f\x31\x4f\xc3\x30\x10\x46\xe7\xdc\xaf\x38\x59\x0c\xed\x80\xbb\x23\x31\x21\xb6\xaa\x02\x95\x0d\x31\x18\xeb\x48\x23\xec\xd8\x71\xce\x04\x14\xfc\xdf\x39\xbb\x0c\x48\x74\x7b\x8a\x72\xef\x7d\x8e\xc6\xbe\x9b\x9e\x70\x5d\x51\x3f\x9c\xf9\x60\x3c\x61\x29\x00\x83\x8f\x21\x31\x6e\xa0\x53\x33\xa7\x61\xec\x67\x75\x46\x1b\xc6\x0f\x05\xc2\xfd\xc0\xa7\xfc\xaa\x6d\xf0\x3b\x2f\xc7\x44\xbb\x3e\x5c\xcf\x93\x73\x46\xc1\x16\xc4\x79\x65\x45\xe6\x9a\xf1\xe6\x16\x75\x83\x6f\xe4\x70\x57\x3f\x37\xda\x87\x85\x52\xcd\xf1\x57\x6c\x33\xfe\x9c\x94\x72\x7c\xdc\xa3\x04\xb3\x65\x5c\xa1\x5b\x4e\x94\x08\x9f\x5f\x5a\x41\xdf\x7f\xc6\x04\x32\xf3\x2d\x8f\x16\x0f\xb4\xd4\x27\xfc\x0b\x3c\x0d\xec\x7e\x45\x9b\x2d\xe6\x99\x52\x55\x8a\x6b\xaa\x83\x2e\xe4\xd6\x02\x5d\x22\xce\x69\xc4\xa9\xda\xe5\x17\x26\x1f\x9d\x61\x42\x75\x24\x47\x96\x15\xea\x3a\xf8\x27\x00\x00\xff\xff\x9a\x7c\xb7\x7e\x3b\x01\x00\x00")

func templateTableTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateTableTmpl,
		"template/table.tmpl",
	)
}

func templateTableTmpl() (*asset, error) {
	bytes, err := templateTableTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/table.tmpl", size: 315, mode: os.FileMode(420), modTime: time.Unix(1440319182, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/select.tmpl": templateSelectTmpl,
	"template/select_column.tmpl": templateSelect_columnTmpl,
	"template/table.tmpl": templateTableTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"select.tmpl": &bintree{templateSelectTmpl, map[string]*bintree{
		}},
		"select_column.tmpl": &bintree{templateSelect_columnTmpl, map[string]*bintree{
		}},
		"table.tmpl": &bintree{templateTableTmpl, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

