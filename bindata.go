// Code generated by go-bindata.
// sources:
// template/delete.tmpl
// template/delete_column.tmpl
// template/insert.tmpl
// template/insert_column.tmpl
// template/select.tmpl
// template/select_column.tmpl
// template/table.tmpl
// template/update.tmpl
// template/update_column.tmpl
// DO NOT EDIT!

package sqlla

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateDeleteTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x90\xc1\x4e\xfb\x30\x0c\xc6\xcf\xcd\x53\xf8\x6f\xfd\x0f\xab\x56\xe5\x01\x40\x3b\x6d\x45\x1c\x06\x88\x6d\x12\x07\xc4\xa1\xea\xdc\x51\x29\x4b\xd7\x34\x65\x9a\x4a\xde\x1d\x27\x29\x03\x84\xc6\xa5\x4a\xfd\x7d\xfe\xd9\xfe\x86\x01\xb6\x54\xd5\x9a\x00\x17\xa4\xc8\x12\x82\x73\x5c\xfc\x5f\x16\x7b\x52\xf7\xfc\x81\xab\x19\xc8\xf0\x78\x07\xdb\xcc\x7d\x39\xbc\x96\xcd\x91\x0c\x9b\x85\x3d\x1d\x08\x7e\xb6\x38\x17\x61\xeb\xc7\x25\x74\xd6\xf4\xa5\x85\x41\x24\xec\x91\xa3\xcc\x82\x70\x42\x54\xbd\x2e\x61\xd2\xfe\xea\x66\x39\x85\x88\x98\xa4\x7f\xb0\x19\x6a\xc8\xf6\x46\x5f\xf6\xb0\x25\x69\x33\x91\x38\x3f\x8f\x5d\xa6\xd0\x3b\x02\x39\x6f\x54\xbf\xd7\x5d\x3c\xd6\xd2\xfe\xa0\x0a\x7b\xce\x20\x8a\x08\x32\xca\xa4\xb7\xfe\xce\x4b\xcb\x9e\x47\xa5\xb0\x69\xd6\xad\xe2\x8d\x27\x7c\x74\xad\x77\x19\x3c\xbf\xd4\xda\x92\xa9\x8a\x92\x06\x97\x01\x19\xd3\x98\xd4\xaf\x7d\x7c\x25\x43\x5d\x06\x6f\x5d\xa8\xfa\x90\x5b\x19\x8a\x72\x84\x88\xa4\xae\x82\xf4\x6f\x06\xba\x56\xbe\xe9\xf3\x58\xc4\xcc\x97\x42\xa7\xbf\x4c\x24\x6d\x4f\xe6\xe4\x21\xb8\xc8\x97\xf9\x26\x87\x9b\xd5\xc3\x1d\x7c\x0b\x1c\x03\x2e\x4e\xf5\x44\xc4\x00\x8c\x7d\x53\xfe\x87\xa7\xdb\x7c\x95\x23\x4c\x47\x53\xe4\x8e\x03\x47\x1b\xe0\x35\xc6\x95\x79\x3a\xe7\xf9\x95\xcd\x47\x00\x00\x00\xff\xff\x87\xff\x05\xec\x47\x02\x00\x00")

func templateDeleteTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateDeleteTmpl,
		"template/delete.tmpl",
	)
}

func templateDeleteTmpl() (*asset, error) {
	bytes, err := templateDeleteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/delete.tmpl", size: 583, mode: os.FileMode(420), modTime: time.Unix(1440611429, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templateDelete_columnTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x91\x4f\x4b\xc4\x30\x10\xc5\xcf\xc9\xa7\x78\x14\x0f\x2d\x94\xb0\xe7\x42\x4f\xeb\xde\x16\x17\x71\xf1\x22\x1e\xa2\x3b\x8b\x0b\xd3\x34\x4d\xff\xac\x52\xf3\xdd\x4d\x53\xdd\xb2\x28\x78\xea\x34\xef\xfd\x66\x26\x2f\xe3\x88\x03\x1d\x4f\x86\x90\xdc\x12\x53\x47\xeb\x9a\xfb\xca\x24\xf0\x3e\x48\x37\x6d\xa5\x99\xf7\xfa\x85\xe9\x4e\x57\x84\xa2\x84\x5a\xfe\x3e\xd1\xd5\xeb\x50\x70\xac\xb6\xf5\x99\x5c\xc0\xe4\xb1\x37\xaf\x48\x1b\xfc\xc1\x7b\x3f\x0f\x79\xb8\xdf\x66\x93\xae\x7e\xf5\xd9\x9f\x3a\x9e\x7c\xe9\x10\xf5\xfd\x87\xfd\x21\x73\xd0\xbb\x75\x2d\x94\x52\x6d\xc3\xac\xd5\xce\x92\xd3\x5d\xed\xb2\x7f\x26\x61\x94\x62\xd0\x0e\xb5\xc5\x35\x28\xc5\xe9\x08\x26\x93\xc6\xc6\x19\xca\x12\xab\xc9\x2c\x82\xb3\xbc\x78\x37\x4d\xaf\x59\x0a\x0f\xe2\x96\x16\x39\x32\x4f\xab\xe7\xa0\x48\x29\xce\x6f\xe4\x62\x3c\x33\xb5\x09\xe2\xd5\xfa\xcb\xc5\xc6\x47\xcd\x3d\x15\x18\x72\xec\x6c\x11\x96\xca\x31\x47\x5e\x20\xb9\x24\xe2\x7d\xe2\xa5\x68\xd4\xdc\xb6\x84\xb6\x96\xcc\x21\xfd\x3e\xc8\x11\x3f\x99\x14\x8e\xba\xde\x19\x34\x32\xec\x10\xe0\xe0\x99\x1e\xe0\x2b\x00\x00\xff\xff\x42\x59\x12\x68\xd4\x01\x00\x00")

func templateDelete_columnTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateDelete_columnTmpl,
		"template/delete_column.tmpl",
	)
}

func templateDelete_columnTmpl() (*asset, error) {
	bytes, err := templateDelete_columnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/delete_column.tmpl", size: 468, mode: os.FileMode(420), modTime: time.Unix(1440611250, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templateInsertTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x51\xcb\x6e\xc2\x30\x10\x3c\xc7\x5f\xb1\xb5\x7a\x20\x02\xf9\x03\xa8\x38\xa1\x1e\x90\x28\x55\x9b\xdc\xaa\x1e\xa2\xb0\x41\x91\x8c\x83\x1f\x69\x85\x52\xff\x7b\xd7\x36\xa4\xf4\x41\x2f\x91\xe3\xd9\x99\x9d\x19\x0f\x03\x6c\xb1\x69\x15\x02\x5f\x29\x8b\xc6\x71\xf0\x9e\x2e\x6f\xeb\x6a\x8f\x72\x43\x1f\x98\x2f\x40\xc4\xc3\x07\xb8\x6e\x19\xae\xe3\x69\xdd\xbd\xa3\xa1\x61\xe6\x8e\x07\x84\xef\x14\xef\x93\x58\xf1\xb4\x06\xeb\x4c\x5f\x3b\x18\x58\x46\x33\xe2\x04\x13\xc0\x32\x8b\xee\xa1\x3a\x64\x56\x4b\x59\x89\x22\xfe\xb0\x6c\xd9\xc9\x7e\xaf\x2c\xbc\xbc\x12\xb1\x55\x3b\xe6\x19\x6b\x7a\x55\xc3\x44\xff\x5a\x42\x2a\x39\xa4\x4d\x93\xfc\x1f\x0b\xb4\xdb\xa0\xeb\x8d\xba\x3e\x43\x23\xd9\x1f\xf2\x73\xd0\x33\x42\x92\xd3\x39\x5c\x5a\x1d\x3c\x21\x3e\xd8\x23\x9e\xa9\xd4\x0e\x41\x9c\xcd\xc7\x0a\x1d\xee\x0f\xb2\x72\x63\xb3\x09\xe4\x20\x12\x8c\x6a\x1b\xda\xbb\x96\x6d\x74\x96\x43\xd9\x15\x5a\x52\xc0\x49\x6a\x64\x46\xdd\xb4\xca\xa1\x69\xaa\x1a\xc9\x05\xa0\x31\x9d\xc9\x43\x4a\x6d\x67\xf0\x66\xe3\x4d\x78\x36\x2d\x92\x71\x51\x76\x27\xb9\xa0\xc3\xb2\xb6\x89\x13\x37\x0b\x50\xad\x0c\xbc\x73\x3d\x9c\xff\x10\x3f\xc9\x87\xa0\xa4\xde\xa3\x39\x06\x5d\xbe\xda\x14\xf7\xcf\x25\xac\x36\xe5\x23\x5c\xbc\x2a\x70\x98\x82\xb6\x6c\xac\x3b\x31\xa6\xc0\xef\x78\x32\x46\xfb\xa8\xb1\xaf\xf4\x9f\x01\x00\x00\xff\xff\x01\x5c\x84\xe1\x7f\x02\x00\x00")

func templateInsertTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateInsertTmpl,
		"template/insert.tmpl",
	)
}

func templateInsertTmpl() (*asset, error) {
	bytes, err := templateInsertTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/insert.tmpl", size: 639, mode: os.FileMode(420), modTime: time.Unix(1440428335, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templateInsert_columnTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x8e\xb1\x0a\xc2\x30\x10\x86\xe7\xe6\x29\x8e\xe0\xd0\x2e\x79\x00\xa1\x53\x27\xa1\x0a\x62\x71\x11\x87\x68\xaf\x50\xb8\xa6\x6d\x9a\x54\xa4\xde\xbb\x9b\x2a\xea\xa0\xe0\xf6\x87\xff\xff\xbe\xdc\x34\x41\x89\x55\x6d\x10\xe4\xca\x0c\x68\x5d\xd6\x92\x6f\x8c\x04\xe6\x50\x2d\x86\x46\x13\x15\xfa\x44\xb8\xd1\x0d\xc2\x32\x05\xf5\x79\xdd\xc0\xb5\x59\x08\xf4\x48\x79\x7b\x41\x1b\x30\x51\x79\x73\x86\xb8\x87\x1f\x3c\xf3\xf3\x93\xdd\x36\x4f\x60\xaf\xc9\x63\x18\xa9\x2f\x59\x51\x3b\x9a\xc7\xf1\x38\x4b\x54\x71\xed\x5e\x78\xf2\xc7\x0a\x93\x88\x7a\x35\xa0\x5b\xeb\xee\x20\xdf\x72\x66\x79\x84\x14\x46\x11\x59\x74\xde\x1a\xe8\x05\x0b\x11\x6a\x34\xe5\x7c\xf2\x3d\x00\x00\xff\xff\x69\xeb\x49\xef\x06\x01\x00\x00")

func templateInsert_columnTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateInsert_columnTmpl,
		"template/insert_column.tmpl",
	)
}

func templateInsert_columnTmpl() (*asset, error) {
	bytes, err := templateInsert_columnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/insert_column.tmpl", size: 262, mode: os.FileMode(420), modTime: time.Unix(1440427509, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templateSelectTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x93\xdf\x6f\xd3\x30\x10\xc7\x9f\x93\xbf\xe2\xb0\x10\x72\xa6\xc8\x1a\x08\xf6\x00\xea\x53\xd5\x89\xa1\x0c\xd4\x75\x88\x87\x69\x0f\x69\x7a\x1d\x11\x89\xd3\xb8\xce\xa6\xa9\xf8\x7f\xe7\x2e\x8e\xbb\x22\xfa\x03\x69\xf2\xe2\xbb\xef\xf9\x3e\xf7\xa3\x9b\x0d\x2c\x70\x59\x6a\x04\x31\xc3\x0a\x0b\x2b\xc0\x39\x32\xbe\x2e\xf2\x1a\xab\xaf\x74\xc0\xc7\x11\xa8\xfe\xe3\x37\xd8\x66\xcc\xe6\xfe\x2b\x6b\x9e\xd0\x90\x38\xb6\xcf\x2b\x84\xbf\x43\x9c\xf3\x8f\xcd\xa6\x19\xac\xad\xe9\x0a\x0b\x9b\x38\x22\x8d\x0a\xee\x69\x16\x47\xe3\xa6\xea\x6a\xbd\x86\xbb\x7b\xd2\x94\xfa\x21\x8e\x1a\xb3\xa0\x37\x01\xc2\xbd\x2a\xeb\xd2\xd2\xfd\xac\x2b\xb5\xbd\x78\x1f\xbb\x38\x5e\x76\xba\x00\xd9\xfe\x9b\x70\x9a\x25\xe0\xb3\xca\xe4\x08\x0e\x71\x18\xb4\x9d\xd1\x87\x35\x24\x89\xda\x94\x8e\x00\xc6\x06\xa6\x37\xb9\x7e\x40\x50\x81\xdb\x39\xb1\x53\x92\x48\xe9\x82\x7a\xc1\x2d\x89\x22\xc7\xf1\x42\xf0\xa9\xcb\x8a\xfe\xb9\xa3\xf0\x21\x75\x02\x19\x97\x2c\x2b\xf0\x15\x9f\xa8\xa4\x55\xbe\x43\x23\x78\x53\x6d\xeb\x6a\x39\xd3\x3e\x5a\xb2\x59\xac\x57\x55\x6e\xb7\xd3\xf6\x4e\x01\xca\xbb\x07\xfc\xff\xc0\xbc\x6d\x66\x6d\x45\x8d\x96\xbe\x43\x29\x0d\x91\x80\xd1\x2c\xf3\x02\x37\x2e\x05\x34\xa6\x31\x09\x33\x16\x43\x7e\x5a\x23\xaf\x5d\xab\x2f\x4d\xa9\x65\x1b\xc8\x52\x10\xf4\x97\xc4\xd1\xd3\x4f\x34\x48\xd7\xc7\x75\x1f\xcf\x11\xad\xea\x8d\x6a\x48\x17\x47\xe5\xb2\x77\xbd\x1a\x01\xb5\x95\x9f\x0f\x55\x53\xaf\xd9\xd4\x47\x72\xb7\xa3\x39\xc7\xd7\xf9\x2f\x94\x77\xf7\xf3\x67\x8b\x29\x9c\xa7\xf0\xee\xc3\x45\xc2\xae\x11\xe4\xab\x15\x55\x2b\xe7\x4c\xce\x6e\x29\x66\x93\x6c\x32\xbe\x25\x12\xa5\xd4\x21\xd1\x50\xcc\x31\x89\x80\xcb\x9b\x6f\xd7\xb0\xbb\x19\x5e\xde\xc3\xfb\x1a\x99\x5f\x88\x1e\xff\xc0\x1b\x3f\x3e\x4f\x6e\x26\x01\x65\xbf\xc8\x3f\x35\x48\x68\xe4\xfb\x55\xad\xea\x7f\x54\x83\x8c\x08\xc2\xce\xec\xb4\xf0\x00\x43\x76\x75\x7d\xf5\xd2\x8f\xfd\x2a\x1a\x69\xd1\xe8\x47\x75\xd9\x98\x3a\xb7\xdf\x69\x07\xe4\xd9\x90\x21\x85\xb7\xe7\xc9\x29\x3c\xf1\x69\xdb\x9d\x61\x90\x7e\x49\xe4\x3c\xf1\x8b\x40\x8c\xb4\xcf\x2f\xbb\xf9\x27\x00\x00\xff\xff\x20\x1e\x2c\xfe\xb1\x04\x00\x00")

func templateSelectTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateSelectTmpl,
		"template/select.tmpl",
	)
}

func templateSelectTmpl() (*asset, error) {
	bytes, err := templateSelectTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/select.tmpl", size: 1201, mode: os.FileMode(420), modTime: time.Unix(1444541802, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templateSelect_columnTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\x4b\x6b\x83\x40\x14\x85\xd7\xce\xaf\x38\x48\x17\x4a\x65\xc8\x5a\x70\x91\x87\xbb\x50\x69\x12\x0a\xa5\x74\x31\x4d\x6e\x68\x60\xe2\x63\xd4\xa4\xc1\xce\x7f\xef\x38\xc6\xa4\xd2\x40\xb3\xf2\xea\x39\xe7\x3e\x3e\x6c\x1a\x6c\x68\xbb\x4b\x09\xee\x92\x24\xad\xab\x69\x26\xeb\x7d\xea\x42\x6b\x23\x3d\x94\x7b\x21\xe5\x4a\x7c\x48\x7a\x12\x7b\x42\x18\x81\x5f\xdf\xbe\x51\x65\x53\x53\x48\x5b\xcd\xb3\x23\x29\x13\x63\xdb\x3a\x5d\xc3\x2b\x70\x23\xaf\x75\x37\x64\xf9\x3c\xf7\x5b\x9d\xff\xe9\xb3\xda\x55\xb2\xf5\x79\x07\xab\xaf\x4e\x79\x9f\x0c\x40\x5f\xb9\x2a\xc1\x39\x2f\x0b\x29\x05\x4f\x72\x52\xa2\xca\x94\xff\xcf\x24\x34\xcc\x39\x08\x85\x2c\xc7\x30\xc8\x9c\xdd\x16\x92\x52\xcf\x36\xf6\x11\x45\x18\xb5\x66\xc7\x38\xa3\x8b\x37\x2e\x6a\x21\x99\xa3\x41\xb2\xa4\xab\x6c\x33\x6f\xa3\x77\xa3\x30\xe6\x1c\x3f\x49\x59\x3c\x5d\x2a\x36\xe2\x60\xfd\xeb\x61\xcd\x8b\x90\x35\x85\x38\x04\x48\xf2\xd0\x2c\x15\xa0\x43\x1e\xc2\xbd\x10\xd1\xda\xd5\xcc\x29\x78\xd7\x36\x82\xc8\x73\x4a\x37\xde\xf9\x43\x00\xfb\xf0\x99\xa3\xa8\xaa\x55\x8a\x82\x99\x1d\xee\xc5\x9e\xa8\x0d\xa9\xc9\xe9\x06\x7d\x43\x3d\x6b\xc5\xfe\xf4\xb6\xbe\x07\x6e\xc1\xbb\x58\x04\x17\xc9\x62\x16\x2f\x30\x79\xc5\xef\x5b\x2c\xe8\xb3\xa7\x47\x34\x2e\xd7\x16\x66\x1f\x7e\x6c\xd3\xe3\xe5\xd4\x1d\xa0\x1e\xa8\xb3\xb8\x93\xd9\xe0\x70\x33\xc8\xb0\x69\x7f\xbc\x9f\x00\x00\x00\xff\xff\x96\xea\xb6\xe7\xcc\x02\x00\x00")

func templateSelect_columnTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateSelect_columnTmpl,
		"template/select_column.tmpl",
	)
}

func templateSelect_columnTmpl() (*asset, error) {
	bytes, err := templateSelect_columnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/select_column.tmpl", size: 716, mode: os.FileMode(420), modTime: time.Unix(1440319004, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templateTableTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8f\x4d\x4b\xf4\x30\x14\x85\xd7\xcd\xaf\xb8\x84\x77\x31\xb3\x78\x33\x7b\xc1\x95\x6e\x84\x61\x50\x46\x71\x1d\xe3\xb5\x53\xcc\x57\xd3\x1b\x8b\xd4\xfc\x77\x6f\x32\x22\x8a\x5d\xf5\xa1\xb7\xe7\x39\xa7\x51\x9b\x57\xdd\x23\x2c\x0b\xa8\xdb\x33\x1f\xb4\x43\x28\x45\x88\xc1\xc5\x90\x08\x36\xa2\x93\x13\xa5\xc1\xf7\x93\x3c\xa3\x09\xfe\x4d\x0a\xe6\x7e\xa0\x53\x7e\x52\x26\xb8\x9d\xe3\x30\xe2\xae\x0f\xff\xa7\xd1\x5a\x2d\xc5\x56\xb0\xf3\x9f\x61\x99\x6d\xc6\x8b\x4b\x50\x0d\x3e\x80\xc2\x55\x7d\xdd\x68\x1f\x66\x4c\xb5\x8e\xde\x63\x9b\xf1\x23\x52\xca\xf1\x6e\x0f\x5c\x98\x0d\xc1\x22\xba\xf9\x84\x09\xa1\xf9\xd5\x63\x65\xc1\x2b\x5f\xb2\x37\x70\xc0\xb9\xfe\xc1\x1f\xff\xfd\x40\xf6\xcb\xb3\xd9\x42\x9e\x30\x55\x23\xab\xc6\xba\x67\xa5\x6d\x29\xa2\x4b\x48\x39\x79\x18\xab\x9d\x3f\x21\x74\xd1\x6a\x42\x90\x47\xb4\x68\x48\x82\xaa\x7b\x7f\x5d\x1e\xe2\x33\x3f\xd7\x2e\x37\x9e\x4b\x57\x33\xd7\x6c\xfb\xce\x7c\x06\x00\x00\xff\xff\xae\xa3\xe9\x6c\x88\x01\x00\x00")

func templateTableTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateTableTmpl,
		"template/table.tmpl",
	)
}

func templateTableTmpl() (*asset, error) {
	bytes, err := templateTableTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/table.tmpl", size: 392, mode: os.FileMode(420), modTime: time.Unix(1444541621, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templateUpdateTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\xc1\x6e\xa3\x30\x10\x86\xcf\xf6\x53\xcc\x5a\x7b\x00\x05\xf9\x01\xb2\xca\x61\x95\x45\xda\x43\x76\xd5\x16\xa2\x1e\xaa\x1e\x10\x19\x52\x24\x62\xc0\x98\x46\x11\xe5\xdd\x3b\xb6\x49\x93\xb4\x4d\x0f\xbd\x20\xdb\x33\xf3\xff\xdf\xcc\x30\x0c\xb0\xc1\xa2\x54\x08\x62\xdd\x6c\x32\x83\x02\xc6\x91\x1e\x7f\xe6\xd9\x0e\xab\xff\xf4\x81\xf9\x02\xa4\x3b\xbc\x80\xa9\x97\xf6\xd9\x9d\x56\xf5\x1e\x35\x25\x73\x73\x68\x10\x2e\x4b\xc6\xd1\x8b\x25\xb7\x2b\xe8\x8c\xee\x73\x03\x03\x67\x94\x23\xa7\x30\x05\x38\xeb\xd0\xfc\xcb\x1a\xd6\xb5\x55\x95\xc9\xc4\x5d\x38\x5b\xd6\x55\xbf\x53\x1d\x3c\x3c\x52\x61\xa9\xb6\x7c\xe4\xbc\xe8\x55\x0e\x41\xfb\xc1\x84\x54\x42\xf0\x4e\x41\xf8\x05\x02\x79\x6b\x34\xbd\x56\xd7\x73\x28\x85\x7d\x22\x3f\x87\x36\xa2\x88\x27\x9d\xc3\x39\xea\x30\x52\x64\xb4\x78\x54\xa7\x33\xb5\x45\x90\x47\x78\x37\x42\x83\xbb\xa6\x22\xf5\xe3\x64\x7d\x50\x80\xf4\x61\x54\x1b\x3b\xbd\x6b\xbd\xbd\x91\x85\x90\xd6\x49\x5b\x51\x83\x81\x9f\x48\x44\xb3\x29\x95\x41\x5d\x64\x39\x12\x05\xa0\xd6\xb5\x0e\x6d\x97\xc4\x39\x21\x44\xd0\x3d\x77\x2e\x64\xf7\xd7\x4a\xdf\x81\x4c\xeb\x49\xd7\x0a\x72\x56\x16\x2e\xe3\xc7\x02\x54\x59\x59\x81\xe3\x9c\x84\x78\xe7\x32\xf9\xd8\x8e\xd9\xfe\x09\x35\x92\xf8\xfe\xc2\xc1\xbd\xca\x89\xf5\x9b\xd2\x9c\xb5\x3d\xea\x83\x15\x14\xeb\x9b\x3f\xbf\xd3\x18\xce\x7e\x1a\x48\xe2\x54\xc0\x0c\x4e\x5d\x3a\x1b\x8f\x63\x9d\x84\x70\x46\x5e\x63\x46\x77\xb8\xff\x1b\xdf\xc5\xb6\xc6\x27\x79\x8f\x09\x64\x4a\x03\xf1\x8b\x88\xb2\xa6\xa1\x85\x04\x6e\x68\xd4\x97\x94\x32\x8c\x2c\x39\xed\xf7\xb4\xab\xd7\x00\x00\x00\xff\xff\xf2\xc8\x0d\xb3\x2d\x03\x00\x00")

func templateUpdateTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateUpdateTmpl,
		"template/update.tmpl",
	)
}

func templateUpdateTmpl() (*asset, error) {
	bytes, err := templateUpdateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/update.tmpl", size: 813, mode: os.FileMode(420), modTime: time.Unix(1440428827, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templateUpdate_columnTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x52\xcf\x4b\xc3\x30\x14\x3e\x37\x7f\xc5\x47\xf1\xd0\x42\x09\x3b\x17\x7a\x1a\xbb\x4d\x87\x6c\xea\x61\xec\x10\xdd\x1b\x0e\xb2\x34\x4d\xd3\x4e\xa9\xf9\xdf\x4d\x5a\x5d\x29\x0a\xce\x53\x5f\xf3\xfd\xc8\xf7\x5e\x5e\xd7\x61\x4f\x87\xa3\x22\xc4\x0f\x7a\x2f\x2c\xcd\x4b\xd9\x9c\x54\x0c\xe7\x3c\x74\x53\x9f\x84\x94\x1b\xf1\x2c\xe9\x4e\x9c\x08\x79\x01\x3e\xfe\x7d\xc0\x96\x73\x5f\xc8\xbe\x5a\x96\x67\x32\x5e\xc6\x0e\x8d\x7a\x41\x52\xe1\x17\xbd\x73\xc3\x25\xeb\xfb\x65\x8a\x35\x59\x4f\xe1\x3f\xac\x36\x47\x2b\x03\x35\x69\x83\x05\xdf\xbc\xeb\x6f\x71\xfa\x87\x27\x3a\x16\x55\xbc\x26\x7b\x2b\xf4\x36\xbe\x98\x3b\x17\xef\x50\xa0\x65\x91\x21\xdb\x18\x85\x8a\x39\x76\x75\xcc\xa7\x57\x32\xf4\xcf\xa0\x19\xe8\x4d\x9b\x1a\x9c\xf3\xba\x92\x52\xf0\x95\x26\x23\x6c\x69\xae\xe9\xa0\x15\x06\xa5\xc6\x54\xc8\xa2\xe3\x01\x92\x54\xd2\x1b\xa7\x28\x0a\xcc\x02\x39\xf2\xcc\xe2\xc2\x5d\x54\x8d\x90\x2c\x72\x20\x59\xd3\x08\xf7\x9a\xed\x6c\xe7\x11\xc6\xa2\x73\x68\x28\x3c\xe5\xa0\x5a\x78\x70\x12\x7f\x6c\xac\x7b\x14\xb2\xa1\x1c\x6d\x86\x95\xce\x7d\xa8\x0c\xc3\x7a\xe4\x98\x4c\xd7\x85\xb1\x0f\xb6\x05\x84\xd6\xa4\xf6\xc9\xd7\x41\x86\xfe\x93\x4e\x67\xef\xc5\x9e\x13\x96\xe5\x33\x00\x00\xff\xff\x12\x0e\xef\xee\x80\x02\x00\x00")

func templateUpdate_columnTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateUpdate_columnTmpl,
		"template/update_column.tmpl",
	)
}

func templateUpdate_columnTmpl() (*asset, error) {
	bytes, err := templateUpdate_columnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/update_column.tmpl", size: 640, mode: os.FileMode(420), modTime: time.Unix(1440321886, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/delete.tmpl": templateDeleteTmpl,
	"template/delete_column.tmpl": templateDelete_columnTmpl,
	"template/insert.tmpl": templateInsertTmpl,
	"template/insert_column.tmpl": templateInsert_columnTmpl,
	"template/select.tmpl": templateSelectTmpl,
	"template/select_column.tmpl": templateSelect_columnTmpl,
	"template/table.tmpl": templateTableTmpl,
	"template/update.tmpl": templateUpdateTmpl,
	"template/update_column.tmpl": templateUpdate_columnTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"delete.tmpl": &bintree{templateDeleteTmpl, map[string]*bintree{
		}},
		"delete_column.tmpl": &bintree{templateDelete_columnTmpl, map[string]*bintree{
		}},
		"insert.tmpl": &bintree{templateInsertTmpl, map[string]*bintree{
		}},
		"insert_column.tmpl": &bintree{templateInsert_columnTmpl, map[string]*bintree{
		}},
		"select.tmpl": &bintree{templateSelectTmpl, map[string]*bintree{
		}},
		"select_column.tmpl": &bintree{templateSelect_columnTmpl, map[string]*bintree{
		}},
		"table.tmpl": &bintree{templateTableTmpl, map[string]*bintree{
		}},
		"update.tmpl": &bintree{templateUpdateTmpl, map[string]*bintree{
		}},
		"update_column.tmpl": &bintree{templateUpdate_columnTmpl, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

