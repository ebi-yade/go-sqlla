// Code generated by go-bindata.
// sources:
// template/column.tmpl
// template/table.tmpl
// DO NOT EDIT!

package sqlla

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateColumnTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x92\x4d\x6b\xb3\x40\x14\x85\xd7\xce\xaf\x38\xc8\xbb\x50\x5e\x91\xac\x05\x17\xf9\x70\x17\x2a\x4d\x42\xa1\x94\x2e\xa6\xe6\x86\x06\x26\x7e\x8c\x9a\x34\xd8\xf9\xef\x9d\x19\x6b\x52\x69\xa0\x59\x79\x9d\x73\xce\x9d\x7b\x1f\xa6\xeb\xb0\xa5\xdd\x3e\x27\xb8\x59\x21\xda\x43\xee\x42\x29\x7d\xf8\xaf\x3e\x70\x21\x36\xfc\x4d\xd0\x03\x3f\x10\xa2\x18\xe1\xf5\xef\x13\x4d\x31\xd7\x85\xb0\xd5\xb2\x38\x91\xd4\x31\xb6\x6b\xf3\x0c\x5e\x85\x1b\x79\xa5\xd6\x24\x28\x6b\xd6\x8f\x4b\xdf\xe8\xe1\xaf\x3e\x9b\x7d\x23\x8c\xcf\x3b\x5a\x7d\x73\x2e\x87\x64\x00\xfa\x28\x65\x8d\x30\x0c\xeb\x4a\x08\x1e\xa6\x25\x49\xde\x14\xd2\xff\xe3\x26\x74\xcc\x39\x72\x89\xa2\xc4\x38\xc8\x9c\xfd\x0e\x82\x72\xcf\x36\xf6\x11\xc7\x98\x18\xb3\xa3\x9d\xf1\xc5\x9b\x54\x2d\x17\xcc\x51\x20\x51\xd3\x55\xb6\x99\x97\xc9\xab\x56\x18\x73\x4e\xef\x24\x2d\x9e\x3e\x95\x68\x71\x34\xfe\x75\xb1\xee\x89\x8b\x96\x22\x1c\x03\xa4\x65\xa4\x87\x0a\x30\xb7\xc8\x23\xb8\x17\x22\x4a\xb9\x8a\x39\x55\xd8\xb7\x8d\xc1\xcb\x92\xf2\xad\xf7\x7d\x10\xc0\x7e\x7c\xe6\x48\x6a\x5a\x99\xa3\x62\x7a\x86\x7b\xb1\xa7\x72\x4b\x72\x76\xbe\x41\x5f\x53\x2f\x8c\x38\xac\x6e\xea\x7b\xe0\x56\xbd\x55\xcf\xe9\x22\x5d\x2d\x92\x15\x66\xcf\xf8\xb9\x8b\x05\xdd\xb7\x8e\x07\x44\xd3\x3a\xb3\x30\x87\xf0\x7f\x93\x9e\xae\xe7\xee\x08\xf5\x48\x5d\x24\xbd\xcc\x46\x8b\xeb\x8b\x34\x1b\xf3\xf0\xbe\x02\x00\x00\xff\xff\x4e\x6e\x3b\xd7\xc6\x02\x00\x00")

func templateColumnTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateColumnTmpl,
		"template/column.tmpl",
	)
}

func templateColumnTmpl() (*asset, error) {
	bytes, err := templateColumnTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/column.tmpl", size: 710, mode: os.FileMode(420), modTime: time.Unix(1440317116, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templateTableTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x53\x4d\x8f\xd3\x30\x10\x3d\xc7\xbf\x62\xb0\x38\x24\x6a\xf0\x72\x06\xf5\x80\x4a\x11\x42\xa5\x0b\xbb\x95\x38\x20\x0e\xc1\xeb\x76\x2d\x12\x3b\x71\x9c\x06\x14\xfc\xdf\x77\xc6\x49\xba\x5d\xa9\x95\x5a\xcb\xf3\xf5\xe6\xbd\x19\xa7\x2e\xe4\x9f\xe2\xa0\x60\x18\x40\x7c\x1b\xef\xdb\xa2\x52\x10\x02\x63\xba\xaa\xad\xf3\x90\xb2\x84\xb7\xde\x69\x73\x68\x39\xc3\xfb\x41\xfb\xc7\xee\xb7\x90\xb6\xba\xa9\xb0\x42\xa9\x9b\x83\x7d\xd3\x36\x65\x59\x70\x96\x31\x04\x7a\x2d\x11\xa1\x8c\x30\xef\x96\x20\xe2\xe5\x3f\x78\xbb\x22\x77\xbc\x6d\x6c\xaf\x1c\xf5\xf0\xff\xea\xd8\xfb\xac\x24\x84\xfb\xef\x1b\xc0\x86\x9d\xf4\x30\xb0\xa4\x7f\x54\x4e\xc1\xcf\x5f\xb1\x83\x58\xff\xad\x1d\x43\x6e\x97\x0b\x55\xa9\xa4\x7f\x59\x4e\xc2\x9e\x71\x59\xb2\xb2\x65\x57\x99\x96\x00\xa3\x26\x96\xdc\xba\x07\x24\x03\x30\xd9\x08\xbe\xef\x8c\x84\xad\xea\x4f\xb5\xe7\xec\x77\xda\x97\x13\x5a\x9a\x41\xd7\x2a\x47\x0d\xb1\x53\x43\x6a\x2f\x68\x19\x02\x4b\x9c\xf2\x9d\x33\xd0\x9c\xd0\xd3\xe6\x52\x6a\x06\xa3\x04\x04\xbe\xae\x6d\x38\xc1\x5d\xcd\xc1\x94\xa4\xc9\xf1\x98\x55\x92\x83\x46\xe1\x0a\x83\xcb\x16\xf3\x10\x42\xe0\x67\xf3\xe1\x39\x1a\xca\x3c\xd0\x62\x92\x24\x50\x3d\xe7\x78\x06\x62\x7d\xa9\x18\x7d\x5e\x55\x75\x59\x78\x05\x5c\x46\x37\x07\x31\x06\x26\x9c\xab\x62\x67\xaa\x19\xec\xec\x64\x34\x25\xea\x4e\x47\xc2\x39\x2e\x48\x1b\xaf\xdc\xbe\x90\x6a\x08\x39\x28\xe7\xac\xcb\x48\xbc\x9c\xfa\xe3\xb4\xa7\x67\x29\xbe\x58\x6d\xd2\x66\x66\x96\x03\xc7\x5f\xc6\x92\x63\x4c\x7a\x01\x44\xcb\x38\x16\x0e\xe2\xab\x6a\xe7\x9d\x27\x7b\xeb\x40\xe7\xd0\x53\xfe\x28\xb3\x11\xe3\xc3\xa3\xc9\x21\xe2\x31\x32\xa0\x70\x2f\x90\x30\x51\xc5\x80\xde\x47\xef\xab\x25\x18\x5d\xc6\xd4\x79\x35\x38\x38\xf2\xc5\x2a\x1a\x26\xfe\x91\xcd\x12\x8a\xba\xc6\xc9\xa4\x47\x82\x14\x42\x64\x6c\x44\xd1\xb0\x5c\xc2\xdb\x11\x61\xa2\xb6\x40\x79\x64\x4a\x6b\xbc\x36\x9d\x9a\x50\x9e\xa3\x1c\x3e\x6c\x3f\xe2\xb9\xa0\x3c\xdc\xd0\xa9\xf5\xfd\x7a\xb3\x5e\xed\x62\x64\x9e\xd5\x02\xad\x4f\x77\xb7\x5f\xe1\x6c\xdd\xf0\xe3\xf3\xfa\x6e\x1d\xd3\x66\x50\x54\x3d\x7e\x0d\x98\xff\x1e\x15\x10\x4d\x54\x81\xfb\x7f\x0a\x00\x00\xff\xff\xcf\x50\xc0\x76\x28\x04\x00\x00")

func templateTableTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateTableTmpl,
		"template/table.tmpl",
	)
}

func templateTableTmpl() (*asset, error) {
	bytes, err := templateTableTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/table.tmpl", size: 1064, mode: os.FileMode(420), modTime: time.Unix(1440317408, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/column.tmpl": templateColumnTmpl,
	"template/table.tmpl": templateTableTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"column.tmpl": &bintree{templateColumnTmpl, map[string]*bintree{
		}},
		"table.tmpl": &bintree{templateTableTmpl, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

