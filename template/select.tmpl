{{ define "Select" }}
{{- $camelName := .Name | toCamel | Untitle -}}
{{- $constructor := printf "New%sSQL" (.Name | toCamel | Title) -}}
var {{ $camelName }}AllColumns = []string{
	{{ range .Columns }}"`{{ .Name }}`",{{ end }}
}

type {{ $camelName }}SelectSQL struct {
	{{ $camelName }}SQL
	Columns     []string
	order       string
	limit       *uint64
	offset      *uint64
	tableAlias  string
	joinClauses []string

	additionalWhereClause string
	additionalWhereClauseArgs []interface{}

	isForUpdate bool
}

func (q {{ $camelName }}SQL) Select() {{ $camelName }}SelectSQL {
	return {{ $camelName }}SelectSQL{
		q,
		{{ $camelName }}AllColumns,
		"",
		nil,
		nil,
		"",
		nil,
		"",
		nil,
		false,
	}
}

func (q {{ $camelName }}SelectSQL) Or(qs ...{{ $camelName }}SelectSQL) {{ $camelName }}SelectSQL {
	ws := make([]sqlla.Where, 0, len(qs))
	for _, q := range qs {
		ws = append(ws, q.where)
	}
	q.where = append(q.where, sqlla.ExprOr(ws))
	return q
}

func (q {{ $camelName }}SelectSQL) Limit(l uint64) {{ $camelName }}SelectSQL {
	q.limit = &l
	return q
}

func (q {{ $camelName }}SelectSQL) Offset(o uint64) {{ $camelName }}SelectSQL {
	q.offset = &o
	return q
}

func (q {{ $camelName }}SelectSQL) ForUpdate() {{ $camelName }}SelectSQL {
	q.isForUpdate = true
	return q
}

func (q {{ $camelName }}SelectSQL) TableAlias(alias string) {{ $camelName }}SelectSQL {
	q.tableAlias = "`" + alias + "`"
	return q
}

func (q {{ $camelName }}SelectSQL) SetColumns(columns ...string) {{ $camelName }}SelectSQL {
	q.Columns = columns
	return q
}

func (q {{ $camelName }}SelectSQL) JoinClause(clause string) {{ $camelName }}SelectSQL {
	q.joinClauses = append(q.joinClauses, clause)
	return q
}

func (q {{ $camelName }}SelectSQL) AdditionalWhereClause(clause string, args ...interface{}) {{ $camelName }}SelectSQL {
	q.additionalWhereClause = clause
	q.additionalWhereClauseArgs = args
	return q
}

func (q {{ $camelName }}SelectSQL) appendColumnPrefix(column string) string {
	if q.tableAlias != "" {
		return q.tableAlias + "." + column
	}
	return column
}

{{ range .Columns }}{{ template "SelectColumn" . }}{{ end }}
func (q {{ $camelName }}SelectSQL) ToSql() (string, []interface{}, error) {
	columns := strings.Join(q.Columns, ", ")
	wheres, vs, err := q.where.ToSql()
	if err != nil {
		return "", nil, err
	}

	tableName := "{{ .Name }}"
	if q.tableAlias != "" {
		tableName = tableName + " AS " + q.tableAlias
		columns = ""
		for i, column := range q.Columns {
			columns += q.tableAlias + "." + column
			if i < len(q.Columns) - 1 {
				columns += ", "
			}
		}
	}
	query := "SELECT " + columns + " FROM " + tableName
	if len(q.joinClauses) > 0 {
		jc := strings.Join(q.joinClauses, " ")
		query += " " + jc
	}
	if wheres != "" {
		query += " WHERE" + wheres
	}
	if q.additionalWhereClause != "" {
		query += " " + q.additionalWhereClause
		if len(q.additionalWhereClauseArgs) > 0 {
			vs = append(vs, q.additionalWhereClauseArgs...)
		}
	}
	query += q.order
	if q.limit != nil {
		query += " LIMIT " + strconv.FormatUint(*q.limit, 10)
	}
	if q.offset != nil {
		query += " OFFSET " + strconv.FormatUint(*q.offset, 10)
	}

	if q.isForUpdate {
		query += " FOR UPDATE"
	}

	return query + ";", vs, nil
}

{{ if .HasPk -}}
func (s {{ .StructName }}) Select() ({{ $camelName }}SelectSQL) {
	return {{ $constructor }}().Select().{{ .PkColumn.Name | toCamel | Title }}(s.{{ .PkColumn.FieldName }})
}
{{ end -}}

func (q {{ $camelName }}SelectSQL) Single(db sqlla.DB) ({{ .StructName }}, error) {
	q.Columns = {{ $camelName }}AllColumns
	query, args, err := q.ToSql()
	if err != nil {
		return {{ .StructName }}{}, err
	}

	row := db.QueryRow(query, args...)
	return q.Scan(row)
}

func (q {{ $camelName }}SelectSQL) SingleContext(ctx context.Context, db sqlla.DB) ({{ .StructName }}, error) {
	q.Columns = {{ $camelName }}AllColumns
	query, args, err := q.ToSql()
	if err != nil {
		return {{ .StructName }}{}, err
	}

	row := db.QueryRowContext(ctx, query, args...)
	return q.Scan(row)
}

func (q {{ $camelName }}SelectSQL) All(db sqlla.DB) ([]{{ .StructName }}, error) {
	rs := make([]{{ .StructName }}, 0, 10)
	q.Columns = {{ $camelName }}AllColumns
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}

	rows, err := db.Query(query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	for rows.Next() {
		r, err := q.Scan(rows)
		if err != nil {
			return nil, err
		}
		rs = append(rs, r)
	}
	return rs, nil
}

func (q {{ $camelName }}SelectSQL) AllContext(ctx context.Context, db sqlla.DB) ([]{{ .StructName }}, error) {
	rs := make([]{{ .StructName }}, 0, 10)
	q.Columns = {{ $camelName }}AllColumns
	query, args, err := q.ToSql()
	if err != nil {
		return nil, err
	}

	rows, err := db.QueryContext(ctx, query, args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	for rows.Next() {
		r, err := q.Scan(rows)
		if err != nil {
			return nil, err
		}
		rs = append(rs, r)
	}
	return rs, nil
}

func (q {{ $camelName }}SelectSQL) Scan(s sqlla.Scanner) ({{ .StructName }}, error) {
	var row {{ .StructName }}
	err := s.Scan(
		{{ range .Columns }}&row.{{ .FieldName }},
		{{ end }}
	)
	return row, err
}
{{ end }}
