{{ define "Select" }}{{ $camelName := .Name | toCamel | toLower }}
type {{ $camelName }}SelectSQL struct {
	{{ .Name }}SQL
	Columns []string
	order   string
	limit   *uint64
}

func (q {{ $camelName }}SQL) Select() {{ $camelName }}SelectSQL {
	return {{ $camelName }}SelectSQL{
		q,
		[]string{
			{{ range .Columns }}"{{ .Name }}",{{ end }}
		},
		"",
		nil,
	}
}

func (q {{ $camelName }}SelectSQL) Limit(l uint64) {{ $camelName }}SelectSQL {
	q.limit = &l
	return q
}

{{ range .Columns }}{{ template "SelectColumn" . }}{{ end }}
func (q {{ $camelName }}SelectSQL) ToSql() (string, []interface{}, error) {
	columns := strings.Join(q.Columns, ", ")
	wheres, vs, err := q.where.ToSql()
	if err != nil {
		return "", nil, err
	}
	b := bytes.NewBuffer(make([]byte, 0, 256))
	b.WriteString("SELECT ")
	b.WriteString(columns)
	b.WriteString(" FROM {{ .Name }}")

	if wheres != "" {
		b.WriteString(" WHERE")
		b.WriteString(wheres)
	}

	b.WriteString(q.order)
	if q.limit != nil {
		b.WriteString(" LIMIT ")
		b.WriteString(strconv.FormatUint(*q.limit, 10))
	}

	b.WriteString(";")

	return b.String(), vs, nil
}
{{ end }}
