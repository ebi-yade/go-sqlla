{{ define "Select" }}{{ $camelName := .Name | toCamel | toLower }}
type {{ $camelName }}SelectSQL struct {
	{{ .Name }}SQL
	Columns []string
	order   string
	limit   *uint64
}

func (q {{ $camelName }}SQL) Select() {{ $camelName }}SelectSQL {
	return {{ $camelName }}SelectSQL{
		q,
		[]string{
			{{ range .Columns }}"{{ .Name }}",{{ end }}
		},
		"",
		nil,
	}
}

func (q {{ $camelName }}SelectSQL) Limit(l uint64) {{ $camelName }}SelectSQL {
	q.limit = &l
	return q
}

{{ range .Columns }}{{ template "SelectColumn" . }}{{ end }}
func (q {{ $camelName }}SelectSQL) ToSql() (string, []interface{}, error) {
	columns := strings.Join(q.Columns, ", ")
	wheres, vs, err := q.where.ToSql()
	if err != nil {
		return "", nil, err
	}
	b := make([]byte, 0, 256)
	b = append(b, []byte("SELECT ")...)
	b = append(b, []byte(columns)...)
	b = append(b, []byte(" FROM {{ .Name }}")...)

	if wheres != "" {
		b = append(b, []byte(" WHERE")...)
		b = append(b, []byte(wheres)...)
	}

	b = append(b, []byte(q.order)...)
	if q.limit != nil {
		b = append(b, []byte(" LIMIT ")...)
		b = append(b, []byte(strconv.FormatUint(*q.limit, 10))...)
	}

	b = append(b, []byte(";")...)

	return string(b), vs, nil
}
{{ end }}
