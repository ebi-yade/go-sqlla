{{ define "Insert" }}
{{- $camelName := .Name | toCamel | Untitle -}}
{{- $constructor := printf "New%sSQL" (.Name | toCamel) -}}
type {{ $camelName }}InsertSQL struct {
	{{ $camelName }}SQL
	setMap	sqlla.SetMap
	Columns []string
}

func (q {{ $camelName }}SQL) Insert() {{ $camelName }}InsertSQL {
	return {{ $camelName }}InsertSQL{
		{{ $camelName }}SQL: q,
		setMap: sqlla.SetMap{},
	}
}

{{ range .Columns }}{{ template "InsertColumn" . }}{{ end }}
func (q {{ $camelName }}InsertSQL) ToSql() (string, []interface{}, error) {
	query, vs, err := q.toSql()
	if err != nil {
			return "", []interface{}{}, err
	}
	return query + ";", vs, nil
}

func (q {{ $camelName }}InsertSQL) toSql() (string, []interface{}, error) {
	var err error
	var s interface{} = {{ .StructName }}{}
	if t, ok := s.({{ $camelName }}DefaultInsertHooker); ok {
		q, err = t.DefaultInsertHook(q)
		if err != nil {
			return "", []interface{}{}, err
		}
	}
	qs, vs, err := q.setMap.ToInsertSql()
	if err != nil {
		return "", []interface{}{}, err
	}

	query := "INSERT INTO {{ .Name }} " + qs

	return query, vs, nil
}


func (q {{ $camelName }}InsertSQL) OnDuplicateKeyUpdate() {{ $camelName }}InsertOnDuplicateKeyUpdateSQL {
	return {{ $camelName }}InsertOnDuplicateKeyUpdateSQL{
		insertSQL: q,
		onDuplicateKeyUpdateMap: sqlla.SetMap{},
	}
}

{{ if .HasPk -}}
func (q {{ $camelName }}InsertSQL) Exec(db sqlla.DB) ({{ .StructName }}, error) {
{{- else -}}
func (q {{ $camelName }}InsertSQL) Exec(db sqlla.DB) (sql.Result, error) {
{{- end }}
	query, args, err := q.ToSql()
	if err != nil {
		{{ if .HasPk -}}
		return {{ .StructName }}{}, err
		{{- else }}
		return nil, err
		{{- end }}
	}
	result, err := db.Exec(query, args...)
	{{ if .HasPk -}}
	if err != nil {
		return {{ .StructName }}{}, err
	}
	id, err := result.LastInsertId()
	if err != nil {
		return {{ .StructName }}{}, err
	}
	return {{ $constructor }}().Select().PkColumn(id).Single(db)
	{{- else -}}
	return result, err
	{{- end }}
}

{{ if .HasPk -}}
func (q {{ $camelName }}InsertSQL) ExecContext(ctx context.Context, db sqlla.DB) ({{ .StructName }}, error) {
{{- else -}}
func (q {{ $camelName }}InsertSQL) ExecContext(ctx context.Context, db sqlla.DB) (sql.Result, error) {
{{- end }}
	query, args, err := q.ToSql()
	if err != nil {
		{{ if .HasPk -}}
		return {{ .StructName }}{}, err
		{{- else }}
		return nil, err
		{{- end }}
	}
	result, err := db.ExecContext(ctx, query, args...)
	{{ if .HasPk -}}
	if err != nil {
		return {{ .StructName }}{}, err
	}
	id, err := result.LastInsertId()
	if err != nil {
		return {{ .StructName }}{}, err
	}
	return {{ $constructor }}().Select().PkColumn(id).SingleContext(ctx, db)
	{{- else -}}
	return result, err
	{{- end }}
}

type {{ $camelName }}DefaultInsertHooker interface {
	DefaultInsertHook({{ $camelName }}InsertSQL) ({{ $camelName }}InsertSQL, error)
}

type {{ $camelName }}InsertOnDuplicateKeyUpdateSQL struct {
	insertSQL {{ $camelName }}InsertSQL
	onDuplicateKeyUpdateMap sqlla.SetMap
}

{{ range .Columns }}{{ template "InsertOnDuplicateKeyUpdateColumn" . }}{{ end }}

func (q {{ $camelName }}InsertOnDuplicateKeyUpdateSQL) ToSql() (string, []interface{}, error) {
	var err error
	var s interface{} = {{ .StructName }}{}
	if t, ok := s.({{ $camelName }}DefaultInsertOnDuplicateKeyUpdateHooker); ok {
		q, err = t.DefaultInsertOnDuplicateKeyUpdateHook(q)
		if err != nil {
			return "", []interface{}{}, err
		}
	}

	query, vs, err := q.insertSQL.toSql()
	if err != nil {
			return "", []interface{}{}, err
	}

	os, ovs, err := q.onDuplicateKeyUpdateMap.ToUpdateSql()
	if err != nil {
		return "", []interface{}{}, err
	}
	query += " ON DUPLICATE KEY UPDATE" + os
	vs = append(vs, ovs...)

	return query + ";", vs, nil
}

{{ if .HasPk -}}
func (q {{ $camelName }}InsertOnDuplicateKeyUpdateSQL) ExecContext(ctx context.Context, db sqlla.DB) ({{ .StructName }}, error) {
{{- else -}}
func (q {{ $camelName }}InsertOnDuplicateKeyUpdateSQL) ExecContext(ctx context.Context, db sqlla.DB) (sql.Result, error) {
{{- end }}
	query, args, err := q.ToSql()
	if err != nil {
		{{ if .HasPk -}}
		return {{ .StructName }}{}, err
		{{- else }}
		return nil, err
		{{- end }}
	}
	result, err := db.ExecContext(ctx, query, args...)
	{{ if .HasPk -}}
	if err != nil {
		return {{ .StructName }}{}, err
	}
	id, err := result.LastInsertId()
	if err != nil {
		return {{ .StructName }}{}, err
	}
	return {{ $constructor }}().Select().PkColumn(id).SingleContext(ctx, db)
	{{- else -}}
	return result, err
	{{- end }}
}

type {{ $camelName }}DefaultInsertOnDuplicateKeyUpdateHooker interface {
	DefaultInsertOnDuplicateKeyUpdateHook({{ $camelName }}InsertOnDuplicateKeyUpdateSQL) ({{ $camelName }}InsertOnDuplicateKeyUpdateSQL, error)
}
{{ end }}
