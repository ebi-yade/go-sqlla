{{ define "SelectColumn" }}{{ $smallTableName := .TableName | toCamel | toLower }}
func (q {{ $smallTableName }}SelectSQL) {{ .Name | toCamel | Title }}(v {{ .TypeName }}, exprs ...sqlla.Operator) {{ $smallTableName }}SelectSQL {
	var op sqlla.Operator
	if len(exprs) == 0 {
		op = sqlla.OpEqual
	} else {
		op = exprs[0]
	}

	where := sqlla.Expr{{ .TypeName | Title }}{Value: v, Op: op, Column: "{{ .Name }}"}
	q.where = append(q.where, where)
	return q
}

func (q {{ $smallTableName }}SelectSQL) {{ .Name | toCamel | Title }}In(v {{ .TypeName }}, vs ...{{ .TypeName }}) {{ $smallTableName }}SelectSQL {
	where := sqlla.ExprMulti{{ .TypeName | Title }}{Values: append([]{{ .TypeName }}{v}, vs...), Op: sqlla.MakeInOperator(len(vs) + 1), Column: "{{ .Name }}"}
	q.where = append(q.where, where)
	return q
}

{{ if .IsPk -}}
func (q {{ $smallTableName }}SelectSQL) PkColumn(pk int64, exprs ...sqlla.Operator) {{ $smallTableName }}SelectSQL {
	v := {{ .TypeName }}(pk)
	return q.{{ .Name | toCamel | Title }}(v, exprs...)
}
{{- end }}

func (q {{ $smallTableName }}SelectSQL) OrderBy{{ .Name | toCamel }}(order sqlla.Order) {{ $smallTableName }}SelectSQL {
	q.order = " ORDER BY {{ .Name }}"
	if order == sqlla.Asc {
		q.order += " ASC"
	} else {
		q.order += " DESC"
	}

	return q
}
{{ end }}
